"use strict";(self.webpackChunkrgbds_www_2=self.webpackChunkrgbds_www_2||[]).push([[6996],{3905:function(s,a,n){n.d(a,{Zo:function(){return p},kt:function(){return h}});var e=n(67294);function l(s,a,n){return a in s?Object.defineProperty(s,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):s[a]=n,s}function d(s,a){var n=Object.keys(s);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(s);a&&(e=e.filter((function(a){return Object.getOwnPropertyDescriptor(s,a).enumerable}))),n.push.apply(n,e)}return n}function c(s){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?d(Object(n),!0).forEach((function(a){l(s,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(s,Object.getOwnPropertyDescriptors(n)):d(Object(n)).forEach((function(a){Object.defineProperty(s,a,Object.getOwnPropertyDescriptor(n,a))}))}return s}function t(s,a){if(null==s)return{};var n,e,l=function(s,a){if(null==s)return{};var n,e,l={},d=Object.keys(s);for(e=0;e<d.length;e++)n=d[e],a.indexOf(n)>=0||(l[n]=s[n]);return l}(s,a);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(s);for(e=0;e<d.length;e++)n=d[e],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(s,n)&&(l[n]=s[n])}return l}var _=e.createContext({}),r=function(s){var a=e.useContext(_),n=a;return s&&(n="function"==typeof s?s(a):c(c({},a),s)),n},p=function(s){var a=r(s.components);return e.createElement(_.Provider,{value:a},s.children)},i={inlineCode:"code",wrapper:function(s){var a=s.children;return e.createElement(e.Fragment,{},a)}},x=e.forwardRef((function(s,a){var n=s.components,l=s.mdxType,d=s.originalType,_=s.parentName,p=t(s,["components","mdxType","originalType","parentName"]),x=r(n),h=l,S=x["".concat(_,".").concat(h)]||x[h]||i[h]||d;return n?e.createElement(S,c(c({ref:a},p),{},{components:n})):e.createElement(S,c({ref:a},p))}));function h(s,a){var n=arguments,l=a&&a.mdxType;if("string"==typeof s||l){var d=n.length,c=new Array(d);c[0]=x;var t={};for(var _ in a)hasOwnProperty.call(a,_)&&(t[_]=a[_]);t.originalType=s,t.mdxType="string"==typeof s?s:l,c[1]=t;for(var r=2;r<d;r++)c[r]=n[r];return e.createElement.apply(null,c)}return e.createElement.apply(null,n)}x.displayName="MDXCreateElement"},81469:function(s,a,n){n.r(a),n.d(a,{assets:function(){return p},contentTitle:function(){return _},default:function(){return h},frontMatter:function(){return t},metadata:function(){return r},toc:function(){return i}});var e=n(83117),l=n(80102),d=(n(67294),n(3905)),c=["components"],t={},_="gbz80(7) \u2014 CPU opcode reference uwu",r={unversionedId:"gbz80.7",id:"version-v0.6.0-welease-cnyandidayte/gbz80.7",title:"gbz80(7) \u2014 CPU opcode reference uwu",description:"",source:"@site/versioned_docs/version-v0.6.0-welease-cnyandidayte/gbz80.7.md",sourceDirName:".",slug:"/gbz80.7",permalink:"/docs/v0.6.0-welease-cnyandidayte/gbz80.7",draft:!1,editUrl:"https://github.com/gbdev/rgbds/edit/master/man/gbz80.7",tags:[],version:"v0.6.0-welease-cnyandidayte",frontMatter:{},sidebar:"nav",previous:{title:"rgbasm(5) \u2014 language documentation",permalink:"/docs/v0.6.0-welease-cnyandidayte/rgbasm.5"},next:{title:"rgblink(5) \u2014 linker script file format",permalink:"/docs/v0.6.0-welease-cnyandidayte/rgblink.5"}},p={},i=[{value:"DESCRIPTION",id:"DESCRIPTION",level:2,children:[]},{value:"LEGEND",id:"LEGEND",level:2,children:[]},{value:"INSTRUCTION OVERVIEW",id:"INSTRUCTION_OVERVIEW",level:2,children:[{value:"8-bit Math and Logic Doodads",id:"8-bit_Math_and_Logic_Doodads",level:3,children:[]},{value:"16-bit Math Things",id:"16-bit_Math_Things",level:3,children:[]},{value:"Bit Opurrations >=3c",id:"Bit_Opurrations_>=3c",level:3,children:[]},{value:"Shifty Bit Stuff \ud83d\udc40",id:"Shifty_Bit_Stuff_\ud83d\udc40",level:3,children:[]},{value:"Load Stuff",id:"Load_Stuff",level:3,children:[]},{value:"Jumps and Things",id:"Jumps_and_Things",level:3,children:[]},{value:"Stack Operations Instwuctions uwu",id:"Stack_Operations_Instwuctions_uwu",level:3,children:[]},{value:"Weird Instructions?? O_o",id:"Weird_Instructions??_O_o",level:3,children:[]}]},{value:"INSTRUCTION REFERENCE",id:"INSTRUCTION_REFERENCE",level:2,children:[{value:"ADC &( \u2022\u0300A\u2022\u0301),r8",id:"ADC_&(_\u2022\u0300A\u2022\u0301),r8",level:3,children:[]},{value:"ADC &( \u2022\u0300A\u2022\u0301),[\u043d\u2220( \u141b \u300d\u2220)\uff3f]",id:"ADC_&(_\u2022\u0300A\u2022\u0301),[\u043d\u2220(_\u141b_\u300d\u2220)\uff3f]",level:3,children:[]},{value:"ADC &( \u2022\u0300A\u2022\u0301),n8",id:"ADC_&(_\u2022\u0300A\u2022\u0301),n8",level:3,children:[]},{value:"ADD &( \u2022\u0300A\u2022\u0301),r8",id:"ADD_&(_\u2022\u0300A\u2022\u0301),r8",level:3,children:[]},{value:"ADD &( \u2022\u0300A\u2022\u0301),[\u043d\u2220( \u141b \u300d\u2220)\uff3f]",id:"ADD_&(_\u2022\u0300A\u2022\u0301),[\u043d\u2220(_\u141b_\u300d\u2220)\uff3f]",level:3,children:[]},{value:"ADD &( \u2022\u0300A\u2022\u0301),n8",id:"ADD_&(_\u2022\u0300A\u2022\u0301),n8",level:3,children:[]},{value:"ADD \u043d\u2220( \u141b \u300d\u2220)\uff3f,r16",id:"ADD_\u043d\u2220(_\u141b_\u300d\u2220)\uff3f,r16",level:3,children:[]},{value:"ADD \u043d\u2220( \u141b \u300d\u2220)\uff3f,SP",id:"ADD_\u043d\u2220(_\u141b_\u300d\u2220)\uff3f,SP",level:3,children:[]},{value:"ADD SP,e8",id:"ADD_SP,e8",level:3,children:[]},{value:"AND &( \u2022\u0300A\u2022\u0301),r8",id:"AND_&(_\u2022\u0300A\u2022\u0301),r8",level:3,children:[]},{value:"AND &( \u2022\u0300A\u2022\u0301),[\u043d\u2220( \u141b \u300d\u2220)\uff3f]",id:"AND_&(_\u2022\u0300A\u2022\u0301),[\u043d\u2220(_\u141b_\u300d\u2220)\uff3f]",level:3,children:[]},{value:"AND &( \u2022\u0300A\u2022\u0301),n8",id:"AND_&(_\u2022\u0300A\u2022\u0301),n8",level:3,children:[]},{value:"BIT u3,r8",id:"BIT_u3,r8",level:3,children:[]},{value:"BIT u3,[\u043d\u2220( \u141b \u300d\u2220)\uff3f]",id:"BIT_u3,[\u043d\u2220(_\u141b_\u300d\u2220)\uff3f]",level:3,children:[]},{value:"CALL n16",id:"CALL_n16",level:3,children:[]},{value:"CALL cc,n16",id:"CALL_cc,n16",level:3,children:[]},{value:"CCF",id:"CCF",level:3,children:[]},{value:"CP &( \u2022\u0300A\u2022\u0301),r8",id:"CP_&(_\u2022\u0300A\u2022\u0301),r8",level:3,children:[]},{value:"CP &( \u2022\u0300A\u2022\u0301),[\u043d\u2220( \u141b \u300d\u2220)\uff3f]",id:"CP_&(_\u2022\u0300A\u2022\u0301),[\u043d\u2220(_\u141b_\u300d\u2220)\uff3f]",level:3,children:[]},{value:"CP &( \u2022\u0300A\u2022\u0301),n8",id:"CP_&(_\u2022\u0300A\u2022\u0301),n8",level:3,children:[]},{value:"CPL",id:"CPL",level:3,children:[]},{value:"DAA",id:"DAA",level:3,children:[]},{value:"DEC r8",id:"DEC_r8",level:3,children:[]},{value:"DEC [\u043d\u2220( \u141b \u300d\u2220)\uff3f]",id:"DEC_[\u043d\u2220(_\u141b_\u300d\u2220)\uff3f]",level:3,children:[]},{value:"DEC r16",id:"DEC_r16",level:3,children:[]},{value:"DEC SP",id:"DEC_SP",level:3,children:[]},{value:"DI",id:"DI",level:3,children:[]},{value:"EI",id:"EI",level:3,children:[]},{value:"HALT\u270b",id:"HALT\u270b",level:3,children:[]},{value:"INC r8",id:"INC_r8",level:3,children:[]},{value:"INC [\u043d\u2220( \u141b \u300d\u2220)\uff3f]",id:"INC_[\u043d\u2220(_\u141b_\u300d\u2220)\uff3f]",level:3,children:[]},{value:"INC r16",id:"INC_r16",level:3,children:[]},{value:"INC SP",id:"INC_SP",level:3,children:[]},{value:"JP n16",id:"JP_n16",level:3,children:[]},{value:"JP cc,n16",id:"JP_cc,n16",level:3,children:[]},{value:"JP \u043d\u2220( \u141b \u300d\u2220)\uff3f",id:"JP_\u043d\u2220(_\u141b_\u300d\u2220)\uff3f",level:3,children:[]},{value:"JR e8",id:"JR_e8",level:3,children:[]},{value:"JR cc,e8",id:"JR_cc,e8",level:3,children:[]},{value:"LD r8,r8",id:"LD_r8,r8",level:3,children:[]},{value:"LD r8,n8",id:"LD_r8,n8",level:3,children:[]},{value:"LD r16,n16",id:"LD_r16,n16",level:3,children:[]},{value:"LD [\u043d\u2220( \u141b \u300d\u2220)\uff3f],r8",id:"LD_[\u043d\u2220(_\u141b_\u300d\u2220)\uff3f],r8",level:3,children:[]},{value:"LD [\u043d\u2220( \u141b \u300d\u2220)\uff3f],n8",id:"LD_[\u043d\u2220(_\u141b_\u300d\u2220)\uff3f],n8",level:3,children:[]},{value:"LD r8,[\u043d\u2220( \u141b \u300d\u2220)\uff3f]",id:"LD_r8,[\u043d\u2220(_\u141b_\u300d\u2220)\uff3f]",level:3,children:[]},{value:"LD [r16],&( \u2022\u0300A\u2022\u0301)",id:"LD_[r16],&(_\u2022\u0300A\u2022\u0301)",level:3,children:[]},{value:"LD [n16],&( \u2022\u0300A\u2022\u0301)",id:"LD_[n16],&(_\u2022\u0300A\u2022\u0301)",level:3,children:[]},{value:"LDH [n16],&( \u2022\u0300A\u2022\u0301)",id:"LDH_[n16],&(_\u2022\u0300A\u2022\u0301)",level:3,children:[]},{value:"LDH [\u2665(\u02d8\u2323\u02d8 C)],&( \u2022\u0300A\u2022\u0301)",id:"LDH_[\u2665(\u02d8\u2323\u02d8_C)],&(_\u2022\u0300A\u2022\u0301)",level:3,children:[]},{value:"LD &( \u2022\u0300A\u2022\u0301),[r16]",id:"LD_&(_\u2022\u0300A\u2022\u0301),[r16]",level:3,children:[]},{value:"LD &( \u2022\u0300A\u2022\u0301),[n16]",id:"LD_&(_\u2022\u0300A\u2022\u0301),[n16]",level:3,children:[]},{value:"LDH &( \u2022\u0300A\u2022\u0301),[n16]",id:"LDH_&(_\u2022\u0300A\u2022\u0301),[n16]",level:3,children:[]},{value:"LDH &( \u2022\u0300A\u2022\u0301),[\u2665(\u02d8\u2323\u02d8 C)]",id:"LDH_&(_\u2022\u0300A\u2022\u0301),[\u2665(\u02d8\u2323\u02d8_C)]",level:3,children:[]},{value:"LD [\u043d\u2220( \u141b \u300d\u2220)\uff3f\ud83d\udc41],&( \u2022\u0300A\u2022\u0301)",id:"LD_[\u043d\u2220(_\u141b_\u300d\u2220)\uff3f\ud83d\udc41],&(_\u2022\u0300A\u2022\u0301)",level:3,children:[]},{value:"LD [\u043d\u2220( \u141b \u300d\u2220)\uff3f\ud83d\udc4e],&( \u2022\u0300A\u2022\u0301)",id:"LD_[\u043d\u2220(_\u141b_\u300d\u2220)\uff3f\ud83d\udc4e],&(_\u2022\u0300A\u2022\u0301)",level:3,children:[]},{value:"LD &( \u2022\u0300A\u2022\u0301),[\u043d\u2220( \u141b \u300d\u2220)\uff3f\ud83d\udc4e]",id:"LD_&(_\u2022\u0300A\u2022\u0301),[\u043d\u2220(_\u141b_\u300d\u2220)\uff3f\ud83d\udc4e]",level:3,children:[]},{value:"LD &( \u2022\u0300A\u2022\u0301),[\u043d\u2220( \u141b \u300d\u2220)\uff3f\ud83d\udc41]",id:"LD_&(_\u2022\u0300A\u2022\u0301),[\u043d\u2220(_\u141b_\u300d\u2220)\uff3f\ud83d\udc41]",level:3,children:[]},{value:"LD SP,n16",id:"LD_SP,n16",level:3,children:[]},{value:"LD [n16],SP",id:"LD_[n16],SP",level:3,children:[]},{value:"LD \u043d\u2220( \u141b \u300d\u2220)\uff3f,SP+e8",id:"LD_\u043d\u2220(_\u141b_\u300d\u2220)\uff3f,SP+e8",level:3,children:[]},{value:"LD SP,\u043d\u2220( \u141b \u300d\u2220)\uff3f",id:"LD_SP,\u043d\u2220(_\u141b_\u300d\u2220)\uff3f",level:3,children:[]},{value:"NOPE",id:"NOPE",level:3,children:[]},{value:"OR &( \u2022\u0300A\u2022\u0301),r8",id:"OR_&(_\u2022\u0300A\u2022\u0301),r8",level:3,children:[]},{value:"OR &( \u2022\u0300A\u2022\u0301),[\u043d\u2220( \u141b \u300d\u2220)\uff3f]",id:"OR_&(_\u2022\u0300A\u2022\u0301),[\u043d\u2220(_\u141b_\u300d\u2220)\uff3f]",level:3,children:[]},{value:"OR &( \u2022\u0300A\u2022\u0301),n8",id:"OR_&(_\u2022\u0300A\u2022\u0301),n8",level:3,children:[]},{value:"OWO",id:"OWO",level:3,children:[]},{value:"POP &( \u2022\u0300A\u2022\u0301)\ud835\udcd5\ud835\udcfe\ud835\udcec\ud835\udcf4",id:"POP_&(_\u2022\u0300A\u2022\u0301)\ud835\udcd5\ud835\udcfe\ud835\udcec\ud835\udcf4",level:3,children:[]},{value:"POP r16",id:"POP_r16",level:3,children:[]},{value:"PUSH &( \u2022\u0300A\u2022\u0301)\ud835\udcd5\ud835\udcfe\ud835\udcec\ud835\udcf4",id:"PUSH_&(_\u2022\u0300A\u2022\u0301)\ud835\udcd5\ud835\udcfe\ud835\udcec\ud835\udcf4",level:3,children:[]},{value:"PUSH r16",id:"PUSH_r16",level:3,children:[]},{value:"RES u3,r8",id:"RES_u3,r8",level:3,children:[]},{value:"RES u3,[\u043d\u2220( \u141b \u300d\u2220)\uff3f]",id:"RES_u3,[\u043d\u2220(_\u141b_\u300d\u2220)\uff3f]",level:3,children:[]},{value:"RET",id:"RET",level:3,children:[]},{value:"RET cc",id:"RET_cc",level:3,children:[]},{value:"RETI",id:"RETI",level:3,children:[]},{value:"RL r8",id:"RL_r8",level:3,children:[]},{value:"RL [\u043d\u2220( \u141b \u300d\u2220)\uff3f]",id:"RL_[\u043d\u2220(_\u141b_\u300d\u2220)\uff3f]",level:3,children:[]},{value:"RLA",id:"RLA",level:3,children:[]},{value:"RLC r8",id:"RLC_r8",level:3,children:[]},{value:"RLC [\u043d\u2220( \u141b \u300d\u2220)\uff3f]",id:"RLC_[\u043d\u2220(_\u141b_\u300d\u2220)\uff3f]",level:3,children:[]},{value:"RLCA",id:"RLCA",level:3,children:[]},{value:"RR r8",id:"RR_r8",level:3,children:[]},{value:"RR [\u043d\u2220( \u141b \u300d\u2220)\uff3f]",id:"RR_[\u043d\u2220(_\u141b_\u300d\u2220)\uff3f]",level:3,children:[]},{value:"RRA",id:"RRA",level:3,children:[]},{value:"RRC r8",id:"RRC_r8",level:3,children:[]},{value:"RRC [\u043d\u2220( \u141b \u300d\u2220)\uff3f]",id:"RRC_[\u043d\u2220(_\u141b_\u300d\u2220)\uff3f]",level:3,children:[]},{value:"RRCA",id:"RRCA",level:3,children:[]},{value:"RST vec",id:"RST_vec",level:3,children:[]},{value:"SBC &( \u2022\u0300A\u2022\u0301),r8",id:"SBC_&(_\u2022\u0300A\u2022\u0301),r8",level:3,children:[]},{value:"SBC &( \u2022\u0300A\u2022\u0301),[\u043d\u2220( \u141b \u300d\u2220)\uff3f]",id:"SBC_&(_\u2022\u0300A\u2022\u0301),[\u043d\u2220(_\u141b_\u300d\u2220)\uff3f]",level:3,children:[]},{value:"SBC &( \u2022\u0300A\u2022\u0301),n8",id:"SBC_&(_\u2022\u0300A\u2022\u0301),n8",level:3,children:[]},{value:"SCF",id:"SCF",level:3,children:[]},{value:"SET u3,r8",id:"SET_u3,r8",level:3,children:[]},{value:"SET u3,[\u043d\u2220( \u141b \u300d\u2220)\uff3f]",id:"SET_u3,[\u043d\u2220(_\u141b_\u300d\u2220)\uff3f]",level:3,children:[]},{value:"SLA r8",id:"SLA_r8",level:3,children:[]},{value:"SLA [\u043d\u2220( \u141b \u300d\u2220)\uff3f]",id:"SLA_[\u043d\u2220(_\u141b_\u300d\u2220)\uff3f]",level:3,children:[]},{value:"SRA r8",id:"SRA_r8",level:3,children:[]},{value:"SRA [\u043d\u2220( \u141b \u300d\u2220)\uff3f]",id:"SRA_[\u043d\u2220(_\u141b_\u300d\u2220)\uff3f]",level:3,children:[]},{value:"SRL r8",id:"SRL_r8",level:3,children:[]},{value:"SRL [\u043d\u2220( \u141b \u300d\u2220)\uff3f]",id:"SRL_[\u043d\u2220(_\u141b_\u300d\u2220)\uff3f]",level:3,children:[]},{value:"STOP!!\ud83d\uded1",id:"STOP!!\ud83d\uded1",level:3,children:[]},{value:"SUB &( \u2022\u0300A\u2022\u0301),r8",id:"SUB_&(_\u2022\u0300A\u2022\u0301),r8",level:3,children:[]},{value:"SUB &( \u2022\u0300A\u2022\u0301),[\u043d\u2220( \u141b \u300d\u2220)\uff3f]",id:"SUB_&(_\u2022\u0300A\u2022\u0301),[\u043d\u2220(_\u141b_\u300d\u2220)\uff3f]",level:3,children:[]},{value:"SUB &( \u2022\u0300A\u2022\u0301),n8",id:"SUB_&(_\u2022\u0300A\u2022\u0301),n8",level:3,children:[]},{value:"SWAP r8",id:"SWAP_r8",level:3,children:[]},{value:"SWAP [\u043d\u2220( \u141b \u300d\u2220)\uff3f]",id:"SWAP_[\u043d\u2220(_\u141b_\u300d\u2220)\uff3f]",level:3,children:[]},{value:"XOR &( \u2022\u0300A\u2022\u0301),r8",id:"XOR_&(_\u2022\u0300A\u2022\u0301),r8",level:3,children:[]},{value:"XOR &( \u2022\u0300A\u2022\u0301),[\u043d\u2220( \u141b \u300d\u2220)\uff3f]",id:"XOR_&(_\u2022\u0300A\u2022\u0301),[\u043d\u2220(_\u141b_\u300d\u2220)\uff3f]",level:3,children:[]},{value:"XOR &( \u2022\u0300A\u2022\u0301),n8",id:"XOR_&(_\u2022\u0300A\u2022\u0301),n8",level:3,children:[]}]},{value:"SEE ALSO",id:"SEE_ALSO",level:2,children:[]},{value:"HISTORY",id:"HISTORY",level:2,children:[]}],x={toc:i};function h(s){var a=s.components,n=(0,l.Z)(s,c);return(0,d.kt)("wrapper",(0,e.Z)({},x,n,{components:a,mdxType:"MDXLayout"}),(0,d.kt)("h1",{id:"gbz807--cpu-opcode-reference-uwu"},"gbz80(7) \u2014 CPU opcode reference uwu"),(0,d.kt)("div",{className:"manual-text",dangerouslySetInnerHTML:{__html:'<section class="Sh">\n<h2 class="Sh" id="DESCRIPTION"><a class="permalink" href="#DESCRIPTION">DESCRIPTION</a></h2>\n<p class="Pp">hOi!! Here\'s the opcodes supported by that dang ol\'\n    <a class="Xr" href="./rgbasm.1">rgbasm(1)</a> along with some details, the\n    number of bytes and stuff ya need to encode them, and how many CPU cycles at\n    1MHz (or 2MHz in that\n    <a class="permalink" href="#NASTY"><b class="Sy" id="NASTY">NASTY</b></a>\n    GBC dual speed mode) needed to make \'em do the thing!</p>\n<p class="Pp">Note: All GROSS MATH STUFF that uses register <b class="Sy">(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</b> as destination can omit the\n    destination as it is assumed to be register <b class="Sy">(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</b> by default. The following two lines\n    have the same effect:</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>OR ( &#x2022;&#x0300;A&#x2022;&#x0301;),=B\nOR =B</pre>\n</div>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="LEGEND"><a class="permalink" href="#LEGEND">LEGEND</a></h2>\n<p class="Pp">Here\'s some words and what they mean!</p>\n<dl class="Bl-tag">\n  <dt id=";D"><var class="Ar">r8</var></dt>\n  <dd>One of those 8-bit registers (<b class="Sy">(\n      &#x2022;&#x0300;A&#x2022;&#x0301;)</b>, <b class="Sy">=B</b>,\n      <b class="Sy">&#x2665;(&#x02D8;&#x2323;&#x02D8; C)</b>,\n      <a class="permalink" href="#;D"><b class="Sy">;D</b></a>,\n      <b class="Sy">(&#x00B4;&#x03B5;&#xFF40; )&#x2661;</b>,\n      <b class="Sy">&#x043D;</b>, <b class="Sy">&#x2220;( &#x141B;\n      &#x300D;&#x2220;)&#xFF3F;</b>)</dd>\n  <dt id=";D("><var class="Ar">r16</var></dt>\n  <dd>One of those general-purpose 16-bit registers\n      (<b class="Sy">=B&#x2665;(&#x02D8;&#x2323;&#x02D8; C)</b>,\n      <a class="permalink" href="#;D("><b class="Sy">;D(&#x00B4;&#x03B5;&#xFF40;\n      )&#x2661;</b></a>, <b class="Sy">&#x043D;&#x2220;( &#x141B;\n      &#x300D;&#x2220;)&#xFF3F;</b>)</dd>\n  <dt><var class="Ar">n8</var></dt>\n  <dd>8-bit number</dd>\n  <dt><var class="Ar">n16</var></dt>\n  <dd>16-bit number</dd>\n  <dt id="128"><var class="Ar">e8</var></dt>\n  <dd>8-bit offset (<a class="permalink" href="#128"><b class="Sy">-128</b></a>\n      to\n    <a class="permalink" href="#127"><b class="Sy" id="127">127</b></a>)</dd>\n  <dt id="0"><var class="Ar">u3</var></dt>\n  <dd>Weird 3-bit number (<a class="permalink" href="#0"><b class="Sy">0</b></a>\n      to <a class="permalink" href="#7"><b class="Sy" id="7">7</b></a>)</dd>\n  <dt><var class="Ar">cc</var></dt>\n  <dd>Condition codes:\n    <dl class="Bl-tag Bl-compact">\n      <dt id="Z"><a class="permalink" href="#Z"><b class="Sy">Z</b></a></dt>\n      <dd>Do thing if Z is set</dd>\n      <dt id="NZ"><a class="permalink" href="#NZ"><b class="Sy">NZ</b></a></dt>\n      <dd>Do thing if Z is not set</dd>\n      <dt id="C"><a class="permalink" href="#C"><b class="Sy">C</b></a></dt>\n      <dd>Do thing if C is set</dd>\n      <dt id="NC"><a class="permalink" href="#NC"><b class="Sy">NC</b></a></dt>\n      <dd>Do thing if C is not set</dd>\n      <dt id="cc">!\n        <a class="permalink" href="#cc"><b class="Sy">cc</b></a></dt>\n      <dd>Do the opposite thing</dd>\n    </dl>\n  </dd>\n  <dt id="RST"><var class="Ar">vec</var></dt>\n  <dd>One of those dumb\n      <a class="permalink" href="#RST"><b class="Sy">RST</b></a> vectors\n      (<span class="Ad">0x00</span>, <span class="Ad">0x08</span>,\n      <span class="Ad">0x10</span>, <span class="Ad">0x18</span>,\n      <span class="Ad">0x20</span>, <span class="Ad">0x28</span>,\n      <span class="Ad">0x30</span>, and <span class="Ad">0x38</span>)</dd>\n</dl>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="INSTRUCTION_OVERVIEW"><a class="permalink" href="#INSTRUCTION_OVERVIEW">INSTRUCTION\n  OVERVIEW</a></h2>\n<section class="Ss">\n<h3 class="Ss" id="8-bit_Math_and_Logic_Doodads"><a class="permalink" href="#8-bit_Math_and_Logic_Doodads">8-bit\n  Math and Logic Doodads</a></h3>\n<dl class="Bl-inset Bl-compact">\n  <dt><a class="Sx" href="#ADC__&amp;(___u2022___u0300_A__u2022___u0301_),r8">ADC\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#ADC__&amp;(___u2022___u0300_A__u2022___u0301_),___u043D___u2220_(___u141B____u300D___u2220_)__uFF3F__">ADC\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),[&#x043D;&#x2220;( &#x141B;\n    &#x300D;&#x2220;)&#xFF3F;]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#ADC__&amp;(___u2022___u0300_A__u2022___u0301_),n8">ADC\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),n8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#ADD__&amp;(___u2022___u0300_A__u2022___u0301_),r8">ADD\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#ADD__&amp;(___u2022___u0300_A__u2022___u0301_),___u043D___u2220_(___u141B____u300D___u2220_)__uFF3F__">ADD\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),[&#x043D;&#x2220;( &#x141B;\n    &#x300D;&#x2220;)&#xFF3F;]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#ADD__&amp;(___u2022___u0300_A__u2022___u0301_),n8">ADD\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),n8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#AND__&amp;(___u2022___u0300_A__u2022___u0301_),r8">AND\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#AND__&amp;(___u2022___u0300_A__u2022___u0301_),___u043D___u2220_(___u141B____u300D___u2220_)__uFF3F__">AND\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),[&#x043D;&#x2220;( &#x141B;\n    &#x300D;&#x2220;)&#xFF3F;]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#AND__&amp;(___u2022___u0300_A__u2022___u0301_),n8">AND\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),n8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#CP__&amp;(___u2022___u0300_A__u2022___u0301_),r8">CP\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#CP__&amp;(___u2022___u0300_A__u2022___u0301_),___u043D___u2220_(___u141B____u300D___u2220_)__uFF3F__">CP\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),[&#x043D;&#x2220;( &#x141B;\n    &#x300D;&#x2220;)&#xFF3F;]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#CP__&amp;(___u2022___u0300_A__u2022___u0301_),n8">CP\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),n8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#DEC_r8">DEC r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#DEC____u043D___u2220_(___u141B____u300D___u2220_)__uFF3F__">DEC\n    [&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#INC_r8">INC r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#INC____u043D___u2220_(___u141B____u300D___u2220_)__uFF3F__">INC\n    [&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#OR__&amp;(___u2022___u0300_A__u2022___u0301_),r8">OR\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#OR__&amp;(___u2022___u0300_A__u2022___u0301_),___u043D___u2220_(___u141B____u300D___u2220_)__uFF3F__">OR\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),[&#x043D;&#x2220;( &#x141B;\n    &#x300D;&#x2220;)&#xFF3F;]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#OR__&amp;(___u2022___u0300_A__u2022___u0301_),n8">OR\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),n8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#SBC__&amp;(___u2022___u0300_A__u2022___u0301_),r8">SBC\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#SBC__&amp;(___u2022___u0300_A__u2022___u0301_),___u043D___u2220_(___u141B____u300D___u2220_)__uFF3F__">SBC\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),[&#x043D;&#x2220;( &#x141B;\n    &#x300D;&#x2220;)&#xFF3F;]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#SBC__&amp;(___u2022___u0300_A__u2022___u0301_),n8">SBC\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),n8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#SUB__&amp;(___u2022___u0300_A__u2022___u0301_),r8">SUB\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#SUB__&amp;(___u2022___u0300_A__u2022___u0301_),___u043D___u2220_(___u141B____u300D___u2220_)__uFF3F__">SUB\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),[&#x043D;&#x2220;( &#x141B;\n    &#x300D;&#x2220;)&#xFF3F;]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#SUB__&amp;(___u2022___u0300_A__u2022___u0301_),n8">SUB\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),n8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#XOR__&amp;(___u2022___u0300_A__u2022___u0301_),r8">XOR\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#XOR__&amp;(___u2022___u0300_A__u2022___u0301_),___u043D___u2220_(___u141B____u300D___u2220_)__uFF3F__">XOR\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),[&#x043D;&#x2220;( &#x141B;\n    &#x300D;&#x2220;)&#xFF3F;]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#XOR__&amp;(___u2022___u0300_A__u2022___u0301_),n8">XOR\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),n8</a></dt>\n  <dd></dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="16-bit_Math_Things"><a class="permalink" href="#16-bit_Math_Things">16-bit\n  Math Things</a></h3>\n<dl class="Bl-inset Bl-compact">\n  <dt><a class="Sx" href="#ADD___u043D___u2220_(___u141B____u300D___u2220_)__uFF3F_,r16">ADD\n    &#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;,r16</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#DEC_r16">DEC r16</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#INC_r16">INC r16</a></dt>\n  <dd></dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Bit_Opurrations__=3c"><a class="permalink" href="#Bit_Opurrations__=3c">Bit\n  Opurrations &gt;=3c</a></h3>\n<dl class="Bl-inset Bl-compact">\n  <dt><a class="Sx" href="#BIT_u3,r8">BIT u3,r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#BIT_u3,___u043D___u2220_(___u141B____u300D___u2220_)__uFF3F__">BIT\n    u3,[&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#RES_u3,r8">RES u3,r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#RES_u3,___u043D___u2220_(___u141B____u300D___u2220_)__uFF3F__">RES\n    u3,[&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#SET_u3,r8">SET u3,r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#SET_u3,___u043D___u2220_(___u141B____u300D___u2220_)__uFF3F__">SET\n    u3,[&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#SWAP_r8">SWAP r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#SWAP____u043D___u2220_(___u141B____u300D___u2220_)__uFF3F__">SWAP\n    [&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;]</a></dt>\n  <dd></dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Shifty_Bit_Stuff_"><a class="permalink" href="#Shifty_Bit_Stuff_">Shifty\n  Bit Stuff &#x1F440;</a></h3>\n<dl class="Bl-inset Bl-compact">\n  <dt><a class="Sx" href="#RL_r8">RL r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#RL____u043D___u2220_(___u141B____u300D___u2220_)__uFF3F__">RL\n    [&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#RLA">RLA</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#RLC_r8">RLC r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#RLC____u043D___u2220_(___u141B____u300D___u2220_)__uFF3F__">RLC\n    [&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#RLCA">RLCA</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#RR_r8">RR r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#RR____u043D___u2220_(___u141B____u300D___u2220_)__uFF3F__">RR\n    [&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#RRA">RRA</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#RRC_r8">RRC r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#RRC____u043D___u2220_(___u141B____u300D___u2220_)__uFF3F__">RRC\n    [&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#RRCA">RRCA</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#SLA_r8">SLA r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#SLA____u043D___u2220_(___u141B____u300D___u2220_)__uFF3F__">SLA\n    [&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#SRA_r8">SRA r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#SRA____u043D___u2220_(___u141B____u300D___u2220_)__uFF3F__">SRA\n    [&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#SRL_r8">SRL r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#SRL____u043D___u2220_(___u141B____u300D___u2220_)__uFF3F__">SRL\n    [&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;]</a></dt>\n  <dd></dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Load_Stuff"><a class="permalink" href="#Load_Stuff">Load\n  Stuff</a></h3>\n<dl class="Bl-inset Bl-compact">\n  <dt><a class="Sx" href="#LD_r8,r8">LD r8,r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_r8,n8">LD r8,n8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_r16,n16">LD r16,n16</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD____u043D___u2220_(___u141B____u300D___u2220_)__uFF3F__,r8">LD\n    [&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;],r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD____u043D___u2220_(___u141B____u300D___u2220_)__uFF3F__,n8">LD\n    [&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;],n8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_r8,___u043D___u2220_(___u141B____u300D___u2220_)__uFF3F__">LD\n    r8,[&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD__r16_,_&amp;(___u2022___u0300_A__u2022___u0301_)">LD\n    [r16],( &#x2022;&#x0300;A&#x2022;&#x0301;)</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD__n16_,_&amp;(___u2022___u0300_A__u2022___u0301_)">LD\n    [n16],( &#x2022;&#x0300;A&#x2022;&#x0301;)</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LDH__n16_,_&amp;(___u2022___u0300_A__u2022___u0301_)">LDH\n    [n16],( &#x2022;&#x0300;A&#x2022;&#x0301;)</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LDH____u2665_(__u02D8___u2323___u02D8__C)_,_&amp;(___u2022___u0300_A__u2022___u0301_)">LDH\n    [&#x2665;(&#x02D8;&#x2323;&#x02D8; C)],(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD__&amp;(___u2022___u0300_A__u2022___u0301_),_r16_">LD\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),[r16]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD__&amp;(___u2022___u0300_A__u2022___u0301_),_n16_">LD\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),[n16]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LDH__&amp;(___u2022___u0300_A__u2022___u0301_),_n16_">LDH\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),[n16]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LDH__&amp;(___u2022___u0300_A__u2022___u0301_),___u2665_(__u02D8___u2323___u02D8__C)_">LDH\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),[&#x2665;(&#x02D8;&#x2323;&#x02D8;\n    C)]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD____u043D___u2220_(___u141B____u300D___u2220_)__uFF3F___u1F441__,_&amp;(___u2022___u0300_A__u2022___u0301_)">LD\n    [&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;&#x1F441;],(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD____u043D___u2220_(___u141B____u300D___u2220_)__uFF3F___u1F44E__,_&amp;(___u2022___u0300_A__u2022___u0301_)">LD\n    [&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;&#x1F44E;],(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD__&amp;(___u2022___u0300_A__u2022___u0301_),___u043D___u2220_(___u141B____u300D___u2220_)__uFF3F___u1F441__">LD\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),[&#x043D;&#x2220;( &#x141B;\n    &#x300D;&#x2220;)&#xFF3F;&#x1F441;]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD__&amp;(___u2022___u0300_A__u2022___u0301_),___u043D___u2220_(___u141B____u300D___u2220_)__uFF3F___u1F44E__">LD\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),[&#x043D;&#x2220;( &#x141B;\n    &#x300D;&#x2220;)&#xFF3F;&#x1F44E;]</a></dt>\n  <dd></dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Jumps_and_Things"><a class="permalink" href="#Jumps_and_Things">Jumps\n  and Things</a></h3>\n<dl class="Bl-inset Bl-compact">\n  <dt><a class="Sx" href="#CALL_n16">CALL n16</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#CALL_cc,n16">CALL cc,n16</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#JP___u043D___u2220_(___u141B____u300D___u2220_)__uFF3F_">JP\n    &#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#JP_n16">JP n16</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#JP_cc,n16">JP cc,n16</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#JR_e8">JR e8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#JR_cc,e8">JR cc,e8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#RET_cc">RET cc</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#RET">RET</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#RETI">RETI</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#RST_vec">RST vec</a></dt>\n  <dd></dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Stack_Operations_Instwuctions_uwu"><a class="permalink" href="#Stack_Operations_Instwuctions_uwu">Stack\n  Operations Instwuctions uwu</a></h3>\n<dl class="Bl-inset Bl-compact">\n  <dt><a class="Sx" href="#ADD___u043D___u2220_(___u141B____u300D___u2220_)__uFF3F_,SP">ADD\n    &#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;,SP</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#ADD_SP,e8">ADD SP,e8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#DEC_SP">DEC SP</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#INC_SP">INC SP</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_SP,n16">LD SP,n16</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD__n16_,SP">LD [n16],SP</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD___u043D___u2220_(___u141B____u300D___u2220_)__uFF3F_,SP+e8">LD\n    &#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;,SP+e8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_SP,__u043D___u2220_(___u141B____u300D___u2220_)__uFF3F_">LD\n    SP,&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#POP__&amp;(___u2022___u0300_A__u2022___u0301_)__u1D4D5___u1D4FE___u1D4EC___u1D4F4_">POP\n    (\n    &#x2022;&#x0300;A&#x2022;&#x0301;)&#x1D4D5;&#x1D4FE;&#x1D4EC;&#x1D4F4;</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#POP_r16">POP r16</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#PUSH__&amp;(___u2022___u0300_A__u2022___u0301_)__u1D4D5___u1D4FE___u1D4EC___u1D4F4_">PUSH\n    (\n    &#x2022;&#x0300;A&#x2022;&#x0301;)&#x1D4D5;&#x1D4FE;&#x1D4EC;&#x1D4F4;</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#PUSH_r16">PUSH r16</a></dt>\n  <dd></dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Weird_Instructions??_O_o"><a class="permalink" href="#Weird_Instructions??_O_o">Weird\n  Instructions?? O_o</a></h3>\n<dl class="Bl-inset Bl-compact">\n  <dt><a class="Sx" href="#CCF">CCF</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#CPL">CPL</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#DAA">DAA</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#DI">DI</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#EI">EI</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#HALT__u270B_">HALT&#x270B;</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#NOPE">NOPE</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#OWO">OWO</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#SCF">SCF</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#STOP!!__u1F6D1_">STOP!!&#x1F6D1;</a></dt>\n  <dd></dd>\n</dl>\n</section>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="INSTRUCTION_REFERENCE"><a class="permalink" href="#INSTRUCTION_REFERENCE">INSTRUCTION\n  REFERENCE</a></h2>\n<section class="Ss">\n<h3 class="Ss">ADC ( &#x2022;&#x0300;A&#x2022;&#x0301;),r8</h3>\n<p class="Pp">Add <var class="Ar">r8</var>\'s value plus the carry flag to\n    <b class="Sy">( &#x2022;&#x0300;A&#x2022;&#x0301;)</b>.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~2"><a class="permalink" href="#Z~2"><b class="Sy">Z</b></a></dt>\n  <dd>Set if result is 0.</dd>\n  <dt id="N"><a class="permalink" href="#N"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H"><a class="permalink" href="#H"><b class="Sy">H</b></a></dt>\n  <dd>Set if overflow from bit 3.</dd>\n  <dt id="C~2"><a class="permalink" href="#C~2"><b class="Sy">C</b></a></dt>\n  <dd>Set if overflow from bit 7.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss">ADC ( &#x2022;&#x0300;A&#x2022;&#x0301;),[&#x043D;&#x2220;(\n  &#x141B; &#x300D;&#x2220;)&#xFF3F;]</h3>\n<p class="Pp">Add the byte at <b class="Sy">&#x043D;&#x2220;( &#x141B;\n    &#x300D;&#x2220;)&#xFF3F;</b> plus the carry flag to <b class="Sy">(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: See\n    <a class="Sx" href="#ADC__&amp;(___u2022___u0300_A__u2022___u0301_),r8">ADC\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss">ADC ( &#x2022;&#x0300;A&#x2022;&#x0301;),n8</h3>\n<p class="Pp">Add <var class="Ar">n8</var> plus the carry flag to\n    <b class="Sy">( &#x2022;&#x0300;A&#x2022;&#x0301;)</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See\n    <a class="Sx" href="#ADC__&amp;(___u2022___u0300_A__u2022___u0301_),r8">ADC\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss">ADD ( &#x2022;&#x0300;A&#x2022;&#x0301;),r8</h3>\n<p class="Pp">Add <var class="Ar">r8</var>\'s value to <b class="Sy">(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</b>.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~3"><a class="permalink" href="#Z~3"><b class="Sy">Z</b></a></dt>\n  <dd>Set if result is 0.</dd>\n  <dt id="N~2"><a class="permalink" href="#N~2"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~2"><a class="permalink" href="#H~2"><b class="Sy">H</b></a></dt>\n  <dd>Set if overflow from bit 3.</dd>\n  <dt id="C~3"><a class="permalink" href="#C~3"><b class="Sy">C</b></a></dt>\n  <dd>Set if overflow from bit 7.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss">ADD ( &#x2022;&#x0300;A&#x2022;&#x0301;),[&#x043D;&#x2220;(\n  &#x141B; &#x300D;&#x2220;)&#xFF3F;]</h3>\n<p class="Pp">Add the byte at <b class="Sy">&#x043D;&#x2220;( &#x141B;\n    &#x300D;&#x2220;)&#xFF3F;</b> to <b class="Sy">(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: See\n    <a class="Sx" href="#ADD__&amp;(___u2022___u0300_A__u2022___u0301_),r8">ADD\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss">ADD ( &#x2022;&#x0300;A&#x2022;&#x0301;),n8</h3>\n<p class="Pp">Add <var class="Ar">n8</var> to <b class="Sy">(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See\n    <a class="Sx" href="#ADD__&amp;(___u2022___u0300_A__u2022___u0301_),r8">ADD\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss">ADD &#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;,r16</h3>\n<p class="Pp">Add <var class="Ar">file ...</var>\'s value r16 to\n    <b class="Sy">&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="N~3"><a class="permalink" href="#N~3"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~3"><a class="permalink" href="#H~3"><b class="Sy">H</b></a></dt>\n  <dd>Set if overflow from bit 11.</dd>\n  <dt id="C~4"><a class="permalink" href="#C~4"><b class="Sy">C</b></a></dt>\n  <dd>Set if overflow from bit 15.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss">ADD &#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;,SP</h3>\n<p class="Pp">Add <b class="Sy">SP</b>\'s value to\n    <b class="Sy">&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: See\n    <a class="Sx" href="#ADD___u043D___u2220_(___u141B____u300D___u2220_)__uFF3F_,r16">ADD\n    &#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;,r16</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="ADD_SP,e8"><a class="permalink" href="#ADD_SP,e8">ADD\n  SP,e8</a></h3>\n<p class="Pp">Add the signed value <var class="Ar">e8</var> to\n    <b class="Sy">SP</b>.</p>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~4"><a class="permalink" href="#Z~4"><b class="Sy">Z</b></a></dt>\n  <dd>0</dd>\n  <dt id="N~4"><a class="permalink" href="#N~4"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~4"><a class="permalink" href="#H~4"><b class="Sy">H</b></a></dt>\n  <dd>Set if overflow from bit 3.</dd>\n  <dt id="C~5"><a class="permalink" href="#C~5"><b class="Sy">C</b></a></dt>\n  <dd>Set if overflow from bit 7.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss">AND ( &#x2022;&#x0300;A&#x2022;&#x0301;),r8</h3>\n<p class="Pp">Bitwise AND between <var class="Ar">r8</var>\'s value and\n    <b class="Sy">( &#x2022;&#x0300;A&#x2022;&#x0301;)</b>.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~5"><a class="permalink" href="#Z~5"><b class="Sy">Z</b></a></dt>\n  <dd>Set if result is 0.</dd>\n  <dt id="N~5"><a class="permalink" href="#N~5"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~5"><a class="permalink" href="#H~5"><b class="Sy">H</b></a></dt>\n  <dd>1</dd>\n  <dt id="C~6"><a class="permalink" href="#C~6"><b class="Sy">C</b></a></dt>\n  <dd>0</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss">AND ( &#x2022;&#x0300;A&#x2022;&#x0301;),[&#x043D;&#x2220;(\n  &#x141B; &#x300D;&#x2220;)&#xFF3F;]</h3>\n<p class="Pp">Bitwise AND between the byte at <b class="Sy">&#x043D;&#x2220;(\n    &#x141B; &#x300D;&#x2220;)&#xFF3F;</b> and <b class="Sy">(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: See\n    <a class="Sx" href="#AND__&amp;(___u2022___u0300_A__u2022___u0301_),r8">AND\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss">AND ( &#x2022;&#x0300;A&#x2022;&#x0301;),n8</h3>\n<p class="Pp">Bitwise AND between <var class="Ar">n8</var>\'s value and\n    <b class="Sy">( &#x2022;&#x0300;A&#x2022;&#x0301;)</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See\n    <a class="Sx" href="#AND__&amp;(___u2022___u0300_A__u2022___u0301_),r8">AND\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="BIT_u3,r8"><a class="permalink" href="#BIT_u3,r8">BIT\n  u3,r8</a></h3>\n<p class="Pp">Test bit <var class="Ar">u3</var> in register\n    <var class="Ar">r8</var>, set the zero flag if bit not set.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~6"><a class="permalink" href="#Z~6"><b class="Sy">Z</b></a></dt>\n  <dd>Set if the selected bit is 0.</dd>\n  <dt id="N~6"><a class="permalink" href="#N~6"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~6"><a class="permalink" href="#H~6"><b class="Sy">H</b></a></dt>\n  <dd>1</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="BIT_u3,_"><a class="permalink" href="#BIT_u3,_">BIT\n  u3,[&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;]</a></h3>\n<p class="Pp">Test bit <var class="Ar">u3</var> in the byte pointed by\n    <b class="Sy">&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;</b>, set\n    the zero flag if bit not set.</p>\n<p class="Pp">Cycles: 3</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See <a class="Sx" href="#BIT_u3,r8">BIT u3,r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="CALL_n16"><a class="permalink" href="#CALL_n16">CALL\n  n16</a></h3>\n<p class="Pp">Call address <var class="Ar">n16</var>. This pushes the address of\n    the instruction after the\n    <a class="permalink" href="#CALL"><b class="Sy" id="CALL">CALL</b></a> on\n    the stack, such that <a class="Sx" href="#RET">RET</a> can pop it later;\n    then, it executes an implicit <a class="Sx" href="#JP_n16">JP n16</a>.</p>\n<p class="Pp">Cycles: 6</p>\n<p class="Pp">Bytes: 3</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="CALL_cc,n16"><a class="permalink" href="#CALL_cc,n16">CALL\n  cc,n16</a></h3>\n<p class="Pp">Call address <var class="Ar">n16</var> if condition\n    <var class="Ar">cc</var> is met.</p>\n<p class="Pp">Cycles: 6 taken / 3 untaken</p>\n<p class="Pp">Bytes: 3</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="CCF"><a class="permalink" href="#CCF">CCF</a></h3>\n<p class="Pp">Complement Carry Flag.</p>\n<p class="Pp">Note: It appreciates the compliment ^w^</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="N~7"><a class="permalink" href="#N~7"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~7"><a class="permalink" href="#H~7"><b class="Sy">H</b></a></dt>\n  <dd>0</dd>\n  <dt id="C~7"><a class="permalink" href="#C~7"><b class="Sy">C</b></a></dt>\n  <dd>Inverted.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss">CP ( &#x2022;&#x0300;A&#x2022;&#x0301;),r8</h3>\n<p class="Pp">Subtract <var class="Ar">r8</var>\'s value from <b class="Sy">(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</b> and set flags accordingly, but don\'t\n    store the result. This is useful for ComParing values.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~7"><a class="permalink" href="#Z~7"><b class="Sy">Z</b></a></dt>\n  <dd>Set if result is 0.</dd>\n  <dt id="N~8"><a class="permalink" href="#N~8"><b class="Sy">N</b></a></dt>\n  <dd>1</dd>\n  <dt id="H~8"><a class="permalink" href="#H~8"><b class="Sy">H</b></a></dt>\n  <dd>Set if borrow from bit 4.</dd>\n  <dt id="C~8"><a class="permalink" href="#C~8"><b class="Sy">C</b></a></dt>\n  <dd>Set if borrow (i.e. if <var class="Ar">r8</var> &gt; <b class="Sy">(\n      &#x2022;&#x0300;A&#x2022;&#x0301;)</b>).</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss">CP ( &#x2022;&#x0300;A&#x2022;&#x0301;),[&#x043D;&#x2220;(\n  &#x141B; &#x300D;&#x2220;)&#xFF3F;]</h3>\n<p class="Pp">Subtract the byte at <b class="Sy">&#x043D;&#x2220;( &#x141B;\n    &#x300D;&#x2220;)&#xFF3F;</b> from <b class="Sy">(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</b> and set flags accordingly, but don\'t\n    store the result.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: See\n    <a class="Sx" href="#CP__&amp;(___u2022___u0300_A__u2022___u0301_),r8">CP (\n    &#x2022;&#x0300;A&#x2022;&#x0301;),r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss">CP ( &#x2022;&#x0300;A&#x2022;&#x0301;),n8</h3>\n<p class="Pp">Subtract the value <var class="Ar">n8</var> from <b class="Sy">(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</b> and set flags accordingly, but don\'t\n    store the result.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See\n    <a class="Sx" href="#CP__&amp;(___u2022___u0300_A__u2022___u0301_),r8">CP (\n    &#x2022;&#x0300;A&#x2022;&#x0301;),r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="CPL"><a class="permalink" href="#CPL">CPL</a></h3>\n<p class="Pp">ComPLement accumulator\n    (<a class="permalink" href="#A"><b class="Sy" id="A">A</b></a> =\n    <a class="permalink" href="#_"><b class="Sy" id="_">~(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</b></a>).</p>\n<p class="Pp">Note: This one doesn\'t appreciate the complement &gt;=T</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="N~9"><a class="permalink" href="#N~9"><b class="Sy">N</b></a></dt>\n  <dd>1</dd>\n  <dt id="H~9"><a class="permalink" href="#H~9"><b class="Sy">H</b></a></dt>\n  <dd>1</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="DAA"><a class="permalink" href="#DAA">DAA</a></h3>\n<p class="Pp">Decimal Adjust Accumulator to get a correct BCD representation\n    after an arithmetic instruction. (Wha???)</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~8"><a class="permalink" href="#Z~8"><b class="Sy">Z</b></a></dt>\n  <dd>Set if result is 0.</dd>\n  <dt id="H~10"><a class="permalink" href="#H~10"><b class="Sy">H</b></a></dt>\n  <dd>0</dd>\n  <dt id="C~9"><a class="permalink" href="#C~9"><b class="Sy">C</b></a></dt>\n  <dd>Set or reset depending on the operation.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="DEC_r8"><a class="permalink" href="#DEC_r8">DEC r8</a></h3>\n<p class="Pp">Decrement value in register <var class="Ar">r8</var> by 1.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~9"><a class="permalink" href="#Z~9"><b class="Sy">Z</b></a></dt>\n  <dd>Set if result is 0.</dd>\n  <dt id="N~10"><a class="permalink" href="#N~10"><b class="Sy">N</b></a></dt>\n  <dd>1</dd>\n  <dt id="H~11"><a class="permalink" href="#H~11"><b class="Sy">H</b></a></dt>\n  <dd>Set if borrow from bit 4.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="DEC__"><a class="permalink" href="#DEC__">DEC\n  [&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;]</a></h3>\n<p class="Pp">Decrement the byte at <b class="Sy">&#x043D;&#x2220;( &#x141B;\n    &#x300D;&#x2220;)&#xFF3F;</b> by 1.</p>\n<p class="Pp">Cycles: 3</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: See <a class="Sx" href="#DEC_r8">DEC r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="DEC_r16"><a class="permalink" href="#DEC_r16">DEC\n  r16</a></h3>\n<p class="Pp">Decrement value in register <var class="Ar">r16</var> by 1.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="DEC_SP"><a class="permalink" href="#DEC_SP">DEC SP</a></h3>\n<p class="Pp">Decrement value in register <b class="Sy">SP</b> by 1.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="DI"><a class="permalink" href="#DI">DI</a></h3>\n<p class="Pp">Disable Interrupts by clearing the <b class="Sy">IME</b> flag.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="EI"><a class="permalink" href="#EI">EI</a></h3>\n<p class="Pp">Enable Interrupts by setting the <b class="Sy">IME</b> flag. The\n    flag is only set <i class="Em">after</i> the instruction following\n    <b class="Sy">EI</b>.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="HALT"><a class="permalink" href="#HALT">HALT&#x270B;</a></h3>\n<p class="Pp">Enter CPU low-power consumption mode until an interrupt occurs.\n    The exact behavior of this instruction depends on the state of the\n    <b class="Sy">IME</b> flag.</p>\n<dl class="Bl-tag">\n  <dt id="IME"><a class="permalink" href="#IME"><b class="Sy">IME</b></a>\n    <span class="No">set</span></dt>\n  <dd>The CPU enters low-power mode until <i class="Em">after</i> an interrupt\n      is about to be serviced. The handler is executed normally, and the CPU\n      resumes execution after the <code class="Ic">HALT&#x270B;</code> when that\n      returns.</dd>\n  <dt id="IME~2"><a class="permalink" href="#IME~2"><b class="Sy">IME</b></a>\n    <span class="No">not set</span></dt>\n  <dd>The behavior depends on whether an interrupt is pending (i.e.\n      &#x2018;<code class="Li">[IE] &amp; [IF]</code>&#x2019; is non-zero).\n    <dl class="Bl-tag">\n      <dt id="not">None pending</dt>\n      <dd>As soon as an interrupt becomes pending, the CPU resumes execution.\n          This is like the above, except that the handler is\n          <a class="permalink" href="#not"><i class="Em">not</i></a>\n        called.</dd>\n      <dt>Some pending</dt>\n      <dd>The CPU continues execution after the\n          <code class="Ic">HALT&#x270B;</code>, but the byte after it is read\n          twice in a row (<b class="Sy">PC</b> is not incremented, due to a\n          hardware bug).</dd>\n    </dl>\n  </dd>\n</dl>\n<p class="Pp">Cycles: -</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="INC_r8"><a class="permalink" href="#INC_r8">INC r8</a></h3>\n<p class="Pp">Increment value in register <var class="Ar">r8</var> by 1.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~10"><a class="permalink" href="#Z~10"><b class="Sy">Z</b></a></dt>\n  <dd>Set if result is 0.</dd>\n  <dt id="N~11"><a class="permalink" href="#N~11"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~12"><a class="permalink" href="#H~12"><b class="Sy">H</b></a></dt>\n  <dd>Set if overflow from bit 3.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="INC__"><a class="permalink" href="#INC__">INC\n  [&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;]</a></h3>\n<p class="Pp">Increment the byte at <b class="Sy">&#x043D;&#x2220;( &#x141B;\n    &#x300D;&#x2220;)&#xFF3F;</b> by 1.</p>\n<p class="Pp">Cycles: 3</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: See <a class="Sx" href="#INC_r8">INC r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="INC_r16"><a class="permalink" href="#INC_r16">INC\n  r16</a></h3>\n<p class="Pp">Increment value in register <var class="Ar">r16</var> by 1.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="INC_SP"><a class="permalink" href="#INC_SP">INC SP</a></h3>\n<p class="Pp">Increment value in register <b class="Sy">SP</b> by 1.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="JP_n16"><a class="permalink" href="#JP_n16">JP n16</a></h3>\n<p class="Pp">Jump to address <var class="Ar">n16</var>; effectively, store\n    <var class="Ar">n16</var> into <b class="Sy">PC</b>.</p>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 3</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="JP_cc,n16"><a class="permalink" href="#JP_cc,n16">JP\n  cc,n16</a></h3>\n<p class="Pp">Jump to address <var class="Ar">n16</var> if condition\n    <var class="Ar">cc</var> is met.</p>\n<p class="Pp">Cycles: 4 taken / 3 untaken</p>\n<p class="Pp">Bytes: 3</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="JP_"><a class="permalink" href="#JP_">JP &#x043D;&#x2220;(\n  &#x141B; &#x300D;&#x2220;)&#xFF3F;</a></h3>\n<p class="Pp">Jump to address in <b class="Sy">&#x043D;&#x2220;( &#x141B;\n    &#x300D;&#x2220;)&#xFF3F;</b>; effectively, load <b class="Sy">PC</b> with\n    value in register <b class="Sy">&#x043D;&#x2220;( &#x141B;\n    &#x300D;&#x2220;)&#xFF3F;</b>.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="JR_e8"><a class="permalink" href="#JR_e8">JR e8</a></h3>\n<p class="Pp">Relative Jump by adding <var class="Ar">e8</var> to the address of\n    the instruction following the\n    <a class="permalink" href="#JR"><b class="Sy" id="JR">JR</b></a>. To\n    clarify, an operand of 0 is equivalent to no jumping.</p>\n<p class="Pp">Cycles: 3</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="JR_cc,e8"><a class="permalink" href="#JR_cc,e8">JR\n  cc,e8</a></h3>\n<p class="Pp">Relative Jump by adding <var class="Ar">e8</var> to the current\n    address if condition <var class="Ar">cc</var> is met.</p>\n<p class="Pp">Cycles: 3 taken / 2 untaken</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_r8,r8"><a class="permalink" href="#LD_r8,r8">LD\n  r8,r8</a></h3>\n<p class="Pp">Load (copy) value in register on the right into register on the\n    left.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_r8,n8"><a class="permalink" href="#LD_r8,n8">LD\n  r8,n8</a></h3>\n<p class="Pp">Load value <var class="Ar">n8</var> into register\n    <var class="Ar">r8</var>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_r16,n16"><a class="permalink" href="#LD_r16,n16">LD\n  r16,n16</a></h3>\n<p class="Pp">Load value <var class="Ar">n16</var> into register\n    <var class="Ar">r16</var>.</p>\n<p class="Pp">Cycles: 3</p>\n<p class="Pp">Bytes: 3</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss">LD [&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;],r8</h3>\n<p class="Pp">Store value in register <var class="Ar">r8</var> into the byte\n    pointed to by register <b class="Sy">&#x043D;&#x2220;( &#x141B;\n    &#x300D;&#x2220;)&#xFF3F;</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss">LD [&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;],n8</h3>\n<p class="Pp">Store value <var class="Ar">n8</var> into the byte pointed to by\n    register <b class="Sy">&#x043D;&#x2220;( &#x141B;\n    &#x300D;&#x2220;)&#xFF3F;</b>.</p>\n<p class="Pp">Cycles: 3</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_r8,_"><a class="permalink" href="#LD_r8,_">LD\n  r8,[&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;]</a></h3>\n<p class="Pp">Load value into register <var class="Ar">r8</var> from the byte\n    pointed to by register <b class="Sy">&#x043D;&#x2220;( &#x141B;\n    &#x300D;&#x2220;)&#xFF3F;</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD__r16_,"><a class="permalink" href="#LD__r16_,">LD [r16],(\n  &#x2022;&#x0300;A&#x2022;&#x0301;)</a></h3>\n<p class="Pp">Store value in register <b class="Sy">(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</b> into the byte pointed to by register\n    <var class="Ar">r16</var>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD__n16_,"><a class="permalink" href="#LD__n16_,">LD [n16],(\n  &#x2022;&#x0300;A&#x2022;&#x0301;)</a></h3>\n<p class="Pp">Store value in register <b class="Sy">(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</b> into the byte at address\n    <var class="Ar">n16</var>.</p>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 3</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LDH__n16_,"><a class="permalink" href="#LDH__n16_,">LDH\n  [n16],( &#x2022;&#x0300;A&#x2022;&#x0301;)</a></h3>\n<p class="Pp">Store value in register <b class="Sy">(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</b> into the byte at address\n    <var class="Ar">n16</var>, provided the address is between\n    <span class="Ad">$FF00</span> and <span class="Ad">$FFFF</span>.</p>\n<p class="Pp">Cycles: 3</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: None affected.</p>\n<p class="Pp">This is sometimes written as &#x2018;<code class="Li">LDIO [n16],(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</code>&#x2019;, or\n    &#x2018;<code class="Li">LD [$FF00+n8],(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</code>&#x2019;.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LDH__"><a class="permalink" href="#LDH__">LDH\n  [&#x2665;(&#x02D8;&#x2323;&#x02D8; C)],(\n  &#x2022;&#x0300;A&#x2022;&#x0301;)</a></h3>\n<p class="Pp">Store value in register <b class="Sy">(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</b> into the byte at address\n    <span class="Ad">$FF00+&#x2665;(&#x02D8;&#x2323;&#x02D8; C)</span>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n<p class="Pp">This is sometimes written as &#x2018;<code class="Li">LDIO\n    [&#x2665;(&#x02D8;&#x2323;&#x02D8; C)],(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</code>&#x2019;, or\n    &#x2018;<code class="Li">LD [$FF00+&#x2665;(&#x02D8;&#x2323;&#x02D8; C)],(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</code>&#x2019;.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss">LD ( &#x2022;&#x0300;A&#x2022;&#x0301;),[r16]</h3>\n<p class="Pp">Load value in register <b class="Sy">(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</b> from the byte pointed to by register\n    <var class="Ar">r16</var>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss">LD ( &#x2022;&#x0300;A&#x2022;&#x0301;),[n16]</h3>\n<p class="Pp">Load value in register <b class="Sy">(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</b> from the byte at address\n    <var class="Ar">n16</var>.</p>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 3</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss">LDH ( &#x2022;&#x0300;A&#x2022;&#x0301;),[n16]</h3>\n<p class="Pp">Load value in register <b class="Sy">(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</b> from the byte at address\n    <var class="Ar">n16</var>, provided the address is between\n    <span class="Ad">$FF00</span> and <span class="Ad">$FFFF</span>.</p>\n<p class="Pp">Cycles: 3</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: None affected.</p>\n<p class="Pp">This is sometimes written as &#x2018;<code class="Li">LDIO (\n    &#x2022;&#x0300;A&#x2022;&#x0301;),[n16]</code>&#x2019;, or\n    &#x2018;<code class="Li">LD (\n    &#x2022;&#x0300;A&#x2022;&#x0301;),[$FF00+n8]</code>&#x2019;.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss">LDH (\n  &#x2022;&#x0300;A&#x2022;&#x0301;),[&#x2665;(&#x02D8;&#x2323;&#x02D8; C)]</h3>\n<p class="Pp">Load value in register <b class="Sy">(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</b> from the byte at address\n    <span class="Ad">$FF00+c</span>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n<p class="Pp">This is sometimes written as &#x2018;<code class="Li">LDIO (\n    &#x2022;&#x0300;A&#x2022;&#x0301;),[&#x2665;(&#x02D8;&#x2323;&#x02D8;\n    C)]</code>&#x2019;, or &#x2018;<code class="Li">LD (\n    &#x2022;&#x0300;A&#x2022;&#x0301;),[$FF00+&#x2665;(&#x02D8;&#x2323;&#x02D8;\n    C)]</code>&#x2019;.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss">LD [&#x043D;&#x2220;( &#x141B;\n  &#x300D;&#x2220;)&#xFF3F;&#x1F441;],( &#x2022;&#x0300;A&#x2022;&#x0301;)</h3>\n<p class="Pp">Store value in register <b class="Sy">(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</b> into the byte pointed by\n    <b class="Sy">&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;</b> and\n    increment <b class="Sy">&#x043D;&#x2220;( &#x141B;\n    &#x300D;&#x2220;)&#xFF3F;</b> afterwards.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n<p class="Pp">This is sometimes written as &#x2018;<code class="Li">LD\n    [&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;+],(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</code>&#x2019;, or\n    &#x2018;<code class="Li">LDI [&#x043D;&#x2220;( &#x141B;\n    &#x300D;&#x2220;)&#xFF3F;],(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</code>&#x2019;.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss">LD [&#x043D;&#x2220;( &#x141B;\n  &#x300D;&#x2220;)&#xFF3F;&#x1F44E;],( &#x2022;&#x0300;A&#x2022;&#x0301;)</h3>\n<p class="Pp">Store value in register <b class="Sy">(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</b> into the byte pointed by\n    <b class="Sy">&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;</b> and\n    decrement <b class="Sy">&#x043D;&#x2220;( &#x141B;\n    &#x300D;&#x2220;)&#xFF3F;</b> afterwards.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n<p class="Pp">This is sometimes written as &#x2018;<code class="Li">LD\n    [&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;-],(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</code>&#x2019;, or\n    &#x2018;<code class="Li">LDD [&#x043D;&#x2220;( &#x141B;\n    &#x300D;&#x2220;)&#xFF3F;],(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</code>&#x2019;.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss">LD ( &#x2022;&#x0300;A&#x2022;&#x0301;),[&#x043D;&#x2220;(\n  &#x141B; &#x300D;&#x2220;)&#xFF3F;&#x1F44E;]</h3>\n<p class="Pp">Load value into register <b class="Sy">(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</b> from the byte pointed by\n    <b class="Sy">&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;</b> and\n    decrement <b class="Sy">&#x043D;&#x2220;( &#x141B;\n    &#x300D;&#x2220;)&#xFF3F;</b> afterwards.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n<p class="Pp">This is sometimes written as &#x2018;<code class="Li">LD (\n    &#x2022;&#x0300;A&#x2022;&#x0301;),[&#x043D;&#x2220;( &#x141B;\n    &#x300D;&#x2220;)&#xFF3F;-]</code>&#x2019;, or &#x2018;<code class="Li">LDD\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),[&#x043D;&#x2220;( &#x141B;\n    &#x300D;&#x2220;)&#xFF3F;]</code>&#x2019;.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss">LD ( &#x2022;&#x0300;A&#x2022;&#x0301;),[&#x043D;&#x2220;(\n  &#x141B; &#x300D;&#x2220;)&#xFF3F;&#x1F441;]</h3>\n<p class="Pp">Load value into register <b class="Sy">(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</b> from the byte pointed by\n    <b class="Sy">&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;</b> and\n    increment <b class="Sy">&#x043D;&#x2220;( &#x141B;\n    &#x300D;&#x2220;)&#xFF3F;</b> afterwards.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n<p class="Pp">This is sometimes written as &#x2018;<code class="Li">LD (\n    &#x2022;&#x0300;A&#x2022;&#x0301;),[&#x043D;&#x2220;( &#x141B;\n    &#x300D;&#x2220;)&#xFF3F;+]</code>&#x2019;, or &#x2018;<code class="Li">LDI\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),[&#x043D;&#x2220;( &#x141B;\n    &#x300D;&#x2220;)&#xFF3F;]</code>&#x2019;.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_SP,n16"><a class="permalink" href="#LD_SP,n16">LD\n  SP,n16</a></h3>\n<p class="Pp">Load value <var class="Ar">n16</var> into register\n    <b class="Sy">SP</b>.</p>\n<p class="Pp">Cycles: 3</p>\n<p class="Pp">Bytes: 3</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD__n16_,SP"><a class="permalink" href="#LD__n16_,SP">LD\n  [n16],SP</a></h3>\n<p class="Pp">Store <b class="Sy">SP &amp; $FF</b> at address\n    <var class="Ar">n16</var> and <b class="Sy">SP &gt;&gt; 8</b> at address\n    <var class="Ar">n16</var> + 1.</p>\n<p class="Pp">Cycles: 5</p>\n<p class="Pp">Bytes: 3</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss">LD &#x043D;&#x2220;( &#x141B;\n  &#x300D;&#x2220;)&#xFF3F;,SP+e8</h3>\n<p class="Pp">Add the signed value <var class="Ar">e8</var> to\n    <b class="Sy">SP</b> and store the result in <b class="Sy">&#x043D;&#x2220;(\n    &#x141B; &#x300D;&#x2220;)&#xFF3F;</b>.</p>\n<p class="Pp">Cycles: 3</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~11"><a class="permalink" href="#Z~11"><b class="Sy">Z</b></a></dt>\n  <dd>0</dd>\n  <dt id="N~12"><a class="permalink" href="#N~12"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~13"><a class="permalink" href="#H~13"><b class="Sy">H</b></a></dt>\n  <dd>Set if overflow from bit 3.</dd>\n  <dt id="C~10"><a class="permalink" href="#C~10"><b class="Sy">C</b></a></dt>\n  <dd>Set if overflow from bit 7.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_SP,"><a class="permalink" href="#LD_SP,">LD\n  SP,&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;</a></h3>\n<p class="Pp">Load register <b class="Sy">&#x043D;&#x2220;( &#x141B;\n    &#x300D;&#x2220;)&#xFF3F;</b> into register <b class="Sy">SP</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="NOPE"><a class="permalink" href="#NOPE">NOPE</a></h3>\n<p class="Pp">No OPEration.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss">OR ( &#x2022;&#x0300;A&#x2022;&#x0301;),r8</h3>\n<p class="Pp">Store into <b class="Sy">( &#x2022;&#x0300;A&#x2022;&#x0301;)</b>\n    the bitwise OR of <var class="Ar">r8</var>\'s value and <b class="Sy">(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</b>.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~12"><a class="permalink" href="#Z~12"><b class="Sy">Z</b></a></dt>\n  <dd>Set if result is 0.</dd>\n  <dt id="N~13"><a class="permalink" href="#N~13"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~14"><a class="permalink" href="#H~14"><b class="Sy">H</b></a></dt>\n  <dd>0</dd>\n  <dt id="C~11"><a class="permalink" href="#C~11"><b class="Sy">C</b></a></dt>\n  <dd>0</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss">OR ( &#x2022;&#x0300;A&#x2022;&#x0301;),[&#x043D;&#x2220;(\n  &#x141B; &#x300D;&#x2220;)&#xFF3F;]</h3>\n<p class="Pp">Store into <b class="Sy">( &#x2022;&#x0300;A&#x2022;&#x0301;)</b>\n    the bitwise OR of the byte at <b class="Sy">&#x043D;&#x2220;( &#x141B;\n    &#x300D;&#x2220;)&#xFF3F;</b> and <b class="Sy">(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: See\n    <a class="Sx" href="#OR__&amp;(___u2022___u0300_A__u2022___u0301_),r8">OR (\n    &#x2022;&#x0300;A&#x2022;&#x0301;),r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss">OR ( &#x2022;&#x0300;A&#x2022;&#x0301;),n8</h3>\n<p class="Pp">Store into <b class="Sy">( &#x2022;&#x0300;A&#x2022;&#x0301;)</b>\n    the bitwise OR of <var class="Ar">n8</var> and <b class="Sy">(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See\n    <a class="Sx" href="#OR__&amp;(___u2022___u0300_A__u2022___u0301_),r8">OR (\n    &#x2022;&#x0300;A&#x2022;&#x0301;),r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="OWO"><a class="permalink" href="#OWO">OWO</a></h3>\n<p class="Pp">Load\n    <a class="permalink" href="#bulge"><i class="Em" id="bulge">bulge</i></a>\n    into register\n    <a class="permalink" href="#*notice*"><b class="Sy" id="*notice*">*notice*</b></a>.</p>\n<p class="Pp">Cycles: 0.25</p>\n<p class="Pp" id="*eyes">Bytes:\n    <a class="permalink" href="#*eyes"><i class="Em">*eyes widen in\n    surprise*</i></a> r-rgbds! what are you doing?! &lt;///&lt;\n    <a class="permalink" href="#*starts"><i class="Em" id="*starts">*starts to\n    blush*</i></a> xD</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt><b class="Sy">&#x1F3F4;&#x200D;&#x2620;&#xFE0F;</b></dt>\n  <dd>Pirate</dd>\n  <dt><b class="Sy">&#x1F3C1;</b></dt>\n  <dd>Checkered</dd>\n  <dt><b class="Sy">&#x1F1EB;&#x1F1F7;</b></dt>\n  <dd>France</dd>\n  <dt><b class="Sy">&#x1F3F4;&#xE0067;&#xE0062;&#xE0077;&#xE006C;&#xE0073;&#xE007F;</b></dt>\n  <dd>Dragon</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="POP_"><a class="permalink" href="#POP_">POP (\n  &#x2022;&#x0300;A&#x2022;&#x0301;)&#x1D4D5;&#x1D4FE;&#x1D4EC;&#x1D4F4;</a></h3>\n<p class="Pp">Pop register <b class="Sy">(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)&#x1D4D5;&#x1D4FE;&#x1D4EC;&#x1D4F4;</b>\n    from the stack. This is roughly equivalent to the following\n    <i class="Em">&#x2728;CUTE&#x2728;</i> instructions:</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>ld f, [sp] ; See below for individual flags\ninc sp\nld a, [sp]\ninc sp</pre>\n</div>\n<p class="Pp">Cycles: 3</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~13"><a class="permalink" href="#Z~13"><b class="Sy">Z</b></a></dt>\n  <dd>Set from bit 7 of the popped low byte.</dd>\n  <dt id="N~14"><a class="permalink" href="#N~14"><b class="Sy">N</b></a></dt>\n  <dd>Set from bit 6 of the popped low byte.</dd>\n  <dt id="H~15"><a class="permalink" href="#H~15"><b class="Sy">H</b></a></dt>\n  <dd>Set from bit 5 of the popped low byte.</dd>\n  <dt id="C~12"><a class="permalink" href="#C~12"><b class="Sy">C</b></a></dt>\n  <dd>Set from bit 4 of the popped low byte.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="POP_r16"><a class="permalink" href="#POP_r16">POP\n  r16</a></h3>\n<p class="Pp">Pop register <var class="Ar">r16</var> from the stack. This is\n    roughly equivalent to the following <i class="Em">&#x2728;CUTE&#x2728;</i>\n    instructions:</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>ld LOW(r16), [sp] ; &#x2665;(&#x02D8;&#x2323;&#x02D8; C), (&#x00B4;&#x03B5;&#xFF40; )&#x2661; or &#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;\ninc sp\nld HIGH(r16), [sp] ; =B, ;D or &#x043D;\ninc sp</pre>\n</div>\n<p class="Pp">Cycles: 3</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="PUSH_"><a class="permalink" href="#PUSH_">PUSH (\n  &#x2022;&#x0300;A&#x2022;&#x0301;)&#x1D4D5;&#x1D4FE;&#x1D4EC;&#x1D4F4;</a></h3>\n<p class="Pp">Push register <b class="Sy">(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)&#x1D4D5;&#x1D4FE;&#x1D4EC;&#x1D4F4;</b>\n    into the stack. This is roughly equivalent to the following\n    <i class="Em">&#x2728;CUTE&#x2728;</i> instructions:</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>dec sp\nld [sp], a\ndec sp\nld [sp], flag_Z &lt;&lt; 7 | flag_N &lt;&lt; 6 | flag_H &lt;&lt; 5 | flag_C &lt;&lt; 4</pre>\n</div>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="PUSH_r16"><a class="permalink" href="#PUSH_r16">PUSH\n  r16</a></h3>\n<p class="Pp">Push register <var class="Ar">r16</var> into the stack. This is\n    roughly equivalent to the following <i class="Em">&#x2728;CUTE&#x2728;</i>\n    instructions:</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>dec sp\nld [sp], HIGH(r16) ; =B, ;D or &#x043D;\ndec sp\nld [sp], LOW(r16) ; &#x2665;(&#x02D8;&#x2323;&#x02D8; C), (&#x00B4;&#x03B5;&#xFF40; )&#x2661; or &#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;</pre>\n</div>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="RES_u3,r8"><a class="permalink" href="#RES_u3,r8">RES\n  u3,r8</a></h3>\n<p class="Pp">Set bit <var class="Ar">u3</var> in register\n    <var class="Ar">r8</var> to 0. Bit 0 is the rightmost one, bit 7 the\n    leftmost one.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="RES_u3,_"><a class="permalink" href="#RES_u3,_">RES\n  u3,[&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;]</a></h3>\n<p class="Pp">Set bit <var class="Ar">u3</var> in the byte pointed by\n    <b class="Sy">&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;</b> to 0.\n    Bit 0 is the rightmost one, bit 7 the leftmost one.</p>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="RET"><a class="permalink" href="#RET">RET</a></h3>\n<p class="Pp">Return from subroutine. This is basically a <b class="Sy">POP\n    PC</b> (if such an instruction existed). See\n    <a class="Sx" href="#POP_r16">POP r16</a> for an explanation of how\n    <b class="Sy">POP</b> works.</p>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="RET_cc"><a class="permalink" href="#RET_cc">RET cc</a></h3>\n<p class="Pp">Return from subroutine if condition <var class="Ar">cc</var> is\n    met.</p>\n<p class="Pp">Cycles: 5 taken / 2 untaken</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="RETI"><a class="permalink" href="#RETI">RETI</a></h3>\n<p class="Pp">Return from subroutine and enable interrupts. This is basically\n    equivalent to executing <a class="Sx" href="#EI">EI</a> then\n    <a class="Sx" href="#RET">RET</a>, meaning that <b class="Sy">IME</b> is set\n    right after this instruction.</p>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="RL_r8"><a class="permalink" href="#RL_r8">RL r8</a></h3>\n<p class="Pp">Rotate bits in register <var class="Ar">r8</var> left through\n    carry.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">C &lt;- [7 &lt;- 0] &lt;- C</div>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~14"><a class="permalink" href="#Z~14"><b class="Sy">Z</b></a></dt>\n  <dd>Set if result is 0.</dd>\n  <dt id="N~15"><a class="permalink" href="#N~15"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~16"><a class="permalink" href="#H~16"><b class="Sy">H</b></a></dt>\n  <dd>0</dd>\n  <dt id="C~13"><a class="permalink" href="#C~13"><b class="Sy">C</b></a></dt>\n  <dd>Set according to result.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="RL__"><a class="permalink" href="#RL__">RL [&#x043D;&#x2220;(\n  &#x141B; &#x300D;&#x2220;)&#xFF3F;]</a></h3>\n<p class="Pp">Rotate the byte at <b class="Sy">&#x043D;&#x2220;( &#x141B;\n    &#x300D;&#x2220;)&#xFF3F;</b> left through carry.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">C &lt;- [7 &lt;- 0] &lt;- C</div>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See <a class="Sx" href="#RL_r8">RL r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="RLA"><a class="permalink" href="#RLA">RLA</a></h3>\n<p class="Pp">Rotate register <b class="Sy">(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</b> left through carry.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">C &lt;- [7 &lt;- 0] &lt;- C</div>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~15"><a class="permalink" href="#Z~15"><b class="Sy">Z</b></a></dt>\n  <dd>0</dd>\n  <dt id="N~16"><a class="permalink" href="#N~16"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~17"><a class="permalink" href="#H~17"><b class="Sy">H</b></a></dt>\n  <dd>0</dd>\n  <dt id="C~14"><a class="permalink" href="#C~14"><b class="Sy">C</b></a></dt>\n  <dd>Set according to result.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="RLC_r8"><a class="permalink" href="#RLC_r8">RLC r8</a></h3>\n<p class="Pp">Rotate register <var class="Ar">r8</var> left.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">C &lt;- [7 &lt;- 0] &lt;- [7]</div>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~16"><a class="permalink" href="#Z~16"><b class="Sy">Z</b></a></dt>\n  <dd>Set if result is 0.</dd>\n  <dt id="N~17"><a class="permalink" href="#N~17"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~18"><a class="permalink" href="#H~18"><b class="Sy">H</b></a></dt>\n  <dd>0</dd>\n  <dt id="C~15"><a class="permalink" href="#C~15"><b class="Sy">C</b></a></dt>\n  <dd>Set according to result.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="RLC__"><a class="permalink" href="#RLC__">RLC\n  [&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;]</a></h3>\n<p class="Pp">Rotate the byte at <b class="Sy">&#x043D;&#x2220;( &#x141B;\n    &#x300D;&#x2220;)&#xFF3F;</b> left.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">C &lt;- [7 &lt;- 0] &lt;- [7]</div>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See <a class="Sx" href="#RLC_r8">RLC r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="RLCA"><a class="permalink" href="#RLCA">RLCA</a></h3>\n<p class="Pp">Rotate register <b class="Sy">(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</b> left.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">C &lt;- [7 &lt;- 0] &lt;- [7]</div>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~17"><a class="permalink" href="#Z~17"><b class="Sy">Z</b></a></dt>\n  <dd>0</dd>\n  <dt id="N~18"><a class="permalink" href="#N~18"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~19"><a class="permalink" href="#H~19"><b class="Sy">H</b></a></dt>\n  <dd>0</dd>\n  <dt id="C~16"><a class="permalink" href="#C~16"><b class="Sy">C</b></a></dt>\n  <dd>Set according to result.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="RR_r8"><a class="permalink" href="#RR_r8">RR r8</a></h3>\n<p class="Pp">Rotate register <var class="Ar">r8</var> right through carry.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">C -&gt; [7 -&gt; 0] -&gt; C</div>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~18"><a class="permalink" href="#Z~18"><b class="Sy">Z</b></a></dt>\n  <dd>Set if result is 0.</dd>\n  <dt id="N~19"><a class="permalink" href="#N~19"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~20"><a class="permalink" href="#H~20"><b class="Sy">H</b></a></dt>\n  <dd>0</dd>\n  <dt id="C~17"><a class="permalink" href="#C~17"><b class="Sy">C</b></a></dt>\n  <dd>Set according to result.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="RR__"><a class="permalink" href="#RR__">RR [&#x043D;&#x2220;(\n  &#x141B; &#x300D;&#x2220;)&#xFF3F;]</a></h3>\n<p class="Pp">Rotate the byte at <b class="Sy">&#x043D;&#x2220;( &#x141B;\n    &#x300D;&#x2220;)&#xFF3F;</b> right through carry.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">C -&gt; [7 -&gt; 0] -&gt; C</div>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See <a class="Sx" href="#RR_r8">RR r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="RRA"><a class="permalink" href="#RRA">RRA</a></h3>\n<p class="Pp">Rotate register <b class="Sy">(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</b> right through carry.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">C -&gt; [7 -&gt; 0] -&gt; C</div>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~19"><a class="permalink" href="#Z~19"><b class="Sy">Z</b></a></dt>\n  <dd>0</dd>\n  <dt id="N~20"><a class="permalink" href="#N~20"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~21"><a class="permalink" href="#H~21"><b class="Sy">H</b></a></dt>\n  <dd>0</dd>\n  <dt id="C~18"><a class="permalink" href="#C~18"><b class="Sy">C</b></a></dt>\n  <dd>Set according to result.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="RRC_r8"><a class="permalink" href="#RRC_r8">RRC r8</a></h3>\n<p class="Pp">Rotate register <var class="Ar">r8</var> right.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">[0] -&gt; [7 -&gt; 0] -&gt; C</div>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~20"><a class="permalink" href="#Z~20"><b class="Sy">Z</b></a></dt>\n  <dd>Set if result is 0.</dd>\n  <dt id="N~21"><a class="permalink" href="#N~21"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~22"><a class="permalink" href="#H~22"><b class="Sy">H</b></a></dt>\n  <dd>0</dd>\n  <dt id="C~19"><a class="permalink" href="#C~19"><b class="Sy">C</b></a></dt>\n  <dd>Set according to result.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="RRC__"><a class="permalink" href="#RRC__">RRC\n  [&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;]</a></h3>\n<p class="Pp">Rotate the byte at <b class="Sy">&#x043D;&#x2220;( &#x141B;\n    &#x300D;&#x2220;)&#xFF3F;</b> right.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">[0] -&gt; [7 -&gt; 0] -&gt; C</div>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See <a class="Sx" href="#RRC_r8">RRC r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="RRCA"><a class="permalink" href="#RRCA">RRCA</a></h3>\n<p class="Pp">Rotate register <b class="Sy">(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</b> right.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">[0] -&gt; [7 -&gt; 0] -&gt; C</div>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~21"><a class="permalink" href="#Z~21"><b class="Sy">Z</b></a></dt>\n  <dd>0</dd>\n  <dt id="N~22"><a class="permalink" href="#N~22"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~23"><a class="permalink" href="#H~23"><b class="Sy">H</b></a></dt>\n  <dd>0</dd>\n  <dt id="C~20"><a class="permalink" href="#C~20"><b class="Sy">C</b></a></dt>\n  <dd>Set according to result.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="RST_vec"><a class="permalink" href="#RST_vec">RST\n  vec</a></h3>\n<p class="Pp">Call address <var class="Ar">vec</var>. This is a shorter and\n    faster equivalent to <a class="Sx" href="#CALL">CALL</a> for suitable values\n    of <var class="Ar">vec</var>.</p>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss">SBC ( &#x2022;&#x0300;A&#x2022;&#x0301;),r8</h3>\n<p class="Pp">Subtract <var class="Ar">r8</var>\'s value and the carry flag from\n    <b class="Sy">( &#x2022;&#x0300;A&#x2022;&#x0301;)</b>.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~22"><a class="permalink" href="#Z~22"><b class="Sy">Z</b></a></dt>\n  <dd>Set if result is 0.</dd>\n  <dt id="N~23"><a class="permalink" href="#N~23"><b class="Sy">N</b></a></dt>\n  <dd>1</dd>\n  <dt id="H~24"><a class="permalink" href="#H~24"><b class="Sy">H</b></a></dt>\n  <dd>Set if borrow from bit 4.</dd>\n  <dt id="C~21"><a class="permalink" href="#C~21"><b class="Sy">C</b></a></dt>\n  <dd>Set if borrow (i.e. if (<var class="Ar">r8</var> + carry) &gt;\n      <b class="Sy">( &#x2022;&#x0300;A&#x2022;&#x0301;)</b>).</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss">SBC ( &#x2022;&#x0300;A&#x2022;&#x0301;),[&#x043D;&#x2220;(\n  &#x141B; &#x300D;&#x2220;)&#xFF3F;]</h3>\n<p class="Pp">Subtract the byte at <b class="Sy">&#x043D;&#x2220;( &#x141B;\n    &#x300D;&#x2220;)&#xFF3F;</b> and the carry flag from <b class="Sy">(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: See\n    <a class="Sx" href="#SBC__&amp;(___u2022___u0300_A__u2022___u0301_),r8">SBC\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss">SBC ( &#x2022;&#x0300;A&#x2022;&#x0301;),n8</h3>\n<p class="Pp">Subtract the value <var class="Ar">n8</var> and the carry flag\n    from <b class="Sy">( &#x2022;&#x0300;A&#x2022;&#x0301;)</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See\n    <a class="Sx" href="#SBC__&amp;(___u2022___u0300_A__u2022___u0301_),r8">SBC\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="SCF"><a class="permalink" href="#SCF">SCF</a></h3>\n<p class="Pp">Set Carry Flag.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="N~24"><a class="permalink" href="#N~24"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~25"><a class="permalink" href="#H~25"><b class="Sy">H</b></a></dt>\n  <dd>0</dd>\n  <dt id="C~22"><a class="permalink" href="#C~22"><b class="Sy">C</b></a></dt>\n  <dd>1</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="SET_u3,r8"><a class="permalink" href="#SET_u3,r8">SET\n  u3,r8</a></h3>\n<p class="Pp">Set bit <var class="Ar">u3</var> in register\n    <var class="Ar">r8</var> to 1. Bit 0 is the rightmost one, bit 7 the\n    leftmost one.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="SET_u3,_"><a class="permalink" href="#SET_u3,_">SET\n  u3,[&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;]</a></h3>\n<p class="Pp">Set bit <var class="Ar">u3</var> in the byte pointed by\n    <b class="Sy">&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;</b> to 1.\n    Bit 0 is the rightmost one, bit 7 the leftmost one.</p>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="SLA_r8"><a class="permalink" href="#SLA_r8">SLA r8</a></h3>\n<p class="Pp">Shift Left Arithmetically register <var class="Ar">r8</var>.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">C &lt;- [7 &lt;- 0] &lt;- 0</div>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~23"><a class="permalink" href="#Z~23"><b class="Sy">Z</b></a></dt>\n  <dd>Set if result is 0.</dd>\n  <dt id="N~25"><a class="permalink" href="#N~25"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~26"><a class="permalink" href="#H~26"><b class="Sy">H</b></a></dt>\n  <dd>0</dd>\n  <dt id="C~23"><a class="permalink" href="#C~23"><b class="Sy">C</b></a></dt>\n  <dd>Set according to result.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="SLA__"><a class="permalink" href="#SLA__">SLA\n  [&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;]</a></h3>\n<p class="Pp">Shift Left Arithmetically the byte at\n    <b class="Sy">&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;</b>.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">C &lt;- [7 &lt;- 0] &lt;- 0</div>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See <a class="Sx" href="#SLA_r8">SLA r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="SRA_r8"><a class="permalink" href="#SRA_r8">SRA r8</a></h3>\n<p class="Pp">Shift Right Arithmetically register <var class="Ar">r8</var>.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">[7] -&gt; [7 -&gt; 0] -&gt; C</div>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~24"><a class="permalink" href="#Z~24"><b class="Sy">Z</b></a></dt>\n  <dd>Set if result is 0.</dd>\n  <dt id="N~26"><a class="permalink" href="#N~26"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~27"><a class="permalink" href="#H~27"><b class="Sy">H</b></a></dt>\n  <dd>0</dd>\n  <dt id="C~24"><a class="permalink" href="#C~24"><b class="Sy">C</b></a></dt>\n  <dd>Set according to result.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="SRA__"><a class="permalink" href="#SRA__">SRA\n  [&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;]</a></h3>\n<p class="Pp">Shift Right Arithmetically the byte at\n    <b class="Sy">&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;</b>.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">[7] -&gt; [7 -&gt; 0] -&gt; C</div>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See <a class="Sx" href="#SRA_r8">SRA r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="SRL_r8"><a class="permalink" href="#SRL_r8">SRL r8</a></h3>\n<p class="Pp">Shift Right Logically register <var class="Ar">r8</var>.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">0 -&gt; [7 -&gt; 0] -&gt; C</div>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~25"><a class="permalink" href="#Z~25"><b class="Sy">Z</b></a></dt>\n  <dd>Set if result is 0.</dd>\n  <dt id="N~27"><a class="permalink" href="#N~27"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~28"><a class="permalink" href="#H~28"><b class="Sy">H</b></a></dt>\n  <dd>0</dd>\n  <dt id="C~25"><a class="permalink" href="#C~25"><b class="Sy">C</b></a></dt>\n  <dd>Set according to result.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="SRL__"><a class="permalink" href="#SRL__">SRL\n  [&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;]</a></h3>\n<p class="Pp">Shift Right Logically the byte at <b class="Sy">&#x043D;&#x2220;(\n    &#x141B; &#x300D;&#x2220;)&#xFF3F;</b>.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">0 -&gt; [7 -&gt; 0] -&gt; C</div>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See <a class="Sx" href="#SRA_r8">SRA r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="STOP!!"><a class="permalink" href="#STOP!!">STOP!!&#x1F6D1;</a></h3>\n<p class="Pp">Enter CPU very low power mode. Also used to switch between double\n    and normal speed CPU modes in GBC.</p>\n<p class="Pp">Cycles: -</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss">SUB ( &#x2022;&#x0300;A&#x2022;&#x0301;),r8</h3>\n<p class="Pp">Subtract <var class="Ar">r8</var>\'s value from <b class="Sy">(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</b>.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~26"><a class="permalink" href="#Z~26"><b class="Sy">Z</b></a></dt>\n  <dd>Set if result is 0.</dd>\n  <dt id="N~28"><a class="permalink" href="#N~28"><b class="Sy">N</b></a></dt>\n  <dd>1</dd>\n  <dt id="H~29"><a class="permalink" href="#H~29"><b class="Sy">H</b></a></dt>\n  <dd>Set if borrow from bit 4.</dd>\n  <dt id="C~26"><a class="permalink" href="#C~26"><b class="Sy">C</b></a></dt>\n  <dd>Set if borrow (set if <var class="Ar">r8</var> &gt; <b class="Sy">(\n      &#x2022;&#x0300;A&#x2022;&#x0301;)</b>).</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss">SUB ( &#x2022;&#x0300;A&#x2022;&#x0301;),[&#x043D;&#x2220;(\n  &#x141B; &#x300D;&#x2220;)&#xFF3F;]</h3>\n<p class="Pp">Subtract the byte at <b class="Sy">&#x043D;&#x2220;( &#x141B;\n    &#x300D;&#x2220;)&#xFF3F;</b> from <b class="Sy">(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: See\n    <a class="Sx" href="#SUB__&amp;(___u2022___u0300_A__u2022___u0301_),r8">SUB\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss">SUB ( &#x2022;&#x0300;A&#x2022;&#x0301;),n8</h3>\n<p class="Pp">Subtract the value <var class="Ar">n8</var> from <b class="Sy">(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See\n    <a class="Sx" href="#SUB__&amp;(___u2022___u0300_A__u2022___u0301_),r8">SUB\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="SWAP_r8"><a class="permalink" href="#SWAP_r8">SWAP\n  r8</a></h3>\n<p class="Pp">Swap the upper 4 bits in register <var class="Ar">r8</var> and the\n    lower 4 ones.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~27"><a class="permalink" href="#Z~27"><b class="Sy">Z</b></a></dt>\n  <dd>Set if result is 0.</dd>\n  <dt id="N~29"><a class="permalink" href="#N~29"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~30"><a class="permalink" href="#H~30"><b class="Sy">H</b></a></dt>\n  <dd>0</dd>\n  <dt id="C~27"><a class="permalink" href="#C~27"><b class="Sy">C</b></a></dt>\n  <dd>0</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="SWAP__"><a class="permalink" href="#SWAP__">SWAP\n  [&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;]</a></h3>\n<p class="Pp">Swap the upper 4 bits in the byte pointed by\n    <b class="Sy">&#x043D;&#x2220;( &#x141B; &#x300D;&#x2220;)&#xFF3F;</b> and\n    the lower 4 ones.</p>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See <a class="Sx" href="#SWAP_r8">SWAP r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss">XOR ( &#x2022;&#x0300;A&#x2022;&#x0301;),r8</h3>\n<p class="Pp">Bitwise XOR between <var class="Ar">r8</var>\'s value and\n    <b class="Sy">( &#x2022;&#x0300;A&#x2022;&#x0301;)</b>.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~28"><a class="permalink" href="#Z~28"><b class="Sy">Z</b></a></dt>\n  <dd>Set if result is 0.</dd>\n  <dt id="N~30"><a class="permalink" href="#N~30"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~31"><a class="permalink" href="#H~31"><b class="Sy">H</b></a></dt>\n  <dd>0</dd>\n  <dt id="C~28"><a class="permalink" href="#C~28"><b class="Sy">C</b></a></dt>\n  <dd>0</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss">XOR ( &#x2022;&#x0300;A&#x2022;&#x0301;),[&#x043D;&#x2220;(\n  &#x141B; &#x300D;&#x2220;)&#xFF3F;]</h3>\n<p class="Pp">Bitwise XOR between the byte at <b class="Sy">&#x043D;&#x2220;(\n    &#x141B; &#x300D;&#x2220;)&#xFF3F;</b> and <b class="Sy">(\n    &#x2022;&#x0300;A&#x2022;&#x0301;)</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: See\n    <a class="Sx" href="#XOR__&amp;(___u2022___u0300_A__u2022___u0301_),r8">XOR\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss">XOR ( &#x2022;&#x0300;A&#x2022;&#x0301;),n8</h3>\n<p class="Pp">Bitwise XOR between <var class="Ar">n8</var>\'s value and\n    <b class="Sy">( &#x2022;&#x0300;A&#x2022;&#x0301;)</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See\n    <a class="Sx" href="#XOR__&amp;(___u2022___u0300_A__u2022___u0301_),r8">XOR\n    ( &#x2022;&#x0300;A&#x2022;&#x0301;),r8</a></p>\n</section>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="SEE_ALSO"><a class="permalink" href="#SEE_ALSO">SEE\n  ALSO</a></h2>\n<p class="Pp"><a class="Xr" href="./rgbasm.1">rgbasm(1)</a>,\n    <a class="Xr" href="./rgbds.7">rgbds(7)</a></p>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="HISTORY"><a class="permalink" href="#HISTORY">HISTORY</a></h2>\n<p class="Pp">Carsten S&#x00F8;rensen made this dang cool\n    <code class="Nm">rgbds</code> thingy as part of some ASMotor program, then\n    Justin Lloyd put it in RGBDS. Now some DUMB NERDS at\n    <a class="Lk" href="https://github.com/gbdev/rgbds">https://github.com/gbdev/rgbds</a>\n    take care of it.</p>\n</section>\n'}}))}h.isMDXComponent=!0}}]);