"use strict";(self.webpackChunkrgbds_www=self.webpackChunkrgbds_www||[]).push([[2640],{3905:function(e,a,s){s.d(a,{Zo:function(){return d},kt:function(){return m}});var t=s(67294);function n(e,a,s){return a in e?Object.defineProperty(e,a,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[a]=s,e}function o(e,a){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),s.push.apply(s,t)}return s}function l(e){for(var a=1;a<arguments.length;a++){var s=null!=arguments[a]?arguments[a]:{};a%2?o(Object(s),!0).forEach((function(a){n(e,a,s[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):o(Object(s)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(s,a))}))}return e}function i(e,a){if(null==e)return{};var s,t,n=function(e,a){if(null==e)return{};var s,t,n={},o=Object.keys(e);for(t=0;t<o.length;t++)s=o[t],a.indexOf(s)>=0||(n[s]=e[s]);return n}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)s=o[t],a.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(n[s]=e[s])}return n}var c=t.createContext({}),r=function(e){var a=t.useContext(c),s=a;return e&&(s="function"==typeof e?e(a):l(l({},a),e)),s},d=function(e){var a=r(e.components);return t.createElement(c.Provider,{value:a},e.children)},p={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},h=t.forwardRef((function(e,a){var s=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),h=r(s),m=n,f=h["".concat(c,".").concat(m)]||h[m]||p[m]||o;return s?t.createElement(f,l(l({ref:a},d),{},{components:s})):t.createElement(f,l({ref:a},d))}));function m(e,a){var s=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var o=s.length,l=new Array(o);l[0]=h;var i={};for(var c in a)hasOwnProperty.call(a,c)&&(i[c]=a[c]);i.originalType=e,i.mdxType="string"==typeof e?e:n,l[1]=i;for(var r=2;r<o;r++)l[r]=s[r];return t.createElement.apply(null,l)}return t.createElement.apply(null,s)}h.displayName="MDXCreateElement"},32777:function(e,a,s){s.r(a),s.d(a,{assets:function(){return d},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return i},metadata:function(){return r},toc:function(){return p}});var t=s(83117),n=s(80102),o=(s(67294),s(3905)),l=["components"],i={},c="rgbgfx(1) \u2014 Game Boy graphics converter",r={unversionedId:"rgbgfx.1",id:"rgbgfx.1",title:"rgbgfx(1) \u2014 Game Boy graphics converter",description:"",source:"@site/docs/rgbgfx.1.md",sourceDirName:".",slug:"/rgbgfx.1",permalink:"/docs/master/rgbgfx.1",draft:!1,editUrl:"https://github.com/gbdev/rgbds/edit/master/man/rgbgfx.1",tags:[],version:"current",frontMatter:{},sidebar:"nav",previous:{title:"rgbfix(1) \u2014 Game Boy header utility and checksum fixer",permalink:"/docs/master/rgbfix.1"},next:{title:"rgbds(7) \u2014 Rednex Game Boy Development System",permalink:"/docs/master/rgbds.7"}},d={},p=[{value:"SYNOPSIS",id:"SYNOPSIS",level:2,children:[]},{value:"DESCRIPTION",id:"DESCRIPTION",level:2,children:[]},{value:"ARGUMENTS",id:"ARGUMENTS",level:2,children:[{value:"At-files",id:"At-files",level:3,children:[]}]},{value:"PALETTE SPECIFICATION FORMATS",id:"PALETTE_SPECIFICATION_FORMATS",level:2,children:[]},{value:"PALETTE GENERATION",id:"PALETTE_GENERATION",level:2,children:[]},{value:"OUTPUT FILES",id:"OUTPUT_FILES",level:2,children:[{value:"Tile data",id:"Tile_data",level:3,children:[]},{value:"Palette data",id:"Palette_data",level:3,children:[]},{value:"Tile map data",id:"Tile_map_data",level:3,children:[]},{value:"Attribute map data",id:"Attribute_map_data",level:3,children:[]}]},{value:"REVERSE MODE",id:"REVERSE_MODE",level:2,children:[]},{value:"NOTES",id:"NOTES",level:2,children:[]},{value:"EXAMPLES",id:"EXAMPLES",level:2,children:[]},{value:"BUGS",id:"BUGS",level:2,children:[]},{value:"SEE ALSO",id:"SEE_ALSO",level:2,children:[]},{value:"HISTORY",id:"HISTORY",level:2,children:[]}],h={toc:p};function m(e){var a=e.components,s=(0,n.Z)(e,l);return(0,o.kt)("wrapper",(0,t.Z)({},h,s,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"rgbgfx1--game-boy-graphics-converter"},"rgbgfx(1) \u2014 Game Boy graphics converter"),(0,o.kt)("div",{className:"manual-text",dangerouslySetInnerHTML:{__html:'<section class="Sh">\n<h2 class="Sh" id="SYNOPSIS"><a class="permalink" href="#SYNOPSIS">SYNOPSIS</a></h2>\n<table class="Nm">\n  <tr>\n    <td><code class="Nm">rgbgfx</code></td>\n    <td>[<code class="Fl"><a href="#r">-r</a></code> <var class="Ar">stride</var>]\n      [<code class="Fl"><a href="#C">-C</a><a href="#m">m</a><a href="#u">u</a><a href="#V">V</a><a href="#Z">Z</a></code>] [<code class="Fl"><a href="#v">-v</a></code>\n      [<code class="Fl"><a href="#v">-v</a></code> <span class="No">...</span>]]\n      [<code class="Fl"><a href="#a">-a</a></code> <var class="Ar">attrmap</var> |\n      <code class="Fl"><a href="#A">-A</a></code>] [<code class="Fl"><a href="#b">-b</a></code>\n      <var class="Ar">base_ids</var>] [<code class="Fl"><a href="#c">-c</a></code>\n      <var class="Ar">color_spec</var>] [<code class="Fl"><a href="#d">-d</a></code>\n      <var class="Ar">depth</var>] [<code class="Fl"><a href="#L">-L</a></code>\n      <var class="Ar">slice</var>] [<code class="Fl"><a href="#N">-N</a></code>\n      <var class="Ar">nb_tiles</var>] [<code class="Fl"><a href="#n">-n</a></code>\n      <var class="Ar">nb_pals</var>] [<code class="Fl"><a href="#o">-o</a></code>\n      <var class="Ar">out_file</var>] [<code class="Fl"><a href="#p">-p</a></code>\n      <var class="Ar">pal_file</var> | <code class="Fl"><a href="#P">-P</a></code>]\n      [<code class="Fl"><a href="#q">-q</a></code> <var class="Ar">pal_map</var> |\n      <code class="Fl"><a href="#Q">-Q</a></code>] [<code class="Fl"><a href="#s">-s</a></code>\n      <var class="Ar">nb_colors</var>] [<code class="Fl"><a href="#t">-t</a></code>\n      <var class="Ar">tilemap</var> | <code class="Fl"><a href="#T">-T</a></code>]\n      [<code class="Fl"><a href="#x">-x</a></code> <var class="Ar">quantity</var>]\n      <var class="Ar">file</var></td>\n  </tr>\n</table>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="DESCRIPTION"><a class="permalink" href="#DESCRIPTION">DESCRIPTION</a></h2>\n<p class="Pp">The <code class="Nm">rgbgfx</code> program converts PNG images\n    into data suitable for display on the Game Boy and Game Boy Color, or\n    vice-versa.</p>\n<p class="Pp" id="squares">The main function of <code class="Nm">rgbgfx</code>\n    is to divide the input PNG into 8&#x00D7;8 pixel\n    <a class="permalink" href="#squares"><i class="Em">squares</i></a>, convert\n    each of those squares into 1bpp or 2bpp tile data, and save all of the tile\n    data in a file. It also has options to generate a tile map, attribute map,\n    and/or palette set as well; more on that and how the conversion process can\n    be tweaked below.</p>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="ARGUMENTS"><a class="permalink" href="#ARGUMENTS">ARGUMENTS</a></h2>\n<p class="Pp">Note that options can be abbreviated as long as the abbreviation\n    is unambiguous: <code class="Fl">--verb</code> is\n    <code class="Fl">--verbose</code>, but <code class="Fl">--ver</code> is\n    invalid because it could also be <code class="Fl">--version</code>.</p>\n<p class="Pp"><code class="Nm">rgbgfx</code> accepts decimal, binary, and\n    hexadecimal numbers in option arguments. Decimal numbers are written as\n    usual; binary numbers must be prefixed with either\n    &#x2018;<code class="Li">%</code>&#x2019; or\n    &#x2018;<code class="Li">0b</code>&#x2019;, and hexadecimal numbers must be\n    prefixed with either &#x2018;<code class="Li">$</code>&#x2019; (which will\n    likely need escaping or quoting to avoid being interpreted by the shell), or\n    &#x2018;<code class="Li">0x</code>&#x2019;. Leading zeros (after the base\n    prefix, if any) are accepted, and letters are not case-sensitive. All of\n    these are equivalent: &#x2018;<code class="Li">42</code>&#x2019;,\n    &#x2018;<code class="Li">042</code>&#x2019;,\n    &#x2018;<code class="Li">0b00101010</code>&#x2019;,\n    &#x2018;<code class="Li">0B101010</code>&#x2019;,\n    &#x2018;<code class="Li">0x2A</code>&#x2019;,\n    &#x2018;<code class="Li">0X2A</code>&#x2019;,\n    &#x2018;<code class="Li">0x2a</code>&#x2019;.</p>\n<p class="Pp">The following options are accepted:</p>\n<dl class="Bl-tag">\n  <dt id="a"><a class="permalink" href="#a"><code class="Fl">-a</code></a>\n    <var class="Ar">attrmap</var>, <code class="Fl">--attr-map</code>\n    <var class="Ar">attrmap</var></dt>\n  <dd>Generate an attribute map, which is a file containing tile\n      &#x201C;attributes&#x201D;. For each square of the input image, its\n      corresponding attribute map byte contains the mirroring bits (if\n      <code class="Fl">-m</code> was specified), the bank bit (see\n      <code class="Fl">-N</code>), and the palette index. See\n      <a class="Lk" href="https://gbdev.io/pandocs/Tile_Maps#bg-map-attributes-cgb-mode-only">Pan\n      Docs</a> for the individual bytes\' format. The output is written just like\n      the tile map (see <code class="Fl">-t</code>), follows the same order\n      (<code class="Fl">-Z</code>), and has the same size.</dd>\n  <dt id="A"><a class="permalink" href="#A"><code class="Fl">-A</code></a>,\n    <code class="Fl">--output-attr-map</code></dt>\n  <dd>Same as <code class="Fl">-a</code> <var class="Ar">path</var>, where\n      <var class="Ar">path</var> is the input image\'s path with the extension\n      set to <span class="Pa">.attrmap</span>.</dd>\n  <dt id="b"><a class="permalink" href="#b"><code class="Fl">-b</code></a>\n    <var class="Ar">base_ids</var>, <code class="Fl">--base-tiles</code>\n    <var class="Ar">base_ids</var></dt>\n  <dd>Set the base IDs for tile map output. <var class="Ar">base_ids</var>\n      should be one or two numbers between 0 and 255, separated by a comma; they\n      are for bank 0 and bank 1 respectively. Both default to 0.</dd>\n  <dt id="C"><a class="permalink" href="#C"><code class="Fl">-C</code></a>,\n    <code class="Fl">--color-curve</code></dt>\n  <dd>When generating palettes, use a color curve mimicking the Game Boy Color\'s\n      screen. The resulting colors may look closer to the input image\'s\n      <a class="permalink" href="#on"><b class="Sy" id="on">on hardware and\n      accurate emulators</b></a>.</dd>\n  <dt id="c"><a class="permalink" href="#c"><code class="Fl">-c</code></a>\n    <var class="Ar">color_spec</var>, <code class="Fl">--colors</code>\n    <var class="Ar">color_spec</var></dt>\n  <dd>Use the specified color palettes instead of having\n      <code class="Nm">rgbgfx</code> automatically determine some.\n      <var class="Ar">color_spec</var> can be one of the following:\n    <dl class="Bl-tag">\n      <dt id="inline"><a class="permalink" href="#inline"><b class="Sy">inline\n        palette spec</b></a></dt>\n      <dd>If <var class="Ar">color_spec</var> begins with a hash character\n          &#x2018;<code class="Li">#</code>&#x2019;, it is treated as an inline\n          palette specification. It should contain a comma-separated list of\n          hexadecimal colors, each beginning with a hash. Colors in are accepted\n          either as &#x2018;<code class="Li">#rgb</code>&#x2019; or\n          &#x2018;<code class="Li">#rrggbb</code>&#x2019; format. Palettes must\n          be separated by a colon or semicolon (the latter may require quoting\n          to avoid special handling by the shell), and spaces are allowed around\n          colons, semicolons and commas; trailing commas and semicolons are\n          allowed. See <a class="Sx" href="#EXAMPLES">EXAMPLES</a> for an\n          example of an inline palette specification.</dd>\n      <dt id="embedded"><a class="permalink" href="#embedded"><b class="Sy">embedded\n        palette spec</b></a></dt>\n      <dd>If <var class="Ar">color_spec</var> is the case-insensitive word\n          <code class="Cm">embedded</code>, then the first four colors of the\n          input PNG\'s embedded palette are used. It is an error if the PNG is\n          not indexed, or if colors other than these 4 are used. (This is\n          different from the default behavior of indexed PNGs, as then unused\n          entries in the embedded palette are ignored, whereas they are not with\n          <code class="Fl">-c</code> <code class="Cm">embedded</code>).</dd>\n      <dt id="external"><a class="permalink" href="#external"><b class="Sy">external\n        palette spec</b></a></dt>\n      <dd>Otherwise, <var class="Ar">color_spec</var> is assumed to be an\n          external palette specification. The expected format is\n          &#x2018;<code class="Li">format:path</code>&#x2019;, where\n          <var class="Ar">path</var> is a path to a file, which will be\n          processed according to the <var class="Ar">format</var>. See\n          <a class="Sx" href="#PALETTE_SPECIFICATION_FORMATS">PALETTE\n          SPECIFICATION FORMATS</a> for a list of formats and their\n          descriptions.</dd>\n    </dl>\n  </dd>\n  <dt id="d"><a class="permalink" href="#d"><code class="Fl">-d</code></a>\n    <var class="Ar">depth</var>, <code class="Fl">--depth</code>\n    <var class="Ar">depth</var></dt>\n  <dd>Set the bit depth of the output tile data, in bits per pixel (bpp), either\n      1 or 2 (the default). This changes how tile data is output, and the\n      maximum number of colors per palette (2 and 4 respectively).</dd>\n  <dt id="L"><a class="permalink" href="#L"><code class="Fl">-L</code></a>\n    <var class="Ar">slice</var>, <code class="Fl">--slice</code>\n    <var class="Ar">slice</var></dt>\n  <dd>Only process a given rectangle of the image. This is useful for example if\n      the input image is a sheet of some sort, and you want to convert each cel\n      individually. The default is to process the whole image as-is.\n    <p class="Pp"><var class="Ar">slice</var> must be two number pairs,\n        separated by a colon. The numbers must be separated by commas; space is\n        allowed around all punctuation. The first number pair specifies the X\n        and Y coordinates of the top-left pixel that will be processed (anything\n        above it or to its left will be ignored). The second number pair\n        specifies how many tiles to process horizontally and vertically,\n        respectively.</p>\n    <p class="Pp" id="is"><code class="Fl">-L</code>\n        <a class="permalink" href="#is"><b class="Sy">is ignored in reverse\n        mode</b></a>, <span class="No">no padding is inserted</span>.</p>\n  </dd>\n  <dt id="m"><a class="permalink" href="#m"><code class="Fl">-m</code></a>,\n    <code class="Fl">--mirror-tiles</code></dt>\n  <dd>Deduplicate tiles that are mirrors of each other. Tiles are checked for\n      horizontal, vertical, and horizontal-vertical mirroring. Useful with a\n      tile map and attribute map together to keep track of the duplicated tiles\n      and the dimension(s) mirrored. Implies <code class="Fl">-u</code>.</dd>\n  <dt id="N"><a class="permalink" href="#N"><code class="Fl">-N</code></a>\n    <var class="Ar">nb_tiles</var>, <code class="Fl">--nb-tiles</code>\n    <var class="Ar">nb_tiles</var></dt>\n  <dd>Set a maximum number of tiles that can be placed in each VRAM bank.\n      <var class="Ar">nb_tiles</var> should be one or two numbers between 0 and\n      256, separated by a comma; if the latter is omitted, it defaults to 0.\n      Setting either number to 0 prevents any tiles from being output in that\n      bank.\n    <p class="Pp">If more tiles are generated than can fit in the two banks\n        combined, <code class="Nm">rgbgfx</code> will abort. If\n        <code class="Fl">-N</code> is not specified, no limit will be set on the\n        amount of tiles placed in bank 0, and tiles will not be placed in bank\n        1.</p>\n  </dd>\n  <dt id="n"><a class="permalink" href="#n"><code class="Fl">-n</code></a>\n    <var class="Ar">nb_pals</var>, <code class="Fl">--nb-palettes</code>\n    <var class="Ar">nb_pals</var></dt>\n  <dd>Abort if more than <var class="Ar">nb_pals</var> palettes are generated.\n      This may not be more than 256.\n    <p class="Pp">Note that attribute map output only has 3 bits for the palette\n        ID, so a limit higher than 8 may yield incomplete data unless relying on\n        a palette map (see <code class="Fl">-q</code>).</p>\n  </dd>\n  <dt id="o"><a class="permalink" href="#o"><code class="Fl">-o</code></a>\n    <var class="Ar">out_file</var>, <code class="Fl">--output</code>\n    <var class="Ar">out_file</var></dt>\n  <dd>Output the tile data in native 2bpp format or in 1bpp (depending on\n      <code class="Fl">-d</code>) to this file.</dd>\n  <dt id="p"><a class="permalink" href="#p"><code class="Fl">-p</code></a>\n    <var class="Ar">pal_file</var>, <code class="Fl">--palette</code>\n    <var class="Ar">pal_file</var></dt>\n  <dd>Output the image\'s palette set to this file.</dd>\n  <dt id="P"><a class="permalink" href="#P"><code class="Fl">-P</code></a>,\n    <code class="Fl">--output-palette</code></dt>\n  <dd>Same as <code class="Fl">-p</code> <var class="Ar">path</var>, where\n      <var class="Ar">path</var> is the input image\'s path with the extension\n      set to <span class="Pa">.pal</span>.</dd>\n  <dt id="q"><a class="permalink" href="#q"><code class="Fl">-q</code></a>\n    <var class="Ar">pal_file</var>, <code class="Fl">--palette-map</code>\n    <var class="Ar">pal_file</var></dt>\n  <dd>Output the image\'s palette map to this file. This is useful if the input\n      image contains more than 8 palettes, as the attribute map only contains\n      the lower 3 bits of the palette indices.</dd>\n  <dt id="Q"><a class="permalink" href="#Q"><code class="Fl">-Q</code></a>,\n    <code class="Fl">--output-palette-map</code></dt>\n  <dd>Same as <code class="Fl">-q</code> <var class="Ar">path</var>, where\n      <var class="Ar">path</var> is the input image\'s path with the extension\n      set to <span class="Pa">.palmap</span>.</dd>\n  <dt id="r"><a class="permalink" href="#r"><code class="Fl">-r</code></a>\n    <var class="Ar">width</var>, <code class="Fl">--reverse</code>\n    <var class="Ar">width</var></dt>\n  <dd>Switches <code class="Nm">rgbgfx</code> into\n      &#x201C;<a class="permalink" href="#reverse"><b class="Sy" id="reverse">reverse</b></a>&#x201D;\n      mode. In this mode, instead of converting a PNG image into Game Boy data,\n      <code class="Nm">rgbgfx</code> will attempt to reverse the process, and\n      render Game Boy data into an image. See\n      <a class="Sx" href="#REVERSE_MODE">REVERSE MODE</a> below for details.\n    <p class="Pp"><var class="Ar">width</var> is the image\'s width, in tiles\n        (including any margins specified by <code class="Fl">-L</code>).</p>\n  </dd>\n  <dt id="s"><a class="permalink" href="#s"><code class="Fl">-s</code></a>\n    <var class="Ar">nb_colors</var>, <code class="Fl">--palette-size</code>\n    <var class="Ar">nb_colors</var></dt>\n  <dd>Specify how many colors each palette contains, including the transparent\n      one if any. <var class="Ar">nb_colors</var> cannot be more than\n      &#x2018;<code class="Li">1 &lt;&lt;\n      <var class="Ar">depth</var></code>&#x2019; (see\n      <code class="Fl">-d</code>).</dd>\n  <dt id="t"><a class="permalink" href="#t"><code class="Fl">-t</code></a>\n    <var class="Ar">tilemap</var>, <code class="Fl">--tilemap</code>\n    <var class="Ar">tilemap</var></dt>\n  <dd>Generate a file of tile indices. For each square of the input image, its\n      corresponding tile map byte contains the index of the associated tile in\n      the tile data file. The IDs wrap around from 255 back to 0, and do not\n      include the bank bit; use <code class="Fl">-a</code> for that. Useful in\n      combination with <code class="Fl">-u</code> and/or\n      <code class="Fl">-m</code> to keep track of duplicate tiles.</dd>\n  <dt id="T"><a class="permalink" href="#T"><code class="Fl">-T</code></a>,\n    <code class="Fl">--output-tilemap</code></dt>\n  <dd>Same as <code class="Fl">-t</code> <var class="Ar">path</var>, where\n      <var class="Ar">path</var> is the input image\'s path with the extension\n      set to <span class="Pa">.tilemap</span>.</dd>\n  <dt id="u"><a class="permalink" href="#u"><code class="Fl">-u</code></a>,\n    <code class="Fl">--unique-tiles</code></dt>\n  <dd>Deduplicate identical tiles, and omit the duplicates from the tile data\n      file. Useful with a tile map (see <code class="Fl">-t</code>) to keep\n      track of the duplicated tiles.\n    <p class="Pp" id="should">Note that if this option is enabled, no guarantee\n        is made on the order in which tiles are output; while it\n        <a class="permalink" href="#should"><i class="Em">should</i></a> be\n        consistent across identical runs of a given\n        <code class="Nm">rgbgfx</code> release, the same is not true for\n        different releases.</p>\n  </dd>\n  <dt id="V"><a class="permalink" href="#V"><code class="Fl">-V</code></a>,\n    <code class="Fl">--version</code></dt>\n  <dd>Print the version of the program and exit.</dd>\n  <dt id="v"><a class="permalink" href="#v"><code class="Fl">-v</code></a>,\n    <code class="Fl">--verbose</code></dt>\n  <dd>Be verbose. The verbosity level is increased by one each time the flag is\n      specified, with each level including the previous:\n    <ol class="Bl-enum Bl-compact">\n      <li><code class="Nm">rgbgfx</code> prints out its configuration before\n          doing anything.</li>\n      <li>A generic message is printed before doing most actions.</li>\n      <li>Some of the actions\' intermediate results are printed.</li>\n      <li>Some internal debug printing is enabled.</li>\n    </ol>\n    The verbosity level does not go past 6.\n    <p class="Pp">Note that verbose output is only intended to be consumed by\n        humans, and may change without notice between RGBDS releases; relying on\n        those for scripts is not advised.</p>\n  </dd>\n  <dt id="x"><a class="permalink" href="#x"><code class="Fl">-x</code></a>\n    <var class="Ar">quantity</var>, <code class="Fl">--trim-end</code>\n    <var class="Ar">quantity</var></dt>\n  <dd>Do not output the last <var class="Ar">quantity</var> tiles to the tile\n      data file; no other output is affected. This is useful for trimming\n      &#x201C;filler&#x201D; / blank squares at the end of an image. If fewer\n      than <var class="Ar">quantity</var> tiles would have been emitted, the\n      file will be empty.\n    <p class="Pp" id="after">Note that this is done\n        <a class="permalink" href="#after"><i class="Em">after</i></a>\n        deduplication if <code class="Fl">-u</code> was enabled, so you probably\n        don\'t want to use this option in combination with\n        <code class="Fl">-u</code>. Note also that the tiles that don\'t get\n        output will not count towards <code class="Fl">-N</code>\'s limit.</p>\n  </dd>\n  <dt id="Z"><a class="permalink" href="#Z"><code class="Fl">-Z</code></a>,\n    <code class="Fl">--columns</code></dt>\n  <dd>Read squares from the PNG in column-major order (column by column),\n      instead of the default row-major order (line by line). This primarily\n      affects tile map and attribute map output, although it may also change\n      generated tile data and palettes.</dd>\n</dl>\n<section class="Ss">\n<h3 class="Ss" id="At-files"><a class="permalink" href="#At-files">At-files</a></h3>\n<p class="Pp">In a given project, many images are to be converted with different\n    flags. The traditional way of solving this problem has been to specify the\n    different flags for each image in the Makefile / build script; this can be\n    inconvenient, as it centralizes all those flags away from the images they\n    concern.</p>\n<p class="Pp">To avoid these drawbacks, <code class="Nm">rgbgfx</code> supports\n    &#x201C;at-files&#x201D;: any command-line argument that begins with an at\n    sign (&#x2018;<code class="Li">@</code>&#x2019;) is interpreted as one. The\n    rest of the argument (without the @, that is) is interpreted as the path to\n    a file, whose contents are interpreted as if given on the command line.\n    At-files can be stored right next to the corresponding image, for\n  example:</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent"><code class="Li">$ rgbgfx -o image.2bpp -t\n  image.tilemap @image.flags image.png</code></div>\n<p class="Pp">This will read additional flags from file\n    &#x2018;<code class="Li">image.flags</code>&#x2019;, which could contains\n    for example &#x2018;<code class="Li">-b 128</code>&#x2019; to specify a base\n    offset for the image\'s tiles. The above command could be generated from the\n    following\n    <a class="Xr" href="https://man7.org/linux/man-pages/man1/make.1.html">make(1)</a>\n    rule, for example:</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>%.2bpp %.tilemap: %.flags %.png\n\trgbgfx -o $*.2bpp -t $*.tilemap @$*.flags $*.png</pre>\n</div>\n<p class="Pp" id="no">Since the contents of at-files are interpreted by\n    <code class="Nm">rgbgfx</code>,\n    <a class="permalink" href="#no"><b class="Sy">no shell processing is\n    performed</b></a>; for example, shell variables are not expanded\n    (&#x2018;<code class="Li">$PWD</code>&#x2019;,\n    &#x2018;<code class="Li">%WINDIR%</code>&#x2019;, etc.). In at-files, lines\n    that are empty or contain only whitespace are ignored; lines that begin with\n    a hash sign (&#x2018;<code class="Li">#</code>&#x2019;), optionally preceded\n    by whitespace, are considered comments and also ignored. Each line can\n    contain any number of arguments, which are separated by whitespace. (No\n    quoting feature to prevent this is provided.)</p>\n<p class="Pp">Note that a leading &#x2018;<code class="Li">@</code>&#x2019; has\n    no special meaning on option arguments, and that the standard\n    &#x2018;<code class="Li">--</code>&#x2019; to stop option processing also\n    disables at-file processing. For example, the following command line reads\n    command-line options from\n    &#x2018;<code class="Li">tilesets/town.flags</code>&#x2019; then\n    &#x2018;<code class="Li">tilesets.flags</code>&#x2019;, but processes\n    &#x2018;<code class="Li">@tilesets/town.png</code>&#x2019; as the input\n    image and outputs tile data to\n    &#x2018;<code class="Li">@tilesets/town.2bpp</code>&#x2019;:</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent"><code class="Li">$ rgbgfx -o @tilesets/town.2bpp\n  @tilesets/town.flags @tilesets.flags -- @tilesets/town.png</code></div>\n<p class="Pp">At-files can also specify the input image directly, and call for\n    more at-files, both using the regular syntax. Note that while\n    &#x2018;<code class="Li">--</code>&#x2019; can be used in an at-file (with\n    identical semantics), it is only effective inside of it&#x2014;normal option\n    processing continues in the parent scope.</p>\n</section>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="PALETTE_SPECIFICATION_FORMATS"><a class="permalink" href="#PALETTE_SPECIFICATION_FORMATS">PALETTE\n  SPECIFICATION FORMATS</a></h2>\n<p class="Pp">The following formats are supported:</p>\n<dl class="Bl-tag">\n  <dt id="act"><a class="permalink" href="#act"><b class="Sy">act</b></a></dt>\n  <dd><a class="Lk" href="https://www.adobe.com/devnet-apps/photoshop/fileformatashtml/#50577411_pgfId-1070626">Adobe\n      Photoshop color table</a>.</dd>\n  <dt id="aco"><a class="permalink" href="#aco"><b class="Sy">aco</b></a></dt>\n  <dd><a class="Lk" href="https://www.adobe.com/devnet-apps/photoshop/fileformatashtml/#50577411_pgfId-1055819">Adobe\n      Photoshop color swatch</a>.</dd>\n  <dt id="psp"><a class="permalink" href="#psp"><b class="Sy">psp</b></a></dt>\n  <dd><a class="Lk" href="https://www.selapa.net/swatches/colors/fileformats.php#psp_pal">Paint\n      Shop Pro palette</a>.</dd>\n</dl>\n<p class="Pp">If you wish for another format to be supported, please open an\n    issue (see <a class="Sx" href="#BUGS">BUGS</a> below) or contact us, and\n    supply a few sample files.</p>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="PALETTE_GENERATION"><a class="permalink" href="#PALETTE_GENERATION">PALETTE\n  GENERATION</a></h2>\n<p class="Pp"><code class="Nm">rgbgfx</code> must generate palettes from the\n    colors in the input image, unless <code class="Fl">-c</code> was used; in\n    that case, the provided palettes will be used.\n    <a class="permalink" href="#If"><b class="Sy" id="If">If the order of colors\n    in the palettes is important to you</b></a>, for example because you want to\n    use palette swaps, please use <code class="Fl">-c</code> to specify the\n    palette explicitly.</p>\n<p class="Pp" id="any">First, if the image contains\n    <a class="permalink" href="#any"><i class="Em">any</i></a> transparent\n    pixel, color #0 of <i class="Em">all</i> palettes will be allocated to it.\n    This is done <a class="permalink" href="#even"><b class="Sy" id="even">even\n    if palettes were explicitly specified using</b></a>\n    <code class="Fl">-c</code>; then the specification only covers color #1\n    onwards. (If you do not want this, ask your image editor to remove the alpha\n    channel.)</p>\n<p class="Pp">After generating palettes, <code class="Nm">rgbgfx</code> sorts\n    colors within those palettes using the following rules:</p>\n<ul class="Bl-bullet Bd-indent">\n  <li>If the PNG file internally contains a palette (often dubbed an\n      &#x201C;indexed&#x201D; PNG), then colors in each output palette will be\n      sorted according to their order in the PNG\'s palette. Any unused entries\n      will be ignored, and only the first entry is considered if there are any\n      duplicates. (If you want a given color to appear more than once, or an\n      unused color to appear at all, you should specify the palettes explicitly\n      instead using <code class="Fl">-c</code>; <code class="Fl">-c</code>\n      <code class="Cm">embedded</code> may be appropriate.)</li>\n  <li>Otherwise, if the PNG only contains shades of gray, they will be\n      categorized into as many &#x201C;bins&#x201D; as there are colors per\n      palette, and the palette is set to these bins. The darkest gray will end\n      up in bin #0, and so on; note that this is the opposite of the RGB method\n      below. If two distinct grays end up in the same bin, the RGB method is\n      used instead.\n    <p class="Pp" id="exactly">Be careful that <code class="Nm">rgbgfx</code> is\n        picky about what it considers &#x201C;grays&#x201D;: the red, green, and\n        blue components of each color must <i class="Em">all</i> be\n        <a class="permalink" href="#exactly"><i class="Em">exactly</i></a> the\n        same.</p>\n  </li>\n  <li>If none of the above apply, colors are sorted from lightest (first) to\n      darkest (last). The definition of luminance that\n      <code class="Nm">rgbgfx</code> uses is &#x201C;\n    <math class="eqn">\n      <mrow><mn>2126</mn><mo>&#x00D7;</mo><mi fontstyle="italic">red</mi><mo>+</mo><mn>7152</mn><mo>&#x00D7;</mo><mi fontstyle="italic">green</mi><mo>+</mo><mn>722</mn><mo>&#x00D7;</mo><mi fontstyle="italic">blue</mi></mrow>\n    </math>\n    &#x201D;.</li>\n</ul>\n<p class="Pp">Note that the &#x201C;indexed&#x201D; behavior depends on an\n    internal detail of how the PNG is saved, specifically its\n    &#x2018;<code class="Li">PLTE</code>&#x2019; chunk. Since few image editors\n    (such as GIMP) expose that detail, this behavior is only kept for\n    compatibility and should be considered deprecated.</p>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="OUTPUT_FILES"><a class="permalink" href="#OUTPUT_FILES">OUTPUT\n  FILES</a></h2>\n<p class="Pp">All files output by <code class="Nm">rgbgfx</code> are binary\n    files, and designed to follow the Game Boy and Game Boy Color\'s native\n    formats. What follows is succinct descriptions of those formats, including\n    <code class="Nm">rgbgfx</code>-specific details. For more complete,\n    beginner-friendly descriptions of the native formats with illustrations,\n    please check out <a class="Lk" href="https://gbdev.io/pandocs/Rendering">Pan\n    Docs</a>.</p>\n<section class="Ss">\n<h3 class="Ss" id="Tile_data"><a class="permalink" href="#Tile_data">Tile\n  data</a></h3>\n<p class="Pp">Tile data is output like a binary dump of VRAM, with no padding\n    between tiles. Each tile is 16 bytes, 2 per row of 8 pixels; the bits of\n    color IDs are split into each byte (or &#x201C;bitplane&#x201D;). The\n    leftmost pixel\'s color ID is stored in the two bytes\' most significant bits,\n    and the rightmost pixel\'s color ID in their least significant bits.</p>\n<p class="Pp">When the bit depth (<code class="Fl">-d</code>) is set to 1, the\n    most significant bitplane (second byte) of each row, being all zeros, is\n    simply not output.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Palette_data"><a class="permalink" href="#Palette_data">Palette\n  data</a></h3>\n<p class="Pp">Palette data is output like a dump of palette memory. Each color\n    is written as GBC-native little-endian RGB555, with the unused bit 15 set to\n    0. There is no padding between colors, nor between palettes; however, empty\n    colors in the palettes are output as 0xFFFF. For example, if 5 palettes are\n    generated with <code class="Fl">-s</code> <code class="Cm">4</code>, the\n    palette data file will be\n  <math class="eqn">\n    <mrow><mn>2</mn><mo>&#x00D7;</mo><mn>4</mn><mo>&#x00D7;</mo><mn>5</mn><mo>=</mo><mn>40</mn></mrow>\n  </math>\n   bytes long, even if some palettes contain less than 3 colors. Note that\n    <code class="Fl">-n</code> only caps how many palettes are generated (and\n    thus this file\'s size), but fewer may be generated still.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Tile_map_data"><a class="permalink" href="#Tile_map_data">Tile\n  map data</a></h3>\n<p class="Pp">A tile map is an array of tile IDs, with one byte per tile ID. The\n    first byte always corresponds to the ID of the tile in top-left corner of\n    the input image; the second byte is either the ID of the tile to its right\n    (by default), or below it (with <code class="Fl">-Z</code>); and so on,\n    continuing in the same direction. Rows / columns (respectively) are stored\n    consecutively, with no padding.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Attribute_map_data"><a class="permalink" href="#Attribute_map_data">Attribute\n  map data</a></h3>\n<p class="Pp">Attribute maps mirror the format of tile maps, like on the GBC,\n    especially the order in which bytes are output. The contents of individual\n    bytes follows the GBC\'s native format:</p>\n<table class="Bl-column">\n  <tr>\n    <td>Bit 7</td>\n    <td>BG-to-OAM Priority</td>\n    <td>Set to 0</td>\n  </tr>\n  <tr>\n    <td>Bit 6</td>\n    <td>Vertical Flip</td>\n    <td>0=Normal, 1=Mirror vertically</td>\n  </tr>\n  <tr>\n    <td>Bit 5</td>\n    <td>Horizontal Flip</td>\n    <td>0=Normal, 1=Mirror horizontally</td>\n  </tr>\n  <tr>\n    <td>Bit 4</td>\n    <td>Not used</td>\n    <td>Set to 0</td>\n  </tr>\n  <tr>\n    <td>Bit 3</td>\n    <td>Tile VRAM Bank number</td>\n    <td>0=Bank 0, 1=Bank 1</td>\n  </tr>\n  <tr>\n    <td>Bit 2&#x2013;0</td>\n    <td>Background Palette number</td>\n    <td>BGP0-7</td>\n  </tr>\n</table>\n<p class="Pp">Note that if more than 8 palettes are used, only the lowest 3 bits\n    of the palette ID are output.</p>\n</section>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="REVERSE_MODE"><a class="permalink" href="#REVERSE_MODE">REVERSE\n  MODE</a></h2>\n<p class="Pp"><code class="Nm">rgbgfx</code> can produce a PNG image from valid\n    data. This may be useful for ripping graphics, recovering lost source\n    images, etc. An important caveat on that last one, though: the conversion\n    process is\n    <a class="permalink" href="#lossy"><b class="Sy" id="lossy">lossy</b></a>\n    both ways, so the &#x201C;reversed&#x201D; image won\'t be perfectly\n    identical to the original&#x2014;but it should be close to a Game Boy\'s\n    output. (Keep in mind that many of consoles output different colors, so\n    there is no true reference rendering.)</p>\n<p class="Pp">When using reverse mode, make sure to pass the same flags that\n    were given when generating the data, especially <code class="Fl">-C</code>,\n    <code class="Fl">-d</code>, <code class="Fl">-N</code>,\n    <code class="Fl">-s</code>, <code class="Fl">-x</code>, and\n    <code class="Fl">-Z</code>.\n    &#x201C;<a class="Sx" href="#At_files">At-files</a>&#x201D; may help with\n    this. <code class="Nm">rgbgfx</code> will warn about any inconsistencies it\n    detects.</p>\n<p class="Pp">Files that are normally outputs (<code class="Fl">-a</code>,\n    <code class="Fl">-p</code>, <code class="Fl">-t</code>) become inputs, and\n    <var class="Ar">file</var> will be written to instead of read from, and thus\n    needs not exist beforehand. Any of these inputs not passed is assumed to be\n    some default:</p>\n<table class="Bl-column">\n  <tr>\n    <td>palettes</td>\n    <td>Unspecified palette data makes <code class="Nm">rgbgfx</code> assume DMG\n      (monochrome Game Boy) mode: a single palette of 4 grays. It is possible to\n      pass palettes using <code class="Fl">-c</code> instead of\n      <code class="Fl">-p</code>.</td>\n  </tr>\n  <tr>\n    <td>tile data</td>\n    <td>Tile data must be provided, as there is no reasonable assumption to fall\n      back on.</td>\n  </tr>\n  <tr>\n    <td>tile map</td>\n    <td>A missing tile map makes <code class="Nm">rgbgfx</code> assume that\n      tiles were not deduplicated, and should be laid out in the order they are\n      stored.</td>\n  </tr>\n  <tr>\n    <td>attribute map</td>\n    <td>Without an attribute map, <code class="Nm">rgbgfx</code> assumes that no\n      tiles were mirrored.</td>\n  </tr>\n</table>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="NOTES"><a class="permalink" href="#NOTES">NOTES</a></h2>\n<p class="Pp">Some flags have had their functionality removed.\n    <code class="Fl">-D</code>, <code class="Fl">-f</code>, and\n    <code class="Fl">-F</code> are now ignored, and <code class="Fl">-h</code>\n    is an alias for the new (and less confusingly named)\n    <code class="Fl">-Z</code>. These will be removed and/or repurposed in\n    future versions of <code class="Nm">rgbgfx</code>, so relying on them is not\n    recommended. The same applies to the corresponding long options.</p>\n<p class="Pp">If you are curious, you may find out that palette generation is an\n    NP-complete problem, so <code class="Nm">rgbgfx</code> does not attempt to\n    find the optimal solution, but instead to find a good one in a reasonable\n    amount of time. It is possible to compute the optimal solution externally\n    (using a solver, for example), and then provide it to\n    <code class="Nm">rgbgfx</code> via <code class="Fl">-c</code>.</p>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="EXAMPLES"><a class="permalink" href="#EXAMPLES">EXAMPLES</a></h2>\n<p class="Pp">The following will only validate the PNG (check its size, that all\n    tiles have a suitable amount of colors, etc.), but output nothing:</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent"><code class="Li">$ rgbgfx\n  src/res/maps/overworld/tileset.png</code></div>\n<p class="Pp">The following will convert the image using the two given palettes\n    (and only those), and store the generated 2bpp tile data in\n    &#x2018;<code class="Li">tileset.2bpp</code>&#x2019;, and the attribute map\n    in &#x2018;<code class="Li">tileset.attrmap</code>&#x2019;.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent"><code class="Li">$ rgbgfx -c \'#ffffff,#8d05de,\n  #dc7905,#000000; #fff,#8d05de, #7e0000 , #000\' -A -o tileset.2bpp\n  tileset.png</code></div>\n<p class="Pp">TODO: more examples.</p>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="BUGS"><a class="permalink" href="#BUGS">BUGS</a></h2>\n<p class="Pp">Please report bugs and mistakes in this man page on\n    <a class="Lk" href="https://github.com/gbdev/rgbds/issues">GitHub</a>. Bug\n    reports and feature requests about RGBDS are also welcome!</p>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="SEE_ALSO"><a class="permalink" href="#SEE_ALSO">SEE\n  ALSO</a></h2>\n<p class="Pp"><a class="Xr" href="./rgbds.7">rgbds(7)</a>,\n    <a class="Xr" href="./rgbasm.1">rgbasm(1)</a>,\n    <a class="Xr" href="./rgblink.1">rgblink(1)</a>,\n    <a class="Xr" href="./rgbfix.1">rgbfix(1)</a>,\n    <a class="Xr" href="./gbz80.7">gbz80(7)</a></p>\n<p class="Pp">The Game Boy hardware reference\n    <a class="Lk" href="https://gbdev.io/pandocs/Rendering.html">Pan Docs</a>,\n    particularly the section about graphics.</p>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="HISTORY"><a class="permalink" href="#HISTORY">HISTORY</a></h2>\n<p class="Pp"><code class="Nm">rgbgfx</code> was originally created by\n    <span class="An">stag019</span> to be included in RGBDS. It was later\n    rewritten by <span class="An">ISSOtm</span>, and is now maintained by a\n    number of contributors at\n    <a class="Lk" href="https://github.com/gbdev/rgbds">https://github.com/gbdev/rgbds</a>.</p>\n</section>\n'}}))}m.isMDXComponent=!0}}]);