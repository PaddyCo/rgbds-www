"use strict";(self.webpackChunkrgbds_www_2=self.webpackChunkrgbds_www_2||[]).push([[9845],{3905:function(e,n,a){a.d(n,{Zo:function(){return d},kt:function(){return m}});var s=a(7294);function t(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function c(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,s)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?c(Object(a),!0).forEach((function(n){t(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,s,t=function(e,n){if(null==e)return{};var a,s,t={},c=Object.keys(e);for(s=0;s<c.length;s++)a=c[s],n.indexOf(a)>=0||(t[a]=e[a]);return t}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(s=0;s<c.length;s++)a=c[s],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var r=s.createContext({}),l=function(e){var n=s.useContext(r),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},d=function(e){var n=l(e.components);return s.createElement(r.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},h=s.forwardRef((function(e,n){var a=e.components,t=e.mdxType,c=e.originalType,r=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),h=l(a),m=t,u=h["".concat(r,".").concat(m)]||h[m]||p[m]||c;return a?s.createElement(u,o(o({ref:n},d),{},{components:a})):s.createElement(u,o({ref:n},d))}));function m(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var c=a.length,o=new Array(c);o[0]=h;var i={};for(var r in n)hasOwnProperty.call(n,r)&&(i[r]=n[r]);i.originalType=e,i.mdxType="string"==typeof e?e:t,o[1]=i;for(var l=2;l<c;l++)o[l]=a[l];return s.createElement.apply(null,o)}return s.createElement.apply(null,a)}h.displayName="MDXCreateElement"},8977:function(e,n,a){a.r(n),a.d(n,{assets:function(){return d},contentTitle:function(){return r},default:function(){return m},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return p}});var s=a(3117),t=a(102),c=(a(7294),a(3905)),o=["components"],i={},r="rgbasm(5) \u2014 language documentation",l={unversionedId:"rgbasm.5",id:"version-v0.4.0/rgbasm.5",title:"rgbasm(5) \u2014 language documentation",description:"",source:"@site/versioned_docs/version-v0.4.0/rgbasm.5.md",sourceDirName:".",slug:"/rgbasm.5",permalink:"/docs/v0.4.0/rgbasm.5",draft:!1,editUrl:"https://github.com/gbdev/rgbds-www/edit/master/versioned_docs/version-v0.4.0/rgbasm.5.md",tags:[],version:"v0.4.0",frontMatter:{},sidebar:"nav",previous:{title:"Release information",permalink:"/docs/v0.4.0/"},next:{title:"gbz80(7) \u2014 CPU opcode reference",permalink:"/docs/v0.4.0/gbz80.7"}},d={},p=[{value:"DESCRIPTION",id:"DESCRIPTION",level:2,children:[]},{value:"SYNTAX",id:"SYNTAX",level:2,children:[]},{value:"EXPRESSIONS",id:"EXPRESSIONS",level:2,children:[{value:"Numeric Formats",id:"Numeric_Formats",level:3,children:[]},{value:"Operators",id:"Operators",level:3,children:[]},{value:"Fixed\u2010point Expressions",id:"Fixed\u2010point_Expressions",level:3,children:[]},{value:"String Expressions",id:"String_Expressions",level:3,children:[]},{value:"Character maps",id:"Character_maps",level:3,children:[]},{value:"Other functions",id:"Other_functions",level:3,children:[]}]},{value:"SECTIONS",id:"SECTIONS",level:2,children:[{value:"Section Stack",id:"Section_Stack",level:3,children:[]},{value:"RAM Code",id:"RAM_Code",level:3,children:[]},{value:"Unionized Sections",id:"Unionized_Sections",level:3,children:[]}]},{value:"SYMBOLS",id:"SYMBOLS",level:2,children:[{value:"Exporting and importing symbols",id:"Exporting_and_importing_symbols",level:3,children:[]},{value:"Purging symbols",id:"Purging_symbols",level:3,children:[]},{value:"Predeclared Symbols",id:"Predeclared_Symbols",level:3,children:[]}]},{value:"DEFINING DATA",id:"DEFINING_DATA",level:2,children:[{value:"Declaring variables in a RAM section",id:"Declaring_variables_in_a_RAM_section",level:3,children:[]},{value:"Defining constant data",id:"Defining_constant_data",level:3,children:[]},{value:"Including binary files",id:"Including_binary_files",level:3,children:[]},{value:"Unions",id:"Unions",level:3,children:[]}]},{value:"THE MACRO LANGUAGE",id:"THE_MACRO_LANGUAGE",level:2,children:[{value:"Invoking macros",id:"Invoking_macros",level:3,children:[]},{value:"Printing things during assembly",id:"Printing_things_during_assembly",level:3,children:[]},{value:"Automatically repeating blocks of code",id:"Automatically_repeating_blocks_of_code",level:3,children:[]},{value:"Aborting the assembly process",id:"Aborting_the_assembly_process",level:3,children:[]},{value:"Including other source files",id:"Including_other_source_files",level:3,children:[]},{value:"Conditional assembling",id:"Conditional_assembling",level:3,children:[]}]},{value:"MISCELLANEOUS",id:"MISCELLANEOUS",level:2,children:[{value:"Changing options while assembling",id:"Changing_options_while_assembling",level:3,children:[]}]},{value:"SEE ALSO",id:"SEE_ALSO",level:2,children:[]},{value:"HISTORY",id:"HISTORY",level:2,children:[]}],h={toc:p};function m(e){var n=e.components,a=(0,t.Z)(e,o);return(0,c.kt)("wrapper",(0,s.Z)({},h,a,{components:n,mdxType:"MDXLayout"}),(0,c.kt)("h1",{id:"rgbasm5--language-documentation"},"rgbasm(5) \u2014 language documentation"),(0,c.kt)("div",{className:"manual-text",dangerouslySetInnerHTML:{__html:'<section class="Sh">\n<h2 class="Sh" id="DESCRIPTION"><a class="permalink" href="#DESCRIPTION">DESCRIPTION</a></h2>\n<p class="Pp">This is the full description of the language used by\n    <a class="Xr" href="./rgbasm.1">rgbasm(1)</a>. The description of the\n    instructions supported by the Game Boy CPU is in\n    <a class="Xr" href="./gbz80.7">gbz80(7)</a>.</p>\n<p class="Pp">It is strongly recommended to have some familiarity with the Game\n    Boy hardware before reading this document. RGBDS is specifically targeted at\n    the Game Boy, and thus a lot of its features tie directly to its concepts.\n    This document is not intended to be a Game Boy hardware reference.</p>\n<p class="Pp">Generally, &#x201C;the linker&#x201D; will refer to\n    <a class="Xr" href="./rgblink.1">rgblink(1)</a>, but any program that\n    processes RGB object files (described in\n    <a class="Xr" href="./rgbds.5">rgbds(5)</a>) can be used in its place.</p>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="SYNTAX"><a class="permalink" href="#SYNTAX">SYNTAX</a></h2>\n<p class="Pp">The syntax is line&#x2010;based, just as in any other assembler,\n    meaning that you do one instruction or pseudo&#x2010;op per line:</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent"><code class="Li">[<var class="Ar">label</var>]\n  [<var class="Ar">instruction</var>]\n  [<var class="Ar">;&#x00A0;comment</var>]</code></div>\n<p class="Pp">Example:</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>John: ld a,87 ;Weee</pre>\n</div>\n<p class="Pp">All reserved keywords (pseudo&#x2010;ops, mnemonics, registers\n    etc.) are case&#x2010;insensitive, all identifiers (symbol names) are\n    case-sensitive.</p>\n<p class="Pp" id="always">Comments are used to give humans information about the\n    code, such as explanations. The assembler\n    <a class="permalink" href="#always"><i class="Em">always</i></a> ignores\n    comments and their contents.</p>\n<p class="Pp">There are two syntaxes for comments. The most common is that\n    anything that follows a semicolon &#x2018;<code class="Li">;</code>&#x2019;\n    not inside a string, is a comment until the end of the line. The other is\n    that lines beginning with a &#x2018;<code class="Li">*</code>&#x2019; (not\n    even spaces before it) are ignored. This second syntax is deprecated (will\n    be removed in a future version) and should be replaced with the first\n  one.</p>\n<p class="Pp">Sometimes lines can be too long and it may be necessary to split\n    them. To do so, put a backslash at the end of the line:</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>    DB 1, 2, 3,&#x00A0;\\\n       4, 5, 6,&#x00A0;\\&#x00A0;;&#x00A0;Put it before any comments\n       7, 8, 9</pre>\n</div>\n<p class="Pp" id="STRCAT">This works anywhere in the code except inside of\n    strings. To split strings it is needed to use\n    <a class="permalink" href="#STRCAT"><code class="Fn">STRCAT</code></a>()\n    like this:</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>    db STRCAT(&quot;Hello &quot;,&#x00A0;\\\n              &quot;world!&quot;)</pre>\n</div>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="EXPRESSIONS"><a class="permalink" href="#EXPRESSIONS">EXPRESSIONS</a></h2>\n<p class="Pp">An expression can be composed of many things. Numerical\n    expressions are always evaluated using signed 32-bit math. Zero is\n    considered to be the only &quot;false&quot; number, all non-zero numbers\n    (including negative) are &quot;true&quot;.</p>\n<p class="Pp">An expression is said to be &quot;constant&quot; if\n    <code class="Nm">rgbasm</code> knows its value. This is generally always the\n    case, unless a label is involved, as explained in the\n    <a class="Sx" href="#SYMBOLS">SYMBOLS</a> section.</p>\n<p class="Pp">The instructions in the macro-language generally require constant\n    expressions.</p>\n<section class="Ss">\n<h3 class="Ss" id="Numeric_Formats"><a class="permalink" href="#Numeric_Formats">Numeric\n  Formats</a></h3>\n<p class="Pp">There are a number of numeric formats.</p>\n<table class="Bl-column Bd-indent">\n  <tr id="Prefix">\n    <th>Format type</th>\n    <td><a class="permalink" href="#Prefix"><b class="Sy">Prefix</b></a></td>\n    <td><a class="permalink" href="#Accepted"><b class="Sy" id="Accepted">Accepted\n      characters</b></a></td>\n  </tr>\n  <tr>\n    <td>Hexadecimal</td>\n    <td>$</td>\n    <td>0123456789ABCDEF</td>\n  </tr>\n  <tr>\n    <td>Decimal</td>\n    <td>none</td>\n    <td>0123456789</td>\n  </tr>\n  <tr>\n    <td>Octal</td>\n    <td>&amp;</td>\n    <td>01234567</td>\n  </tr>\n  <tr>\n    <td>Binary</td>\n    <td>%</td>\n    <td>01</td>\n  </tr>\n  <tr>\n    <td>Fixed point (16.16)</td>\n    <td>none</td>\n    <td>01234.56789</td>\n  </tr>\n  <tr>\n    <td>Character constant</td>\n    <td>none</td>\n    <td>&quot;ABYZ&quot;</td>\n  </tr>\n  <tr>\n    <td>Gameboy graphics</td>\n    <td>`</td>\n    <td>0123</td>\n  </tr>\n</table>\n<p class="Pp">The &quot;character constant&quot; form yields the value the\n    character maps to in the current charmap. For example, by default (refer to\n    <a class="Xr" href="https://man7.org/linux/man-pages/man7/ascii.7.html">ascii(7)</a>)\n    &#x2018;&quot;A&quot;&#x2019; yields 65. See\n    <a class="Sx" href="#Character_maps">Character maps</a> for information on\n    charmaps.</p>\n<p class="Pp">The last one, Gameboy graphics, is quite interesting and useful.\n    After the backtick, 8 digits between 0 and 3 are expected, corresponding to\n    pixel values. The resulting value is the two bytes of tile data that would\n    produce that row of pixels. For example, &#x2018;`01012323&#x2019; is\n    equivalent to &#x2018;$0F55&#x2019;.</p>\n<p class="Pp">You can also use symbols, which are implicitly replaced with their\n    value.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Operators"><a class="permalink" href="#Operators">Operators</a></h3>\n<p class="Pp">A great number of operators you can use in expressions are\n    available (listed from highest to lowest precedence):</p>\n<table class="Bl-column Bd-indent">\n  <tr id="Operator">\n    <td><a class="permalink" href="#Operator"><b class="Sy">Operator</b></a></td>\n    <td><a class="permalink" href="#Meaning"><b class="Sy" id="Meaning">Meaning</b></a></td>\n  </tr>\n  <tr id="(">\n    <td><a class="permalink" href="#("><code class="Li">( )</code></a></td>\n    <td>Precedence override</td>\n  </tr>\n  <tr id="FUNC()">\n    <td><a class="permalink" href="#FUNC()"><code class="Li">FUNC()</code></a></td>\n    <td>Built-in function call</td>\n  </tr>\n  <tr id="_">\n    <td><a class="permalink" href="#_"><code class="Li">~ + -</code></a></td>\n    <td>Unary complement/plus/minus</td>\n  </tr>\n  <tr id="*">\n    <td><a class="permalink" href="#*"><code class="Li">* / %</code></a></td>\n    <td>Multiply/divide/modulo</td>\n  </tr>\n  <tr id="__">\n    <td><a class="permalink" href="#__"><code class="Li">&lt;&lt;\n      &gt;&gt;</code></a></td>\n    <td>Shift left/right</td>\n  </tr>\n  <tr id="&amp;">\n    <td><a class="permalink" href="#&amp;"><code class="Li">&amp; |\n      ^</code></a></td>\n    <td>Binary and/or/xor</td>\n  </tr>\n  <tr id="+">\n    <td><a class="permalink" href="#+"><code class="Li">+ -</code></a></td>\n    <td>Add/subtract</td>\n  </tr>\n  <tr id="!=">\n    <td><a class="permalink" href="#!="><code class="Li">!= == &lt;= &gt;= &lt;\n      &gt;</code></a></td>\n    <td>Comparison</td>\n  </tr>\n  <tr id="&amp;&amp;">\n    <td><a class="permalink" href="#&amp;&amp;"><code class="Li">&amp;&amp;\n      ||</code></a></td>\n    <td>Boolean and/or</td>\n  </tr>\n  <tr id="!">\n    <td><a class="permalink" href="#!"><code class="Li">!</code></a></td>\n    <td>Unary not</td>\n  </tr>\n</table>\n<p class="Pp"><code class="Ic">~</code> complements a value by inverting all its\n    bits.</p>\n<p class="Pp"><code class="Ic">%</code> is used to get the remainder of the\n    corresponding division. &#x2018;5 % 2&#x2019; is 1.</p>\n<p class="Pp">Shifting works by shifting all bits in the left operand either\n    left (&#x2018;&lt;&lt;&#x2019;) or right (&#x2018;&gt;&gt;&#x2019;) by the\n    right operand\'s amount. When shifting left, all newly-inserted bits are\n    reset; when shifting right, they are copies of the original most significant\n    bit instead. This makes &#x2018;a &lt;&lt; b&#x2019; and &#x2018;a &gt;&gt;\n    b&#x2019; equivalent to multiplying and dividing by 2 to the power of b,\n    respectively.</p>\n<p class="Pp">Comparison operators return 0 if the comparison is false, and 1\n    otherwise.</p>\n<p class="Pp">Unlike in a lot of languages, and for technical reasons,\n    <code class="Nm">rgbasm</code> still evaluates both operands of\n    &#x2018;&amp;&amp;&#x2019; and &#x2018;||&#x2019;.</p>\n<p class="Pp">! returns 1 if the operand was 0, and 1 otherwise.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Fixed"><a class="permalink" href="#Fixed">Fixed&#x2010;point\n  Expressions</a></h3>\n<p class="Pp">Fixed-point numbers are basically normal (32-bit) integers, which\n    count 65536th\'s instead of entire units, offering better precision than\n    integers but limiting the range of values. The upper 16 bits are used for\n    the integer part and the lower 16 bits are used for the fraction (65536ths).\n    Since they are still akin to integers, you can use them in normal integer\n    expressions, and some integer operators like &#x2018;+&#x2019; and\n    &#x2018;-&#x2019; don\'t care whether the operands are integers or\n    fixed-point. You can easily truncate a fixed-point number into an integer by\n    shifting it right by 16 bits. It follows that you can convert an integer to\n    a fixed-point number by shifting it left.</p>\n<p class="Pp">The following functions are designed to operate with fixed-point\n    numbers:</p>\n<table class="Bl-column Bd-indent">\n  <tr id="Name">\n    <td><a class="permalink" href="#Name"><b class="Sy">Name</b></a></td>\n    <td><a class="permalink" href="#Operation"><b class="Sy" id="Operation">Operation</b></a></td>\n  </tr>\n  <tr id="DIV">\n    <td><a class="permalink" href="#DIV"><code class="Fn">DIV</code></a>(<var class="Fa">x</var>,\n      <var class="Fa">y</var>)</td>\n    <td>\n    <math class="eqn">\n      <mrow><mi>x</mi><mo>&#x00F7;</mo><mi>y</mi></mrow>\n    </math>\n    </td>\n  </tr>\n  <tr id="MUL">\n    <td><a class="permalink" href="#MUL"><code class="Fn">MUL</code></a>(<var class="Fa">x</var>,\n      <var class="Fa">y</var>)</td>\n    <td>\n    <math class="eqn">\n      <mrow><mi>x</mi><mo>&#x00D7;</mo><mi>y</mi></mrow>\n    </math>\n    </td>\n  </tr>\n  <tr id="SIN">\n    <td><a class="permalink" href="#SIN"><code class="Fn">SIN</code></a>(<var class="Fa">x</var>)</td>\n    <td>\n    <math class="eqn">\n      <mrow><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow>\n    </math>\n    </td>\n  </tr>\n  <tr id="COS">\n    <td><a class="permalink" href="#COS"><code class="Fn">COS</code></a>(<var class="Fa">x</var>)</td>\n    <td>\n    <math class="eqn">\n      <mrow><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow>\n    </math>\n    </td>\n  </tr>\n  <tr id="TAN">\n    <td><a class="permalink" href="#TAN"><code class="Fn">TAN</code></a>(<var class="Fa">x</var>)</td>\n    <td>\n    <math class="eqn">\n      <mrow><mi>tan</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow>\n    </math>\n    </td>\n  </tr>\n  <tr id="ASIN">\n    <td><a class="permalink" href="#ASIN"><code class="Fn">ASIN</code></a>(<var class="Fa">x</var>)</td>\n    <td>\n    <math class="eqn">\n      <mrow><mi>asin</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow>\n    </math>\n    </td>\n  </tr>\n  <tr id="ACOS">\n    <td><a class="permalink" href="#ACOS"><code class="Fn">ACOS</code></a>(<var class="Fa">x</var>)</td>\n    <td>\n    <math class="eqn">\n      <mrow><mi>acos</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow>\n    </math>\n    </td>\n  </tr>\n  <tr id="ATAN">\n    <td><a class="permalink" href="#ATAN"><code class="Fn">ATAN</code></a>(<var class="Fa">x</var>)</td>\n    <td>\n    <math class="eqn">\n      <mrow><mi>atan</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow>\n    </math>\n    </td>\n  </tr>\n  <tr id="ATAN2">\n    <td><a class="permalink" href="#ATAN2"><code class="Fn">ATAN2</code></a>(<var class="Fa">x</var>,\n      <var class="Fa">y</var>)</td>\n    <td>Angle between\n    <math class="eqn">\n      <mrow><mo>(</mo><mi>x</mi><mo>,</mo><mi>y</mi><mo>)</mo></mrow>\n    </math>\n     and\n    <math class="eqn">\n      <mrow><mo>(</mo><mn>1</mn><mo>,</mo><mn>0</mn><mo>)</mo></mrow>\n    </math>\n    </td>\n  </tr>\n</table>\n<p class="Pp">These functions are useful for automatic generation of various\n    tables. Example: assuming a circle has 65536.0 degrees, and sine values are\n    in range [-1.0 ;&#x00A0;1.0]:</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>;&#x00A0;--\n;&#x00A0;-- Generate a 256-byte sine table with values between 0 and 128\n;&#x00A0;--\nANGLE = 0.0\n      REPT 256\n      db MUL(64.0, SIN(ANGLE) + 1.0) &gt;&gt; 16\nANGLE = ANGLE + 256.0 ; 256 = 65536 / table_len, with table_len = 256\n      ENDR</pre>\n</div>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="String_Expressions"><a class="permalink" href="#String_Expressions">String\n  Expressions</a></h3>\n<p class="Pp">The most basic string expression is any number of characters\n    contained in double quotes (&#x2018;<code class="Li">&quot;for\n    instance&quot;</code>&#x2019;). The backslash character\n    &#x2018;<code class="Li">\\</code>&#x2019; is special in that it causes the\n    character following it to be &#x201C;escaped&#x201D;, meaning that it is\n    treated differently from normal. There are a number of escape sequences you\n    can use within a string:</p>\n<table class="Bl-column Bd-indent">\n  <tr id="String">\n    <td><a class="permalink" href="#String"><b class="Sy">String</b></a></td>\n    <td><a class="permalink" href="#Meaning~2"><b class="Sy" id="Meaning~2">Meaning</b></a></td>\n  </tr>\n  <tr>\n    <td>&#x2018;<code class="Li">\\\\</code>&#x2019;</td>\n    <td>Produces a backslash</td>\n  </tr>\n  <tr>\n    <td>&#x2018;<code class="Li">\\&quot;</code>&#x2019;</td>\n    <td>Produces a double quote without terminating</td>\n  </tr>\n  <tr>\n    <td>&#x2018;<code class="Li">\\,</code>&#x2019;</td>\n    <td>Comma</td>\n  </tr>\n  <tr>\n    <td>&#x2018;<code class="Li">\\{</code>&#x2019;</td>\n    <td>Curly bracket left</td>\n  </tr>\n  <tr>\n    <td>&#x2018;<code class="Li">\\}</code>&#x2019;</td>\n    <td>Curly bracket right</td>\n  </tr>\n  <tr>\n    <td>&#x2018;<code class="Li">\\n</code>&#x2019;</td>\n    <td>Newline ($0A)</td>\n  </tr>\n  <tr>\n    <td>&#x2018;<code class="Li">\\r</code>&#x2019;</td>\n    <td>Carriage return ($0D)</td>\n  </tr>\n  <tr>\n    <td>&#x2018;<code class="Li">\\t</code>&#x2019;</td>\n    <td>Tab ($09)</td>\n  </tr>\n  <tr>\n    <td>&quot;\\1&quot; &#x2013; &quot;\\9&quot;</td>\n    <td>Macro argument (Only the body of a macro, see\n      <a class="Sx" href="#Invoking_macros">Invoking macros</a>)</td>\n  </tr>\n  <tr>\n    <td>&#x2018;<code class="Li">\\@</code>&#x2019;</td>\n    <td>Label name suffix (Only in the body of macros and REPTs)</td>\n  </tr>\n</table>\n(Note that some of those can be used outside of strings, when noted further in\n  this document.)\n<p class="Pp">A funky feature is\n    &#x2018;<code class="Li">{symbol}</code>&#x2019; within a string, called\n    &#x201C;symbol interpolation&#x201D;. This will paste\n    <var class="Ar">symbol</var>\'s contents as a string. If it\'s a string\n    symbol, the string is simply inserted. If it\'s a numeric symbol, its value\n    is converted to hexadecimal notation with a dollar sign &#x2018;$&#x2019;\n    prepended.</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>TOPIC equs &quot;life, the universe, and everything&quot;\nANSWER = 42\n;&#x00A0;Prints &quot;The answer to life, the universe, and everything is $2A&quot;\nPRINTT &quot;The answer to {TOPIC} is {ANSWER}\\n&quot;</pre>\n</div>\n<p class="Pp">Symbol interpolations can be nested, too!</p>\n<p class="Pp">It\'s possible to change the way numeric symbols are converted by\n    specifying a print type like so:\n    &#x2018;<code class="Li">{d:symbol}</code>&#x2019;. Valid print types\n  are:</p>\n<table class="Bl-column Bd-indent">\n  <tr id="Print">\n    <td><a class="permalink" href="#Print"><b class="Sy">Print type</b></a></td>\n    <td><a class="permalink" href="#Format"><b class="Sy" id="Format">Format</b></a></td>\n    <td><a class="permalink" href="#Example"><b class="Sy" id="Example">Example</b></a></td>\n  </tr>\n  <tr>\n    <td>&#x2018;<code class="Li">d</code>&#x2019;</td>\n    <td>Decimal</td>\n    <td>42</td>\n  </tr>\n  <tr>\n    <td>&#x2018;<code class="Li">x</code>&#x2019;</td>\n    <td>Lowercase hexadecimal</td>\n    <td>2a</td>\n  </tr>\n  <tr>\n    <td>&#x2018;<code class="Li">X</code>&#x2019;</td>\n    <td>Uppercase hexadecimal</td>\n    <td>2A</td>\n  </tr>\n  <tr>\n    <td>&#x2018;<code class="Li">b</code>&#x2019;</td>\n    <td>Binary</td>\n    <td>101010</td>\n  </tr>\n</table>\n<p class="Pp">Note that print types should only be used with numeric values, not\n    strings.</p>\n<p class="Pp">HINT: The <code class="Ic">{symbol}</code> construct can also be\n    used outside strings. The symbol\'s value is again inserted directly.</p>\n<p class="Pp">The following functions operate on string expressions. Most of\n    them return a string, however some of these functions actually return an\n    integer and can be used as part of an integer expression!</p>\n<table class="Bl-column">\n  <tr id="Name~2">\n    <td><a class="permalink" href="#Name~2"><b class="Sy">Name</b></a></td>\n    <td><a class="permalink" href="#Operation~2"><b class="Sy" id="Operation~2">Operation</b></a></td>\n  </tr>\n  <tr id="STRLEN">\n    <td><a class="permalink" href="#STRLEN"><code class="Fn">STRLEN</code></a>(<var class="Fa">string</var>)</td>\n    <td>Returns the number of characters in <var class="Ar">string</var>.</td>\n  </tr>\n  <tr>\n    <td><code class="Fn">STRCAT</code>(<var class="Fa">str1</var>,\n      <var class="Fa">str2</var>)</td>\n    <td>Appends <var class="Ar">str2</var> <span class="No">to</span>\n      <var class="Ar">str1</var>.</td>\n  </tr>\n  <tr id="STRCMP">\n    <td><a class="permalink" href="#STRCMP"><code class="Fn">STRCMP</code></a>(<var class="Fa">str1</var>,\n      <var class="Fa">str2</var>)</td>\n    <td>Returns negative if <var class="Ar">str1</var> <span class="No">is\n      alphabetically lower than</span> <var class="Ar">str2</var> ,\n      <span class="No">zero if they match, positive if</span>\n      <var class="Ar">str1</var> <span class="No">is greater than</span>\n      <var class="Ar">str2</var>.</td>\n  </tr>\n  <tr id="STRIN">\n    <td><a class="permalink" href="#STRIN"><code class="Fn">STRIN</code></a>(<var class="Fa">str1</var>,\n      <var class="Fa">str2</var>)</td>\n    <td>Returns the position of <var class="Ar">str2</var>\n      <span class="No">in</span> <var class="Ar">str1</var> <span class="No">or\n      zero if it\'s not present</span> (first character is position 1).</td>\n  </tr>\n  <tr id="STRSUB">\n    <td><a class="permalink" href="#STRSUB"><code class="Fn">STRSUB</code></a>(<var class="Fa">str</var>,\n      <var class="Fa">pos</var>, <var class="Fa">len</var>)</td>\n    <td>Returns a substring from <var class="Ar">str</var>\n      <span class="No">starting at</span> <var class="Ar">pos</var> (first\n      character is position 1) and <var class="Ar">len</var>\n      <span class="No">characters long.</span></td>\n  </tr>\n  <tr id="STRUPR">\n    <td><a class="permalink" href="#STRUPR"><code class="Fn">STRUPR</code></a>(<var class="Fa">str</var>)</td>\n    <td>Converts all characters in <var class="Ar">str</var> <span class="No">to\n      capitals and returns the new string.</span></td>\n  </tr>\n  <tr id="STRLWR">\n    <td><a class="permalink" href="#STRLWR"><code class="Fn">STRLWR</code></a>(<var class="Fa">str</var>)</td>\n    <td>Converts all characters in <var class="Ar">str</var> <span class="No">to\n      lower case and returns the new string.</span></td>\n  </tr>\n</table>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Character_maps"><a class="permalink" href="#Character_maps">Character\n  maps</a></h3>\n<p class="Pp">When writing text that is meant to be displayed in the Game Boy,\n    the characters used in the source code may have a different encoding than\n    the default of ASCII. For example, the tiles used for uppercase letters may\n    be placed starting at tile index 128, which makes it difficult to add text\n    strings to the ROM.</p>\n<p class="Pp">Character maps allow mapping strings up to 16 characters long to\n    an abitrary 8-bit value:</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>CHARMAP &quot;&lt;LF&gt;&quot;, 10\nCHARMAP &quot;&amp;iacute&quot;, 20\nCHARMAP &quot;A&quot;, 128</pre>\n</div>\nBy default, a character map contains ASCII encoding.\n<p class="Pp">It is possible to create multiple character maps and then switch\n    between them as desired. This can be used to encode debug information in\n    ASCII and use a different encoding for other purposes, for example.\n    Initially, there is one character map called &#x2018;main&#x2019; and it is\n    automatically selected as the current character map from the beginning.\n    There is also a character map stack that can be used to save and restore\n    which character map is currently active.</p>\n<table class="Bl-column">\n  <tr id="Command">\n    <td><a class="permalink" href="#Command"><b class="Sy">Command</b></a></td>\n    <td><a class="permalink" href="#Meaning~3"><b class="Sy" id="Meaning~3">Meaning</b></a></td>\n  </tr>\n  <tr id="NEWCHARMAP">\n    <td><a class="permalink" href="#NEWCHARMAP"><code class="Ic">NEWCHARMAP</code></a>\n      <var class="Ar">name</var></td>\n    <td>Creates a new, empty character map called\n      <var class="Ar">name</var>.</td>\n  </tr>\n  <tr id="NEWCHARMAP~2">\n    <td><a class="permalink" href="#NEWCHARMAP~2"><code class="Ic">NEWCHARMAP</code></a>\n      <var class="Ar">name</var>, <var class="Ar">basename</var></td>\n    <td>Creates a new character map called <var class="Ar">name</var>,\n      <span class="No">copied from character map</span>\n      <var class="Ar">basename</var>.</td>\n  </tr>\n  <tr id="SETCHARMAP">\n    <td><a class="permalink" href="#SETCHARMAP"><code class="Ic">SETCHARMAP</code></a>\n      <var class="Ar">name</var></td>\n    <td>Switch to character map <var class="Ar">name</var>.</td>\n  </tr>\n  <tr id="PUSHC">\n    <td><a class="permalink" href="#PUSHC"><code class="Ic">PUSHC</code></a></td>\n    <td>Push the current character map onto the stack.</td>\n  </tr>\n  <tr id="POPC">\n    <td><a class="permalink" href="#POPC"><code class="Ic">POPC</code></a></td>\n    <td>Pop a character map off the stack and switch to it.</td>\n  </tr>\n</table>\n<p class="Pp"><b class="Sy">Note:</b> Character maps affect all strings in the\n    file from the point in which they are defined, until switching to a\n    different character map. This means that any string that the code may want\n    to print as debug information will also be affected by it.</p>\n<p class="Pp"><b class="Sy">Note:</b> The output value of a mapping can be 0. If\n    this happens, the assembler will treat this as the end of the string and the\n    rest of it will be trimmed.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Other_functions"><a class="permalink" href="#Other_functions">Other\n  functions</a></h3>\n<p class="Pp">There are a few other functions that do various useful things:</p>\n<table class="Bl-column">\n  <tr id="Name~3">\n    <td><a class="permalink" href="#Name~3"><b class="Sy">Name</b></a></td>\n    <td><a class="permalink" href="#Operation~3"><b class="Sy" id="Operation~3">Operation</b></a></td>\n  </tr>\n  <tr id="BANK">\n    <td><a class="permalink" href="#BANK"><code class="Fn">BANK</code></a>(<var class="Fa">arg</var>)</td>\n    <td>Returns a bank number. If <var class="Ar">arg</var> is the symbol\n      <code class="Ic">@</code>, this function returns the bank of the current\n      section. If <var class="Ar">arg</var> is a string, it returns the bank of\n      the section that has that name. If <var class="Ar">arg</var> is a label,\n      it returns the bank number the label is in. The result may be constant if\n      <code class="Nm">rgbasm</code> is able to compute it.</td>\n  </tr>\n  <tr id="DEF">\n    <td><a class="permalink" href="#DEF"><code class="Fn">DEF</code></a>(<var class="Fa">label</var>)</td>\n    <td>Returns TRUE (1) if <var class="Ar">label</var> has been defined, FALSE\n      (0) otherwise. String symbols are not expanded within the\n      parentheses.</td>\n  </tr>\n  <tr id="HIGH">\n    <td><a class="permalink" href="#HIGH"><code class="Fn">HIGH</code></a>(<var class="Fa">arg</var>)</td>\n    <td>Returns the top 8 bits of the operand if <var class="Ar">arg</var>\n      <span class="No">is a label or constant, or the top 8-bit register if it\n      is a 16-bit register.</span></td>\n  </tr>\n  <tr id="LOW">\n    <td><a class="permalink" href="#LOW"><code class="Fn">LOW</code></a>(<var class="Fa">arg</var>)</td>\n    <td>Returns the bottom 8 bits of the operand if <var class="Ar">arg</var>\n      <span class="No">is a label or constant, or the bottom 8-bit register if\n      it is a 16-bit register</span> (<code class="Cm">AF</code>\n      <span class="No">isn\'t a valid register for this function</span>).</td>\n  </tr>\n  <tr id="ISCONST">\n    <td><a class="permalink" href="#ISCONST"><code class="Fn">ISCONST</code></a>(<var class="Fa">arg</var>)</td>\n    <td>Returns 1 if <var class="Ar">arg</var>\'s value is known by RGBASM (e.g.\n      if it can be an argument to <code class="Ic">IF</code>), or 0 if only\n      RGBLINK can compute its value.</td>\n  </tr>\n</table>\n</section>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="SECTIONS"><a class="permalink" href="#SECTIONS">SECTIONS</a></h2>\n<p class="Pp">Before you can start writing code, you must define a section. This\n    tells the assembler what kind of information follows and, if it is code,\n    where to put it.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent"><code class="Li">SECTION <var class="Ar">name</var>,\n  <var class="Ar">type</var></code></div>\n<div class="Bd Bd-indent"><code class="Li">SECTION <var class="Ar">name</var>,\n  <var class="Ar">type</var>, <var class="Ar">options</var></code></div>\n<div class="Bd Bd-indent"><code class="Li">SECTION <var class="Ar">name</var>,\n  <var class="Ar">type</var>[<var class="Ar">addr</var>]</code></div>\n<div class="Bd Bd-indent"><code class="Li">SECTION <var class="Ar">name</var>,\n  <var class="Ar">type</var>[<var class="Ar">addr</var>],\n  <var class="Ar">options</var></code></div>\n<p class="Pp"><var class="Ar">name</var> is a string enclosed in double quotes,\n    and can be a new name or the name of an existing section. All sections\n    assembled at the same time that have the same name are considered to be the\n    same section, and their code is put together in the object file generated by\n    the assembler. If the type doesn\'t match, an error occurs. All other\n    sections must have a unique name, even in different source files, or the\n    linker will treat it as an error.</p>\n<p class="Pp">Possible section <var class="Ar">type</var>s are as follows:</p>\n<dl class="Bl-tag">\n  <dt id="ROM0"><a class="permalink" href="#ROM0"><code class="Ic">ROM0</code></a></dt>\n  <dd>A ROM section. <var class="Ar">addr</var> can range from\n      <span class="Ad">$0000</span> to <span class="Ad">$3FFF</span>, or\n      <span class="Ad">$0000</span> to <span class="Ad">$7FFF</span> if tiny ROM\n      mode is enabled in the linker.</dd>\n  <dt id="ROMX"><a class="permalink" href="#ROMX"><code class="Ic">ROMX</code></a></dt>\n  <dd>A banked ROM section. <var class="Ar">addr</var> can range from\n      <span class="Ad">$4000</span> to <span class="Ad">$7FFF</span>.\n      <var class="Ar">bank</var> can range from 1 to 511. Becomes an alias for\n      <code class="Ic">ROM0</code> if tiny ROM mode is enabled in the\n    linker.</dd>\n  <dt id="VRAM"><a class="permalink" href="#VRAM"><code class="Ic">VRAM</code></a></dt>\n  <dd>A banked video RAM section. <var class="Ar">addr</var> can range from\n      <span class="Ad">$8000</span> to <span class="Ad">$9FFF</span>.\n      <var class="Ar">bank</var> can be 0 or 1, but bank 1 is unavailable if DMG\n      mode is enabled in the linker.</dd>\n  <dt id="SRAM"><a class="permalink" href="#SRAM"><code class="Ic">SRAM</code></a></dt>\n  <dd>A banked external (save) RAM section. <var class="Ar">addr</var> can range\n      from <span class="Ad">$A000</span> to <span class="Ad">$BFFF</span>.\n      <var class="Ar">bank</var> can range from 0 to 15.</dd>\n  <dt id="WRAM0"><a class="permalink" href="#WRAM0"><code class="Ic">WRAM0</code></a></dt>\n  <dd>A general-purpose RAM section. <var class="Ar">addr</var> can range from\n      <span class="Ad">$C000</span> to <span class="Ad">$CFFF</span>, or\n      <span class="Ad">$C000</span> to <span class="Ad">$DFFF</span> if WRAM0\n      mode is enabled in the linker.</dd>\n  <dt id="WRAMX"><a class="permalink" href="#WRAMX"><code class="Ic">WRAMX</code></a></dt>\n  <dd>A banked general-purpose RAM section. <var class="Ar">addr</var> can range\n      from <span class="Ad">$D000</span> to <span class="Ad">$DFFF</span>.\n      <var class="Ar">bank</var> can range from 1 to 7. Becomes an alias for\n      <code class="Ic">WRAM0</code> if WRAM0 mode is enabled in the linker.</dd>\n  <dt id="OAM"><a class="permalink" href="#OAM"><code class="Ic">OAM</code></a></dt>\n  <dd>An object attribute RAM section. <var class="Ar">addr</var> can range from\n      <span class="Ad">$FE00</span> to <span class="Ad">$FE9F</span>.</dd>\n  <dt id="HRAM"><a class="permalink" href="#HRAM"><code class="Ic">HRAM</code></a></dt>\n  <dd>A high RAM section. <var class="Ar">addr</var> can range from\n      <span class="Ad">$FF80</span> to <span class="Ad">$FFFE</span>.\n    <p class="Pp" id="Note"><a class="permalink" href="#Note"><b class="Sy">Note</b></a>:\n        While <code class="Nm">rgbasm</code> will automatically optimize\n        <code class="Ic">ld</code> instructions to the smaller and faster\n        <code class="Ic">ldh</code> (see\n        <a class="Xr" href="./gbz80.7">gbz80(7)</a>) whenever possible, it is\n        generally unable to do so when a label is involved. Using the\n        <code class="Ic">ldh</code> instruction directly is recommended. This\n        forces the assembler to emit a <code class="Ic">ldh</code> instruction\n        and the linker to check if the value is in the correct range.</p>\n  </dd>\n</dl>\n<p class="Pp">Since RGBDS produces ROMs, code and data can only be placed in\n    <code class="Ic">ROM0</code> and <code class="Ic">ROMX</code> sections. To\n    put some in RAM, have it stored in ROM, and copy it to RAM.</p>\n<p class="Pp"><var class="Ar">option</var>s are comma-separated and may\n  include:</p>\n<dl class="Bl-tag">\n  <dt id="BANK~2"><a class="permalink" href="#BANK~2"><code class="Ic">BANK</code></a>[<var class="Ar">bank</var>]</dt>\n  <dd>Specify which <var class="Ar">bank</var> for the linker to place the\n      section in. See above for possible values for <var class="Ar">bank</var>,\n      depending on <var class="Ar">type</var>.</dd>\n  <dt id="ALIGN"><a class="permalink" href="#ALIGN"><code class="Ic">ALIGN</code></a>[<var class="Ar">align</var>]</dt>\n  <dd>Place the section at an address whose <var class="Ar">align</var>\n      least&#x2010;significant bits are zero. This option can be used with\n      <var class="Ar">addr</var>, as long as they don\'t contradict\n    eachother.</dd>\n</dl>\n<p class="Pp">If [<var class="Ar">addr</var>] is not specified, the section is\n    considered &#x201C;floating&#x201D;; the linker will automatically calculate\n    an appropriate address for the section. Similarly, if\n    <code class="Ic">BANK</code>[<var class="Ar">bank</var>] is not specified,\n    the linker will automatically find a bank with enough space.</p>\n<p class="Pp">Sections can also be placed by using a linker script file. The\n    format is described in <a class="Xr" href="./rgblink.5">rgblink(5)</a>. They\n    allow the user to place floating sections in the desired bank in the order\n    specified in the script. This is useful if the sections can\'t be placed at\n    an address manually because the size may change, but they have to be\n    together.</p>\n<p class="Pp">Section examples:</p>\n<ul class="Bl-item">\n  <li>\n    <div class="Bd Pp Bd-indent Li">\n    <pre>SECTION &quot;CoolStuff&quot;,ROMX</pre>\n    </div>\n    This switches to the section called &#x201C;CoolStuff&#x201D;, creating it\n      if it doesn\'t already exist. It can end up in any ROM bank. Code and data\n      may follow.</li>\n  <li>If it is needed, the the base address of the section can be specified:\n    <div class="Bd Pp Bd-indent Li">\n    <pre>SECTION &quot;CoolStuff&quot;,ROMX[$4567]</pre>\n    </div>\n  </li>\n  <li>An example with a fixed bank:\n    <div class="Bd Pp Bd-indent Li">\n    <pre>SECTION &quot;CoolStuff&quot;,ROMX[$4567],BANK[3]</pre>\n    </div>\n  </li>\n  <li>And if you want to force only the section\'s bank, and not its position\n      within the bank, that\'s also possible:\n    <div class="Bd Pp Bd-indent Li">\n    <pre>SECTION &quot;CoolStuff&quot;,ROMX,BANK[7]</pre>\n    </div>\n  </li>\n  <li>Alignment examples: The first one could be useful for defining an OAM\n      buffer to be DMA\'d, since it must be aligned to 256 bytes. The second\n      could also be appropriate for GBC HDMA, or for an optimized copy code that\n      requires alignment.\n    <div class="Bd Pp Bd-indent Li">\n    <pre>SECTION &quot;OAM Data&quot;,WRAM0,ALIGN[8] ;&#x00A0;align to 256 bytes\nSECTION &quot;VRAM Data&quot;,ROMX,BANK[2],ALIGN[4] ;&#x00A0;align to 16 bytes</pre>\n    </div>\n  </li>\n</ul>\n<section class="Ss">\n<h3 class="Ss" id="Section_Stack"><a class="permalink" href="#Section_Stack">Section\n  Stack</a></h3>\n<p class="Pp"><code class="Ic">POPS</code> and <code class="Ic">PUSHS</code>\n    provide the interface to the section stack. The number of entries in the\n    stack is limited only by the amount of memory in your machine.</p>\n<p class="Pp"><code class="Ic">PUSHS</code> will push the current section\n    context on the section stack. <code class="Ic">POPS</code> can then later be\n    used to restore it. Useful for defining sections in included files when you\n    don\'t want to override the section context at the point the file was\n    included.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="RAM_Code"><a class="permalink" href="#RAM_Code">RAM\n  Code</a></h3>\n<p class="Pp">Sometimes you want to have some code in RAM. But then you can\'t\n    simply put it in a RAM section, you have to store it in ROM and copy it to\n    RAM at some point.</p>\n<p class="Pp">This means the code (or data) will not be stored in the place it\n    gets executed. Luckily, <code class="Ic">LOAD</code> blocks are the perfect\n    solution to that. Here\'s an example of how to use them:</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>SECTION &quot;LOAD example&quot;, ROMX\nCopyCode:\n    ld de, RAMCode\n    ld hl, RAMLocation\n    ld c, RAMLocation.end - RAMLocation\n.loop\n    ld a, [de]\n    inc de\n    ld [hli], a\n    dec c\n    jr nz, .loop\n    ret\n\nRAMCode:\n  LOAD &quot;RAM code&quot;, WRAM0\nRAMLocation:\n    ld hl, .string\n    ld de, $9864\n.copy\n    ld a, [hli]\n    ld [de], a\n    inc de\n    and a\n    jr nz, .copy\n    ret\n\n.string\n    db &quot;Hello World!&quot;, 0\n.end\n  ENDL</pre>\n</div>\n<p class="Pp">A <code class="Ic">LOAD</code> block feels similar to a\n    <code class="Ic">SECTION</code> declaration because it creates a new one.\n    All data and code generated within such a block is placed in the current\n    section like usual, but all labels are created as if they were placed in\n    this newly-created section.</p>\n<p class="Pp">In the example above, all of the code and data will end up in the\n    &quot;LOAD example&quot; section. You will notice the\n    &#x2018;RAMCode&#x2019; and &#x2018;RAMLocation&#x2019; labels. The former\n    is situated in ROM, where the code is stored, the latter in RAM, where the\n    code will be loaded.</p>\n<p class="Pp">You cannot nest <code class="Ic">LOAD</code> blocks, nor can you\n    change the current section within them.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Unionized_Sections"><a class="permalink" href="#Unionized_Sections">Unionized\n  Sections</a></h3>\n<p class="Pp">When you\'re tight on RAM, you may want to define overlapping\n    blocks of variables, as explained in the\n    <a class="Sx" href="#Unions">Unions</a> section. However, the\n    <code class="Ic">UNION</code> keyword only works within a single file, which\n    prevents e.g. defining temporary variables on a single memory area across\n    several files. Unionized sections solve this problem. To declare an\n    unionized section, add a <code class="Ic">UNION</code> keyword after the\n    <code class="Ic">SECTION</code> one; the declaration is otherwise not\n    different. Unionized sections follow some different rules from normal\n    sections:</p>\n<ul class="Bl-bullet Bd-indent">\n  <li>The same unionized section (= having the same name) can be declared\n      several times per <code class="Nm">rgbasm</code> invocation, and across\n      several invocations. Different declarations are treated and merged\n      identically whether within the same invocation, or different ones.</li>\n  <li>A section cannot be declared both as unionized or non-unionized.</li>\n  <li>All declarations must have the same type. For example, even if\n      <a class="Xr" href="./rgblink.1">rgblink(1)</a>\'s\n      <code class="Fl">-w</code> flag is used, <code class="Ic">WRAM0</code> and\n      <code class="Ic">WRAMX</code> types are still considered different.</li>\n  <li>Different constraints (alignment, bank, etc.) can be specified for each\n      unionized section declaration, but they must all be compatible. For\n      example, alignment must be compatible with any fixed address, all\n      specified banks must be the same, etc.</li>\n  <li>Unionized sections cannot have type <code class="Ic">ROM0</code> or\n      <code class="Ic">ROMX</code>.</li>\n</ul>\n<p class="Pp">Different declarations of the same unionized section are not\n    appended, but instead overlaid on top of eachother, just like\n    <a class="Sx" href="#Unions">Unions</a>. Similarly, the size of an unionized\n    section is the largest of all its declarations.</p>\n</section>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="SYMBOLS"><a class="permalink" href="#SYMBOLS">SYMBOLS</a></h2>\n<p class="Pp">RGBDS supports several types of symbols:</p>\n<dl class="Bl-hang">\n  <dt id="Label"><a class="permalink" href="#Label"><b class="Sy">Label</b></a></dt>\n  <dd>Numerical symbol designating a memory location. May or may not have a\n      value known at assembly time.</dd>\n  <dt id="Constant"><a class="permalink" href="#Constant"><b class="Sy">Constant</b></a></dt>\n  <dd>Numerical symbol whose value has to be known at assembly time.</dd>\n  <dt id="Macro"><a class="permalink" href="#Macro"><b class="Sy">Macro</b></a></dt>\n  <dd>A block of <code class="Nm">rgbasm</code> code that can be invoked\n    later.</dd>\n  <dt><b class="Sy">String equate</b></dt>\n  <dd>String symbol that can be evaluated, similarly to a macro.</dd>\n</dl>\n<p class="Pp" id="In">Symbol names can contain letters, numbers, underscores,\n    hashes and &#x2018;@&#x2019;. However, they must begin with either a letter,\n    a number, or an underscore. Periods are allowed exclusively for labels, as\n    described below. A symbol cannot have the same name as a reserved keyword.\n    <a class="permalink" href="#In"><i class="Em">In the line where a symbol is\n    defined there mustn\'t be any whitespace before it</i></a>, otherwise\n    <code class="Nm">rgbasm</code> will treat it as a macro invocation.</p>\n<dl class="Bl-tag">\n  <dt><b class="Sy">Label declaration</b></dt>\n  <dd>One of the assembler\'s main tasks is to keep track of addresses for you,\n      so you can work with meaningful names instead of &quot;magic&quot;\n      numbers.\n    <p class="Pp">This can be done in a number of ways:</p>\n    <div class="Bd Pp Bd-indent Li">\n    <pre>GlobalLabel ;&#x00A0;This syntax is deprecated,\nAnotherGlobal: ;&#x00A0;please use this instead\n.locallabel\n.yet_a_local:\nAnotherGlobal.with_another_local:\nThisWillBeExported:: ;&#x00A0;Note the two colons\nThisWillBeExported.too::</pre>\n    </div>\n    <p class="Pp">Declaring a label (global or local) with\n        &#x2018;<code class="Li">::</code>&#x2019; does an\n        <code class="Ic">EXPORT</code> at the same time. (See\n        <a class="Sx" href="#Exporting_and_importing_symbols">Exporting and\n        importing symbols</a> below).</p>\n    <p class="Pp">Any label whose name does not contain a period is a global\n        label, others are locals. Declaring a global label sets it as the\n        current label scope until the next one; any local label whose first\n        character is a period will have the global label\'s name implicitly\n        prepended. Local labels can be declared as\n        &#x2018;<code class="Li">scope.local:</code>&#x2019; or simply as as\n        &#x2018;<code class="Li">.local:</code>&#x2019;. If the former notation\n        is used, then &#x2018;<code class="Li">scope</code>&#x2019; must be the\n        actual current scope.</p>\n    <p class="Pp">A label\'s location (and thus value) is usually not determined\n        until the linking stage, so labels usually cannot be used as constants.\n        However, if the section in which the label is declared has a fixed base\n        address, its value is known at assembly time.</p>\n    <p class="Pp"><code class="Nm">rgbasm</code> is able to compute the\n        subtraction of two labels either if both are constant as described\n        above, or if both belong to the same section.</p>\n  </dd>\n  <dt id="EQU"><a class="permalink" href="#EQU"><code class="Ic">EQU</code></a></dt>\n  <dd><a class="permalink" href="#EQU~2"><code class="Ic" id="EQU~2">EQU</code></a>\n      allows defining constant symbols. Unlike <code class="Ic">SET</code>\n      below, constants defined this way cannot be redefined. They can, for\n      example, be used for things such as bit definitions of hardware registers.\n    <div class="Bd Pp Bd-indent Li">\n    <pre>SCREEN_WIDTH   equ 160 ;&#x00A0;In pixels\nSCREEN_HEIGHT  equ 144</pre>\n    </div>\n    <p class="Pp">Note that colons &#x2018;<code class="Li">:</code>&#x2019;\n        following the name are not allowed.</p>\n  </dd>\n  <dt id="SET"><a class="permalink" href="#SET"><code class="Ic">SET</code></a></dt>\n  <dd><a class="permalink" href="#SET~2"><code class="Ic" id="SET~2">SET</code></a>,\n      or its synonym <code class="Ic">=</code>, defines constant symbols like\n      <code class="Ic">EQU</code>, but those constants can be re-defined. This\n      is useful for variables in macros, for counters, etc.\n    <div class="Bd Pp Bd-indent Li">\n    <pre>ARRAY_SIZE EQU 4\nCOUNT      SET 2\nCOUNT      SET ARRAY_SIZE+COUNT\n;&#x00A0;COUNT now has the value 6\nCOUNT      = COUNT + 1</pre>\n    </div>\n    <p class="Pp">Note that colons &#x2018;<code class="Li">:</code>&#x2019;\n        following the name are not allowed.</p>\n  </dd>\n  <dt id="RSSET"><a class="permalink" href="#RSSET"><code class="Ic">RSSET</code></a>,\n    <code class="Ic">RSRESET</code>, <code class="Ic">RB</code>,\n    <code class="Ic">RW</code></dt>\n  <dd>The RS group of commands is a handy way of defining structures:\n    <div class="Bd Pp Bd-indent Li">\n    <pre>              RSRESET\nstr_pStuff    RW   1\nstr_tData     RB   256\nstr_bCount    RB   1\nstr_SIZEOF    RB   0</pre>\n    </div>\n    <p class="Pp">The example defines four constants as if by:</p>\n    <div class="Bd Pp Bd-indent Li">\n    <pre>str_pStuff EQU 0\nstr_tData  EQU 2\nstr_bCount EQU 258\nstr_SIZEOF EQU 259</pre>\n    </div>\n    <p class="Pp">There are five commands in the RS group of commands:</p>\n    <table class="Bl-column">\n      <tr id="Command~2">\n        <td><a class="permalink" href="#Command~2"><b class="Sy">Command</b></a></td>\n        <td><a class="permalink" href="#Meaning~4"><b class="Sy" id="Meaning~4">Meaning</b></a></td>\n      </tr>\n      <tr id="RSRESET">\n        <td><a class="permalink" href="#RSRESET"><code class="Ic">RSRESET</code></a></td>\n        <td>Equivalent to &#x2018;<code class="Li">RSSET 0</code>&#x2019;.</td>\n      </tr>\n      <tr id="RSSET~2">\n        <td><a class="permalink" href="#RSSET~2"><code class="Ic">RSSET</code></a>\n          <var class="Ar">constexpr</var></td>\n        <td>Sets the <code class="Ic">_RS</code> <span class="No">counter\n          to</span> <var class="Ar">constexpr</var>.</td>\n      </tr>\n      <tr id="RB">\n        <td><a class="permalink" href="#RB"><code class="Ic">RB</code></a>\n          <var class="Ar">constexpr</var></td>\n        <td>Sets the preceding symbol to <code class="Ic">_RS</code>\n          <span class="No">and adds</span> <var class="Ar">constexpr</var>\n          <span class="No">to</span> <code class="Ic">_RS</code>.</td>\n      </tr>\n      <tr id="RW">\n        <td><a class="permalink" href="#RW"><code class="Ic">RW</code></a>\n          <var class="Ar">constexpr</var></td>\n        <td>Sets the preceding symbol to <code class="Ic">_RS</code>\n          <span class="No">and adds</span> <var class="Ar">constexpr</var>\n          <span class="No">* 2 to</span> <code class="Ic">_RS</code>.</td>\n      </tr>\n      <tr id="RL">\n        <td><a class="permalink" href="#RL"><code class="Ic">RL</code></a>\n          <var class="Ar">constexpr</var></td>\n        <td>Sets the preceding symbol to <code class="Ic">_RS</code>\n          <span class="No">and adds</span> <var class="Ar">constexpr</var>\n          <span class="No">* 4 to</span> <code class="Ic">_RS</code>. (In\n          practice, this one cannot be used due to a bug).</td>\n      </tr>\n    </table>\n    <p class="Pp">Note that colons &#x2018;<code class="Li">:</code>&#x2019;\n        following the name are not allowed.</p>\n  </dd>\n  <dt id="EQUS"><a class="permalink" href="#EQUS"><code class="Ic">EQUS</code></a></dt>\n  <dd><a class="permalink" href="#EQUS~2"><code class="Ic" id="EQUS~2">EQUS</code></a>\n      is used to define string symbols. Wherever the assembler meets a string\n      symbol its name is replaced with its value. If you are familiar with C you\n      can think of it as similar to <code class="Fd">#define .</code>\n    <div class="Bd Pp Bd-indent Li">\n    <pre>COUNTREG EQUS &quot;[hl+]&quot;\n    ld a,COUNTREG\n\nPLAYER_NAME EQUS &quot;\\&quot;John\\&quot;&quot;\n    db PLAYER_NAME</pre>\n    </div>\n    <p class="Pp">This will be interpreted as:</p>\n    <div class="Bd Pp Bd-indent Li">\n    <pre>    ld a,[hl+]\n    db &quot;John&quot;</pre>\n    </div>\n    <p class="Pp">String symbols can also be used to define small one-line\n        macros:</p>\n    <div class="Bd Pp Bd-indent Li">\n    <pre>pusha EQUS &quot;push af\\npush bc\\npush de\\npush hl\\n&quot;</pre>\n    </div>\n    <p class="Pp">Note that colons &#x2018;<code class="Li">:</code>&#x2019;\n        following the name are not allowed. String equates can\'t be exported or\n        imported.</p>\n    <p class="Pp"><b class="Sy">Important note</b>: An\n        <code class="Ic">EQUS</code> can be expanded to a string that contains\n        another <code class="Ic">EQUS</code> and it will be expanded as well. If\n        this creates an infinite loop, <code class="Nm">rgbasm</code> will error\n        out once a certain depth is reached. See the <code class="Fl">-r</code>\n        command-line option in <a class="Xr" href="./rgbasm.1">rgbasm(1)</a>.\n        Also, a macro can contain an <code class="Ic">EQUS</code> which calls\n        the same macro, which causes the same problem.</p>\n  </dd>\n  <dt id="MACRO"><a class="permalink" href="#MACRO"><code class="Ic">MACRO</code></a></dt>\n  <dd>One of the best features of an assembler is the ability to write macros\n      for it. Macros can be called with arguments, and can react depending on\n      input using <code class="Ic">IF</code> constructs.\n    <div class="Bd Pp Bd-indent Li">\n    <pre>MyMacro: MACRO\n         ld   a,80\n         call MyFunc\n         ENDM</pre>\n    </div>\n    <p class="Pp">Note that a single colon\n        &#x2018;<code class="Li">:</code>&#x2019; following the macro\'s name is\n        required. Macros can\'t be exported or imported.</p>\n  </dd>\n</dl>\n<section class="Ss">\n<h3 class="Ss" id="Exporting_and_importing_symbols"><a class="permalink" href="#Exporting_and_importing_symbols">Exporting\n  and importing symbols</a></h3>\n<p class="Pp">Importing and exporting of symbols is a feature that is very\n    useful when your project spans many source files and, for example, you need\n    to jump to a routine defined in another file.</p>\n<p class="Pp">Exporting of symbols has to be done manually, importing is done\n    automatically if <code class="Nm">rgbasm</code> finds a symbol it does not\n    know about.</p>\n<p class="Pp">The following will cause <var class="Ar">symbol1</var>,\n    <var class="Ar">symbol2</var> and so on to be accessible to other files\n    during the link process:</p>\n<div class="Bd Bd-indent"><code class="Li"><code class="Ic">EXPORT</code>\n  <var class="Ar">symbol1</var> [, <var class="Ar">symbol2</var>,\n  <span class="No">...</span>]</code></div>\n<p class="Pp"><code class="Ic">GLOBAL</code> is a deprecated synonym for\n    <code class="Ic">EXPORT</code>, do not use it.</p>\n<p class="Pp">Note also that only exported symbols will appear in symbol and map\n    files produced by <a class="Xr" href="./rgblink.1">rgblink(1)</a>.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Purging_symbols"><a class="permalink" href="#Purging_symbols">Purging\n  symbols</a></h3>\n<p class="Pp"><code class="Ic">PURGE</code> allows you to completely remove a\n    symbol from the symbol table as if it had never existed.\n    <a class="permalink" href="#USE"><i class="Em" id="USE">USE WITH EXTREME\n    CAUTION!!!</i></a> I can\'t stress this enough,\n    <a class="permalink" href="#you"><b class="Sy" id="you">you seriously need\n    to know what you are doing</b></a>. DON\'T purge a symbol that you use in\n    expressions the linker needs to calculate. When not sure, it\'s probably not\n    safe to purge anything other than string symbols, macros, and constants.</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>Kamikaze EQUS  &quot;I don\'t want to live anymore&quot;\nAOLer    EQUS  &quot;Me too&quot;\n         PURGE Kamikaze, AOLer</pre>\n</div>\n<p class="Pp" id="will">Note that, as an exception, string symbols in the\n    argument list of a <code class="Ic">PURGE</code> command\n    <a class="permalink" href="#will"><i class="Em">will not be\n    expanded</i></a>.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Predeclared_Symbols"><a class="permalink" href="#Predeclared_Symbols">Predeclared\n  Symbols</a></h3>\n<p class="Pp">The following symbols are defined by the assembler:</p>\n<table class="Bl-column Bd-indent">\n  <tr id="Type">\n    <td><a class="permalink" href="#Type"><b class="Sy">Type</b></a></td>\n    <td><a class="permalink" href="#Name~4"><b class="Sy" id="Name~4">Name</b></a></td>\n    <td><a class="permalink" href="#Contents"><b class="Sy" id="Contents">Contents</b></a></td>\n  </tr>\n  <tr id="EQU~3">\n    <td><a class="permalink" href="#EQU~3"><code class="Ic">EQU</code></a></td>\n    <td><a class="permalink" href="#@"><code class="Dv" id="@">@</code></a></td>\n    <td>PC value</td>\n  </tr>\n  <tr id="EQU~4">\n    <td><a class="permalink" href="#EQU~4"><code class="Ic">EQU</code></a></td>\n    <td><a class="permalink" href="#_PI"><code class="Dv" id="_PI">_PI</code></a></td>\n    <td>Fixed point &#x03C0;</td>\n  </tr>\n  <tr id="SET~3">\n    <td><a class="permalink" href="#SET~3"><code class="Ic">SET</code></a></td>\n    <td><a class="permalink" href="#_RS"><code class="Dv" id="_RS">_RS</code></a></td>\n    <td>_RS Counter</td>\n  </tr>\n  <tr id="EQU~5">\n    <td><a class="permalink" href="#EQU~5"><code class="Ic">EQU</code></a></td>\n    <td><a class="permalink" href="#_NARG"><code class="Dv" id="_NARG">_NARG</code></a></td>\n    <td>Number of arguments passed to macro</td>\n  </tr>\n  <tr id="EQU~6">\n    <td><a class="permalink" href="#EQU~6"><code class="Ic">EQU</code></a></td>\n    <td><a class="permalink" href="#__LINE__"><code class="Dv" id="__LINE__">__LINE__</code></a></td>\n    <td>The current line number</td>\n  </tr>\n  <tr id="EQUS~3">\n    <td><a class="permalink" href="#EQUS~3"><code class="Ic">EQUS</code></a></td>\n    <td><a class="permalink" href="#__FILE__"><code class="Dv" id="__FILE__">__FILE__</code></a></td>\n    <td>The current filename</td>\n  </tr>\n  <tr id="EQUS~4">\n    <td><a class="permalink" href="#EQUS~4"><code class="Ic">EQUS</code></a></td>\n    <td><a class="permalink" href="#__DATE__"><code class="Dv" id="__DATE__">__DATE__</code></a></td>\n    <td>Today\'s date</td>\n  </tr>\n  <tr id="EQUS~5">\n    <td><a class="permalink" href="#EQUS~5"><code class="Ic">EQUS</code></a></td>\n    <td><a class="permalink" href="#__TIME__"><code class="Dv" id="__TIME__">__TIME__</code></a></td>\n    <td>The current time</td>\n  </tr>\n  <tr id="EQUS~6">\n    <td><a class="permalink" href="#EQUS~6"><code class="Ic">EQUS</code></a></td>\n    <td><a class="permalink" href="#__ISO_8601_LOCAL__"><code class="Dv" id="__ISO_8601_LOCAL__">__ISO_8601_LOCAL__</code></a></td>\n    <td>ISO 8601 timestamp (local)</td>\n  </tr>\n  <tr id="EQUS~7">\n    <td><a class="permalink" href="#EQUS~7"><code class="Ic">EQUS</code></a></td>\n    <td><a class="permalink" href="#__ISO_8601_UTC__"><code class="Dv" id="__ISO_8601_UTC__">__ISO_8601_UTC__</code></a></td>\n    <td>ISO 8601 timestamp (UTC)</td>\n  </tr>\n  <tr id="EQU~7">\n    <td><a class="permalink" href="#EQU~7"><code class="Ic">EQU</code></a></td>\n    <td><a class="permalink" href="#__UTC_YEAR__"><code class="Dv" id="__UTC_YEAR__">__UTC_YEAR__</code></a></td>\n    <td>Today\'s year</td>\n  </tr>\n  <tr id="EQU~8">\n    <td><a class="permalink" href="#EQU~8"><code class="Ic">EQU</code></a></td>\n    <td><a class="permalink" href="#__UTC_MONTH__"><code class="Dv" id="__UTC_MONTH__">__UTC_MONTH__</code></a></td>\n    <td>Today\'s month number, 1&#x2013;12</td>\n  </tr>\n  <tr id="EQU~9">\n    <td><a class="permalink" href="#EQU~9"><code class="Ic">EQU</code></a></td>\n    <td><a class="permalink" href="#__UTC_DAY__"><code class="Dv" id="__UTC_DAY__">__UTC_DAY__</code></a></td>\n    <td>Today\'s day of the month, 1&#x2013;31</td>\n  </tr>\n  <tr id="EQU~10">\n    <td><a class="permalink" href="#EQU~10"><code class="Ic">EQU</code></a></td>\n    <td><a class="permalink" href="#__UTC_HOUR__"><code class="Dv" id="__UTC_HOUR__">__UTC_HOUR__</code></a></td>\n    <td>Current hour, 0&#x2013;23</td>\n  </tr>\n  <tr id="EQU~11">\n    <td><a class="permalink" href="#EQU~11"><code class="Ic">EQU</code></a></td>\n    <td><a class="permalink" href="#__UTC_MINUTE__"><code class="Dv" id="__UTC_MINUTE__">__UTC_MINUTE__</code></a></td>\n    <td>Current minute, 0&#x2013;59</td>\n  </tr>\n  <tr id="EQU~12">\n    <td><a class="permalink" href="#EQU~12"><code class="Ic">EQU</code></a></td>\n    <td><a class="permalink" href="#__UTC_SECOND__"><code class="Dv" id="__UTC_SECOND__">__UTC_SECOND__</code></a></td>\n    <td>Current second, 0&#x2013;59</td>\n  </tr>\n  <tr id="EQU~13">\n    <td><a class="permalink" href="#EQU~13"><code class="Ic">EQU</code></a></td>\n    <td><a class="permalink" href="#__RGBDS_MAJOR__"><code class="Dv" id="__RGBDS_MAJOR__">__RGBDS_MAJOR__</code></a></td>\n    <td>Major version number of RGBDS</td>\n  </tr>\n  <tr id="EQU~14">\n    <td><a class="permalink" href="#EQU~14"><code class="Ic">EQU</code></a></td>\n    <td><a class="permalink" href="#__RGBDS_MINOR__"><code class="Dv" id="__RGBDS_MINOR__">__RGBDS_MINOR__</code></a></td>\n    <td>Minor version number of RGBDS</td>\n  </tr>\n  <tr id="EQU~15">\n    <td><a class="permalink" href="#EQU~15"><code class="Ic">EQU</code></a></td>\n    <td><a class="permalink" href="#__RGBDS_PATCH__"><code class="Dv" id="__RGBDS_PATCH__">__RGBDS_PATCH__</code></a></td>\n    <td>Patch version number of RGBDS</td>\n  </tr>\n</table>\n</section>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="DEFINING_DATA"><a class="permalink" href="#DEFINING_DATA">DEFINING\n  DATA</a></h2>\n<section class="Ss">\n<h3 class="Ss" id="Declaring_variables_in_a_RAM_section"><a class="permalink" href="#Declaring_variables_in_a_RAM_section">Declaring\n  variables in a RAM section</a></h3>\n<p class="Pp"><code class="Ic">DS</code> allocates a number of empty bytes. This\n    is the preferred method of allocating space in a RAM section. You can also\n    use <code class="Ic">DB</code>, <code class="Ic">DW</code> and\n    <code class="Ic">DL</code> without any arguments instead (see\n    <a class="Sx" href="#Defining_constant_data">Defining constant data</a>\n    below).</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>DS 42 ;&#x00A0;Allocates 42 bytes</pre>\n</div>\n<p class="Pp">Empty space in RAM sections will not be initialized. In ROM\n    sections, it will be filled with the value passed to the\n    <code class="Fl">-p</code> command-line option, except when using overlays\n    with <code class="Fl">-O</code>.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Defining_constant_data"><a class="permalink" href="#Defining_constant_data">Defining\n  constant data</a></h3>\n<p class="Pp"><code class="Ic">DB</code> defines a list of bytes that will be\n    stored in the final image. Ideal for tables and text. Note that strings are\n    not zero-terminated!</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>DB 1,2,3,4,&quot;This is a string&quot;</pre>\n</div>\n<p class="Pp"><code class="Ic">DS</code> can also be used to fill a region of\n    memory with some value. The following produces 42 times the byte $FF:</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>DS 42, $FF</pre>\n</div>\n<p class="Pp">Alternatively, you can use <code class="Ic">DW</code> to store a\n    list of words (16-bit) or <code class="Ic">DL</code> to store a list of\n    double-words/longs (32-bit). Strings are not allowed as arguments to\n    <code class="Ic">DW</code> and <code class="Ic">DL</code>.</p>\n<p class="Pp">You can also use <code class="Ic">DB</code>,\n    <code class="Ic">DW</code> and <code class="Ic">DL</code> without arguments,\n    or leaving empty elements at any point in the list. This works exactly like\n    <code class="Ic">DS 1</code>, <code class="Ic">DS 2</code> and\n    <code class="Ic">DS 4</code> respectively. Consequently, no-argument\n    <code class="Ic">DB</code>, <code class="Ic">DW</code> and\n    <code class="Ic">DL</code> can be used in a <code class="Ic">WRAM0</code> /\n    <code class="Ic">WRAMX</code> / <code class="Ic">HRAM</code> /\n    <code class="Ic">VRAM</code> / <code class="Ic">SRAM</code> section.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Including_binary_files"><a class="permalink" href="#Including_binary_files">Including\n  binary files</a></h3>\n<p class="Pp">You probably have some graphics, level data, etc. you\'d like to\n    include. Use <code class="Ic">INCBIN</code> to include a raw binary file as\n    it is. If the file isn\'t found in the current directory, the include-path\n    list passed to <a class="Xr" href="./rgbasm.1">rgbasm(1)</a> (see the\n    <code class="Fl">-i</code> option) on the command line will be searched.</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>INCBIN &quot;titlepic.bin&quot;\nINCBIN &quot;sprites/hero.bin&quot;</pre>\n</div>\n<p class="Pp">You can also include only part of a file with\n    <code class="Ic">INCBIN</code>. The example below includes 256 bytes from\n    data.bin, starting from byte 78.</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>INCBIN &quot;data.bin&quot;,78,256</pre>\n</div>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Unions"><a class="permalink" href="#Unions">Unions</a></h3>\n<p class="Pp">Unions allow multiple memory allocations to overlap, like unions\n    in C. This does not increase the amount of memory available, but allows\n    re-using the same memory region for different purposes.</p>\n<p class="Pp">A union starts with a <code class="Ic">UNION</code> keyword, and\n    ends at the corresponding <code class="Ic">ENDU</code> keyword.\n    <code class="Ic">NEXTU</code> separates each block of allocations, and you\n    may use it as many times within a union as necessary.</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>    ; Let\'s say PC = $C0DE here\n    UNION\n    ; Here, PC = $C0DE\nName: ds 8\n    ; PC = $C0E6\nNickname: ds 8\n    ; PC = $C0EE\n    NEXTU\n    ; PC is back to $C0DE\nHealth: dw\n    ; PC = $C0E0\nSomething: ds 6\n    ; And so on\nLives: db\n    NEXTU\nVideoBuffer: ds 19\n    ENDU</pre>\n</div>\n<p class="Pp">In the example above, &#x2018;Name, Health, VideoBuffer&#x2019;\n    all have the same value, as do &#x2018;Nickname&#x2019; and\n    &#x2018;Lives&#x2019;. Thus, keep in mind that <code class="Ic">ld [Health],\n    a</code> is identical to <code class="Ic">ld [Name], a</code>.</p>\n<p class="Pp">The size of this union is 19 bytes, as this is the size of the\n    largest block (the last one, containing &#x2018;VideoBuffer&#x2019;).\n    Nesting unions is possible, with each inner union\'s size being considered as\n    described above.</p>\n<p class="Pp">Unions may be used in any section, but inside them may only be\n    <code class="Ic">DS -</code> like commands (see\n    <a class="Sx" href="#Declaring_variables_in_a_RAM_section">Declaring\n    variables in a RAM section</a>).</p>\n</section>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="THE_MACRO_LANGUAGE"><a class="permalink" href="#THE_MACRO_LANGUAGE">THE\n  MACRO LANGUAGE</a></h2>\n<section class="Ss">\n<h3 class="Ss" id="Invoking_macros"><a class="permalink" href="#Invoking_macros">Invoking\n  macros</a></h3>\n<p class="Pp">You execute the macro by inserting its name.</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>         add a,b\n         ld sp,hl\n         MyMacro ;&#x00A0;This will be expanded\n         sub a,87</pre>\n</div>\n<p class="Pp">It\'s valid to call a macro from a macro (yes, even the same\n  one).</p>\n<p class="Pp">When <code class="Nm">rgbasm</code> sees\n    <code class="Ic">MyMacro</code> it will insert the macro definition (the\n    code enclosed in <code class="Ic">MACRO</code> /\n    <code class="Ic">ENDM</code>).</p>\n<p class="Pp">Suppose your macro contains a loop.</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>LoopyMacro: MACRO\n            xor  a,a\n.loop       ld   [hl+],a\n            dec  c\n            jr   nz,.loop\nENDM</pre>\n</div>\n<p class="Pp">This is fine, but only if you use the macro no more than once per\n    scope. To get around this problem, there is the escape sequence\n    <code class="Ic">\\@</code> that expands to a unique string.</p>\n<p class="Pp"><code class="Ic">\\@</code> also works in\n    <code class="Ic">REPT</code> blocks.</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>LoopyMacro: MACRO\n            xor  a,a\n.loop\\@     ld   [hl+],a\n            dec  c\n            jr   nz,.loop\\@\nENDM</pre>\n</div>\n<p class="Pp"><b class="Sy">Important note</b>: Since a macro can call itself\n    (or a different macro that calls the first one), there can be circular\n    dependency problems. If this creates an infinite loop,\n    <code class="Nm">rgbasm</code> will error out once a certain depth is\n    reached. See the <code class="Fl">-r</code> command-line option in\n    <a class="Xr" href="./rgbasm.1">rgbasm(1)</a>. Also, a macro can have inside\n    an <b class="Sy">EQUS</b> which references the same macro, which has the\n    same problem.</p>\n<p class="Pp">It\'s possible to pass arguments to macros as well! You retrieve\n    the arguments by using the escape sequences <code class="Ic">\\1</code>\n    through <code class="Ic">\\9</code>, <code class="Ic">\\1</code> being the\n    first argument specified on the macro invocation.</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>LoopyMacro: MACRO\n            ld   hl,\\1\n            ld   c,\\2\n            xor  a,a\n.loop\\@     ld   [hl+],a\n            dec  c\n            jr   nz,.loop\\@\n            ENDM</pre>\n</div>\n<p class="Pp">Now I can call the macro specifying two arguments, the first being\n    the address and the second being a byte count. The generated code will then\n    reset all bytes in this range.</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>LoopyMacro MyVars,54</pre>\n</div>\n<p class="Pp">Arguments are passed as string equates, although there\'s no need\n    to enclose them in quotes. Thus, an expression will not be evaluated first\n    but kind of copy-pasted. This means that it\'s probably a very good idea to\n    use brackets around <code class="Ic">\\1</code> to <code class="Ic">\\9</code>\n    if you perform further calculations on them. For instance, consider the\n    following:</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>print_double: MACRO\n    PRINTV \\1 * 2\nENDM\n    print_double 1 + 2</pre>\n</div>\n<p class="Pp">The <code class="Ic">PRINTV</code> statement will expand to\n    &#x2018;<code class="Li">PRINTV 1 + 2 * 2</code>&#x2019;, which will print 5\n    and not 6 as you might have expected.</p>\n<p class="Pp">Line continuations work as usual inside macros or lists of macro\n    arguments. However, some characters need to be escaped, as in the following\n    example:</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>PrintMacro: MACRO\n    PRINTT \\1\nENDM\n\n    PrintMacro STRCAT(&quot;Hello &quot;\\, \\\n                      &quot;world\\\\n&quot;)</pre>\n</div>\n<p class="Pp">The comma needs to be escaped to avoid it being treated as\n    separating the macro\'s arguments. The backslash &#x2018;\\&#x2019; (from\n    &#x2018;\\n&#x2019;) also needs to be escaped because of the way\n    <code class="Nm">rgbasm</code> processes macro arguments.</p>\n<p class="Pp">In reality, up to 256 arguments can be passed to a macro, but you\n    can only use the first 9 like this. If you want to use the rest, you need to\n    use the <code class="Ic">SHIFT</code> command.</p>\n<p class="Pp"><code class="Ic">SHIFT</code> is a special command only available\n    in macros. Very useful in <code class="Ic">REPT</code> blocks. It will shift\n    the arguments by one to the left. <code class="Ic">\\1</code> will get the\n    value of <code class="Ic">\\2</code>, <code class="Ic">\\2</code> will get the\n    value of <code class="Ic">\\3</code>, and so forth.</p>\n<p class="Pp">This is the only way of accessing the value of arguments from 10\n    to 256.</p>\n<p class="Pp"><code class="Ic">SHIFT</code> can optionally be given an integer\n    parameter, and will apply the above shifting that number of times.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Printing_things_during_assembly"><a class="permalink" href="#Printing_things_during_assembly">Printing\n  things during assembly</a></h3>\n<p class="Pp">The next four commands print text and values to the standard\n    output. Useful for debugging macros, or wherever you may feel the need to\n    tell yourself some important information.</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>PRINTT &quot;I\'m the greatest programmer in the whole wide world\\n&quot;\nPRINTI (2 + 3) / 5\nPRINTV $FF00 + $F0\nPRINTF MUL(3.14, 3987.0)</pre>\n</div>\n<dl class="Bl-inset">\n  <dt id="PRINTT"><a class="permalink" href="#PRINTT"><code class="Ic">PRINTT</code></a></dt>\n  <dd>prints out a string. Be careful to add a line feed (&quot;\\n&quot;) at the\n      end, as it is not added automatically.</dd>\n  <dt id="PRINTV"><a class="permalink" href="#PRINTV"><code class="Ic">PRINTV</code></a></dt>\n  <dd>prints out an integer value in hexadecimal or, as in the example, the\n      result of a calculation. Unsurprisingly, you can also print out a constant\n      symbol\'s value.</dd>\n  <dt id="PRINTI"><a class="permalink" href="#PRINTI"><code class="Ic">PRINTI</code></a></dt>\n  <dd>prints out a signed integer value.</dd>\n  <dt id="PRINTF"><a class="permalink" href="#PRINTF"><code class="Ic">PRINTF</code></a></dt>\n  <dd>prints out a fixed point value.</dd>\n</dl>\n<p class="Pp">Be careful that none of those automatically print a line feed; if\n    you need one, use <code class="Ic">PRINTT \\n</code>.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Automatically_repeating_blocks_of_code"><a class="permalink" href="#Automatically_repeating_blocks_of_code">Automatically\n  repeating blocks of code</a></h3>\n<p class="Pp">Suppose you want to unroll a time consuming loop without\n    copy-pasting it. <code class="Ic">REPT</code> is here for that purpose.\n    Everything between <code class="Ic">REPT</code> and the matching\n    <code class="Ic">ENDR</code> will be repeated a number of times just as if\n    you had done a copy/paste operation yourself. The following example will\n    assemble &#x2018;<code class="Li">add a,c</code>&#x2019; four times:</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>REPT 4\n  add  a,c\nENDR</pre>\n</div>\n<p class="Pp">You can also use <code class="Ic">REPT</code> to generate tables\n    on the fly:</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>;&#x00A0;--\n;&#x00A0;-- Generate a 256 byte sine table with values between 0 and 128\n;&#x00A0;--\nANGLE =   0.0\n      REPT  256\n      db    (MUL(64.0, SIN(ANGLE)) + 64.0) &gt;&gt; 16\nANGLE = ANGLE+256.0\n      ENDR</pre>\n</div>\n<p class="Pp">As in macros, you can also use the escape sequence\n    <code class="Ic">\\@</code>. <code class="Ic">REPT</code> blocks can be\n    nested.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Aborting_the_assembly_process"><a class="permalink" href="#Aborting_the_assembly_process">Aborting\n  the assembly process</a></h3>\n<p class="Pp"><code class="Ic">FAIL</code> and <code class="Ic">WARN</code> can\n    be used to print errors and warnings respectively during the assembly\n    process. This is especially useful for macros that get an invalid argument.\n    <code class="Ic">FAIL</code> and <code class="Ic">WARN</code> take a string\n    as the only argument and they will print this string out as a normal error\n    with a line number.</p>\n<p class="Pp"><code class="Ic">FAIL</code> stops assembling immediately while\n    <code class="Ic">WARN</code> shows the message but continues afterwards.</p>\n<p class="Pp">If you need to ensure some assumption is correct when compiling,\n    you can use <code class="Ic">ASSERT</code> and\n    <code class="Ic">STATIC_ASSERT</code>. Syntax examples are given below:</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>Function:\n      xor a\nASSERT LOW(Variable) == 0\n      ld h, HIGH(Variable)\n      ld l, a\n      ld a, [hli]\n      ; You can also indent this!\n      ASSERT BANK(OtherFunction) == BANK(Function)\n      call OtherFunction\n; Lowercase also works\nassert Variable + 1 == OtherVariable\n      ld c, [hl]\n      ret\n.end\n      ; If you specify one, a message will be printed\n      STATIC_ASSERT .end - Function &lt; 256, &quot;Function is too large!&quot;</pre>\n</div>\n<p class="Pp">First, the difference between <code class="Ic">ASSERT</code> and\n    <code class="Ic">STATIC_ASSERT</code> is that the former is evaluated by\n    RGBASM if it can, otherwise by RGBLINK; but the latter is only ever\n    evaluated by RGBASM. If RGBASM cannot compute the value of the argument to\n    <code class="Ic">STATIC_ASSERT</code>, it will produce an error.</p>\n<p class="Pp">Second, as shown above, a string can be optionally added at the\n    end, to give insight into what the assertion is checking.</p>\n<p class="Pp">Finally, you can add one of <code class="Ic">WARN</code>,\n    <code class="Ic">FAIL</code> or <code class="Ic">FATAL</code> as the first\n    optional argument to either <code class="Ic">ASSERT</code> or\n    <code class="Ic">STATIC_ASSERT</code>. If the assertion fails,\n    <code class="Ic">WARN</code> will cause a simple warning (controlled by\n    <a class="Xr" href="./rgbasm.1">rgbasm(1)</a> flag\n    <code class="Fl">-Wassert</code>) to be emitted;\n    <code class="Ic">FAIL</code> (the default) will cause a non-fatal error; and\n    <code class="Ic">FATAL</code> immediately aborts.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Including_other_source_files"><a class="permalink" href="#Including_other_source_files">Including\n  other source files</a></h3>\n<p class="Pp">Use <code class="Ic">INCLUDE</code> to process another assembler\n    file and then return to the current file when done. If the file isn\'t found\n    in the current directory the include path list (see the\n    <code class="Fl">-i</code> option in\n    <a class="Xr" href="./rgbasm.1">rgbasm(1)</a>) will be searched. You may\n    nest <code class="Ic">INCLUDE</code> calls infinitely (or until you run out\n    of memory, whichever comes first).</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>    INCLUDE &quot;irq.inc&quot;</pre>\n</div>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Conditional_assembling"><a class="permalink" href="#Conditional_assembling">Conditional\n  assembling</a></h3>\n<p class="Pp">The four commands <code class="Ic">IF</code>,\n    <code class="Ic">ELIF</code>, <code class="Ic">ELSE</code>, and\n    <code class="Ic">ENDC</code> let you have <code class="Nm">rgbasm</code>\n    skip over parts of your code depending on a condition. This is a powerful\n    feature commonly used in macros.</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>IF NUM &lt; 0\n  PRINTT &quot;NUM &lt; 0\\n&quot;\nELIF NUM == 0\n  PRINTT &quot;NUM == 0\\n&quot;\nELSE\n  PRINTT &quot;NUM &gt; 0\\n&quot;\nENDC</pre>\n</div>\n<p class="Pp">The <code class="Ic">ELIF</code> (standing for &quot;else\n    if&quot;) and <code class="Ic">ELSE</code> blocks are optional.\n    <code class="Ic">IF</code> / <code class="Ic">ELIF</code> /\n    <code class="Ic">ELSE</code> / <code class="Ic">ENDC</code> blocks can be\n    nested.</p>\n<p class="Pp">Note that if an <code class="Ic">ELSE</code> block is found before\n    an <code class="Ic">ELIF</code> block, the <code class="Ic">ELIF</code>\n    block will be ignored. All <code class="Ic">ELIF</code> blocks must go\n    before the <code class="Ic">ELSE</code> block. Also, if there is more than\n    one <code class="Ic">ELSE</code> block, all of them but the first one are\n    ignored.</p>\n</section>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="MISCELLANEOUS"><a class="permalink" href="#MISCELLANEOUS">MISCELLANEOUS</a></h2>\n<section class="Ss">\n<h3 class="Ss" id="Changing_options_while_assembling"><a class="permalink" href="#Changing_options_while_assembling">Changing\n  options while assembling</a></h3>\n<p class="Pp"><code class="Ic">OPT</code> can be used to change some of the\n    options during assembling from within the source, instead of defining them\n    on the command-line.</p>\n<p class="Pp"><code class="Ic">OPT</code> takes a comma-separated list of\n    options as its argument:</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>PUSHO\nOPT   g.oOX ;Set the GB graphics constants to use these characters\nDW    `..ooOOXX\nPOPO\nDW    `00112233</pre>\n</div>\n<p class="Pp">The options that OPT can modify are currently:\n    <code class="Cm">b</code>, <code class="Cm">g</code> and\n    <code class="Cm">p</code>.</p>\n<p class="Pp"><code class="Ic">POPO</code> and <code class="Ic">PUSHO</code>\n    provide the interface to the option stack. <code class="Ic">PUSHO</code>\n    will push the current set of options on the option stack.\n    <code class="Ic">POPO</code> can then later be used to restore them. Useful\n    if you want to change some options in an include file and you don\'t want to\n    destroy the options set by the program that included your file. The stack\'s\n    number of entries is limited only by the amount of memory in your\n  machine.</p>\n</section>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="SEE_ALSO"><a class="permalink" href="#SEE_ALSO">SEE\n  ALSO</a></h2>\n<p class="Pp"><a class="Xr" href="./rgbasm.1">rgbasm(1)</a>,\n    <a class="Xr" href="./rgblink.1">rgblink(1)</a>,\n    <a class="Xr" href="./rgblink.5">rgblink(5)</a>,\n    <a class="Xr" href="./rgbds.5">rgbds(5)</a>,\n    <a class="Xr" href="./rgbds.7">rgbds(7)</a>,\n    <a class="Xr" href="./gbz80.7">gbz80(7)</a></p>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="HISTORY"><a class="permalink" href="#HISTORY">HISTORY</a></h2>\n<p class="Pp"><code class="Nm">rgbasm</code> was originally written by Carsten\n    S&#x00F8;rensen as part of the ASMotor package, and was later packaged in\n    RGBDS by Justin Lloyd. It is now maintained by a number of contributors at\n    <a class="Lk" href="https://github.com/rednex/rgbds">https://github.com/rednex/rgbds</a>.</p>\n</section>\n'}}))}m.isMDXComponent=!0}}]);