"use strict";(self.webpackChunkrgbds_www_2=self.webpackChunkrgbds_www_2||[]).push([[1290],{3905:function(e,n,s){s.d(n,{Zo:function(){return r},kt:function(){return m}});var a=s(7294);function t(e,n,s){return n in e?Object.defineProperty(e,n,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[n]=s,e}function d(e,n){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),s.push.apply(s,a)}return s}function c(e){for(var n=1;n<arguments.length;n++){var s=null!=arguments[n]?arguments[n]:{};n%2?d(Object(s),!0).forEach((function(n){t(e,n,s[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):d(Object(s)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(s,n))}))}return e}function l(e,n){if(null==e)return{};var s,a,t=function(e,n){if(null==e)return{};var s,a,t={},d=Object.keys(e);for(a=0;a<d.length;a++)s=d[a],n.indexOf(s)>=0||(t[s]=e[s]);return t}(e,n);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(e);for(a=0;a<d.length;a++)s=d[a],n.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(t[s]=e[s])}return t}var o=a.createContext({}),i=function(e){var n=a.useContext(o),s=n;return e&&(s="function"==typeof e?e(n):c(c({},n),e)),s},r=function(e){var n=i(e.components);return a.createElement(o.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var s=e.components,t=e.mdxType,d=e.originalType,o=e.parentName,r=l(e,["components","mdxType","originalType","parentName"]),h=i(s),m=t,u=h["".concat(o,".").concat(m)]||h[m]||p[m]||d;return s?a.createElement(u,c(c({ref:n},r),{},{components:s})):a.createElement(u,c({ref:n},r))}));function m(e,n){var s=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var d=s.length,c=new Array(d);c[0]=h;var l={};for(var o in n)hasOwnProperty.call(n,o)&&(l[o]=n[o]);l.originalType=e,l.mdxType="string"==typeof e?e:t,c[1]=l;for(var i=2;i<d;i++)c[i]=s[i];return a.createElement.apply(null,c)}return a.createElement.apply(null,s)}h.displayName="MDXCreateElement"},7652:function(e,n,s){s.r(n),s.d(n,{assets:function(){return r},contentTitle:function(){return o},default:function(){return m},frontMatter:function(){return l},metadata:function(){return i},toc:function(){return p}});var a=s(3117),t=s(102),d=(s(7294),s(3905)),c=["components"],l={},o="rgbasm(5) \u2014 language documentation",i={unversionedId:"rgbasm.5",id:"version-v0.3.4/rgbasm.5",title:"rgbasm(5) \u2014 language documentation",description:"",source:"@site/versioned_docs/version-v0.3.4/rgbasm.5.md",sourceDirName:".",slug:"/rgbasm.5",permalink:"/docs/v0.3.4/rgbasm.5",draft:!1,editUrl:"https://github.com/gbdev/rgbds/edit/master/man/rgbasm.5",tags:[],version:"v0.3.4",frontMatter:{},sidebar:"nav",previous:{title:"Release information",permalink:"/docs/v0.3.4/"},next:{title:"gbz80(7) \u2014 CPU opcode reference",permalink:"/docs/v0.3.4/gbz80.7"}},r={},p=[{value:"DESCRIPTION",id:"DESCRIPTION",level:2,children:[]},{value:"GENERAL",id:"GENERAL",level:2,children:[{value:"Syntax",id:"Syntax",level:3,children:[]},{value:"Sections",id:"Sections",level:3,children:[]}]},{value:"SYMBOLS",id:"SYMBOLS",level:2,children:[{value:"Symbols",id:"Symbols",level:3,children:[]},{value:"Exporting and importing symbols",id:"Exporting_and_importing_symbols",level:3,children:[]},{value:"Purging symbols",id:"Purging_symbols",level:3,children:[]},{value:"Predeclared Symbols",id:"Predeclared_Symbols",level:3,children:[]}]},{value:"DEFINING DATA",id:"DEFINING_DATA",level:2,children:[{value:"Defining constant data",id:"Defining_constant_data",level:3,children:[]},{value:"Declaring variables in a RAM section",id:"Declaring_variables_in_a_RAM_section",level:3,children:[]},{value:"Including binary files",id:"Including_binary_files",level:3,children:[]},{value:"Unions",id:"Unions",level:3,children:[]}]},{value:"THE MACRO LANGUAGE",id:"THE_MACRO_LANGUAGE",level:2,children:[{value:"Printing things during assembly",id:"Printing_things_during_assembly",level:3,children:[]},{value:"Automatically repeating blocks of code",id:"Automatically_repeating_blocks_of_code",level:3,children:[]},{value:"Aborting the assembly process",id:"Aborting_the_assembly_process",level:3,children:[]},{value:"Including other source files",id:"Including_other_source_files",level:3,children:[]},{value:"Conditional assembling",id:"Conditional_assembling",level:3,children:[]},{value:"Integer and Boolean expressions",id:"Integer_and_Boolean_expressions",level:3,children:[]},{value:"Fixed\u2010point Expressions",id:"Fixed\u2010point_Expressions",level:3,children:[]},{value:"String Expressions",id:"String_Expressions",level:3,children:[]},{value:"Other functions",id:"Other_functions",level:3,children:[]}]},{value:"MISCELLANEOUS",id:"MISCELLANEOUS",level:2,children:[{value:"Changing options while assembling",id:"Changing_options_while_assembling",level:3,children:[]}]},{value:"ALPHABETICAL LIST OF KEYWORDS",id:"ALPHABETICAL_LIST_OF_KEYWORDS",level:2,children:[]},{value:"SEE ALSO",id:"SEE_ALSO",level:2,children:[]},{value:"HISTORY",id:"HISTORY",level:2,children:[]}],h={toc:p};function m(e){var n=e.components,s=(0,t.Z)(e,c);return(0,d.kt)("wrapper",(0,a.Z)({},h,s,{components:n,mdxType:"MDXLayout"}),(0,d.kt)("h1",{id:"rgbasm5--language-documentation"},"rgbasm(5) \u2014 language documentation"),(0,d.kt)("div",{className:"manual-text",dangerouslySetInnerHTML:{__html:'<section class="Sh">\n<h2 class="Sh" id="DESCRIPTION"><a class="permalink" href="#DESCRIPTION">DESCRIPTION</a></h2>\n<p class="Pp">This is the full description of the language used by\n    <a class="Xr" href="./rgbasm.1">rgbasm(1)</a>. The description of the\n    instructions supported by the GameBoy CPU is in\n    <a class="Xr" href="./gbz80.7">gbz80(7)</a>.</p>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="GENERAL"><a class="permalink" href="#GENERAL">GENERAL</a></h2>\n<section class="Ss">\n<h3 class="Ss" id="Syntax"><a class="permalink" href="#Syntax">Syntax</a></h3>\n<p class="Pp">The syntax is line&#x2010;based, just as in any other assembler,\n    meaning that you do one instruction or pseudo&#x2010;op per line:</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent"><code class="Li">[<var class="Ar">label</var>]\n  [<var class="Ar">instruction</var>]\n  [<var class="Ar">;comment</var>]</code></div>\n<p class="Pp">Example:</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent"><code class="Li">John: ld a,87 ;Weee</code></div>\n<p class="Pp">All pseudo&#x2010;ops, mnemonics and registers (reserved keywords)\n    are case&#x2010;insensitive and all labels are case&#x2010;sensitive.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Sections"><a class="permalink" href="#Sections">Sections</a></h3>\n<p class="Pp">Before you can start writing code, you must define a section. This\n    tells the assembler what kind of information follows and, if it is code,\n    where to put it.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent"><code class="Li">SECTION\n  &quot;CoolStuff&quot;,ROMX</code></div>\n<p class="Pp">This switches to the section called &quot;CoolStuff&quot; (or\n    creates it if it doesn\'t already exist) and it defines it as a code section.\n    All sections assembled at the same time that have the same name, type, etc,\n    are considered to be the same one, and their code is put together in the\n    object file generated by the assembler. All other sections must have a\n    unique name, even in different source files, or the linker will treat it as\n    an error.</p>\n<p class="Pp">Possible section types are as follows:</p>\n<dl class="Bl-tag">\n  <dt id="ROM0"><a class="permalink" href="#ROM0"><b class="Sy">ROM0</b></a></dt>\n  <dd>A ROM section. Mapped to memory at $0000&#x2013;$3FFF (or $0000-$7FFF if\n      tiny ROM mode is enabled in\n      <a class="Xr" href="./rgblink.1">rgblink(1)</a>).</dd>\n  <dt id="ROMX"><a class="permalink" href="#ROMX"><b class="Sy">ROMX</b></a></dt>\n  <dd>A banked ROM section. Mapped to memory at $4000&#x2013;$7FFF. Valid banks\n      range from 1 to 511. Not available if tiny ROM mode is enabled in\n      <a class="Xr" href="./rgblink.1">rgblink(1)</a>.</dd>\n  <dt id="VRAM"><a class="permalink" href="#VRAM"><b class="Sy">VRAM</b></a></dt>\n  <dd>A banked video RAM section. Mapped to memory at $8000&#x2013;$9FFF. Can\n      only allocate memory, not fill it. Valid banks are 0 and 1 but bank 1\n      isn\'t available if DMG mode is enabled in\n      <a class="Xr" href="./rgblink.1">rgblink(1)</a>.</dd>\n  <dt id="SRAM"><a class="permalink" href="#SRAM"><b class="Sy">SRAM</b></a></dt>\n  <dd>A banked external (save) RAM section. Mapped to memory at\n      $A000&#x2013;$BFFF. Can only allocate memory, not fill it. Valid banks\n      range from 0 to 15.</dd>\n  <dt id="WRAM0"><a class="permalink" href="#WRAM0"><b class="Sy">WRAM0</b></a></dt>\n  <dd>A general-purpose RAM section. Mapped to memory at $C000&#x2013;$CFFF, or\n      $C000-$DFFF if DMG mode is enabled in\n      <a class="Xr" href="./rgblink.1">rgblink(1)</a>. Can only allocate memory,\n      not fill it.</dd>\n  <dt id="WRAMX"><a class="permalink" href="#WRAMX"><b class="Sy">WRAMX</b></a></dt>\n  <dd>A banked general-purpose RAM section. Mapped to memory at\n      $D000&#x2013;$DFFF. Can only allocate memory, not fill it. Valid banks\n      range from 1 to 7. Not available if DMG mode is enabled in\n      <a class="Xr" href="./rgblink.1">rgblink(1)</a>.</dd>\n  <dt id="OAM"><a class="permalink" href="#OAM"><b class="Sy">OAM</b></a></dt>\n  <dd>An object attributes RAM section. Mapped to memory at $FE00-$FE9F. Can\n      only allocate memory, not fill it.</dd>\n  <dt id="HRAM"><a class="permalink" href="#HRAM"><b class="Sy">HRAM</b></a></dt>\n  <dd>A high RAM section. Mapped to memory at $FF80&#x2013;$FFFE. Can only\n      allocate memory, not fill it.\n    <p class="Pp">NOTE: If you use this method of allocating HRAM the assembler\n        will NOT choose the short addressing mode in the LD instructions\n        <b class="Sy">LD [$FF00+n8],A</b> and <b class="Sy">LD A,[$FF00+n8]</b>\n        because the actual address calculation is done by the linker. If you\n        find this undesirable you can use <code class="Ic">RSSET</code>\n        <span class="No">/</span> <code class="Ic">RB</code>\n        <span class="No">/</span> <code class="Ic">RW</code> instead or use the\n        <b class="Sy">LDH [$FF00+n8],A</b> and <b class="Sy">LDH\n        A,[$FF00+n8]</b> syntax instead. This forces the assembler to emit the\n        correct instruction and the linker to check if the value is in the\n        correct range.</p>\n  </dd>\n</dl>\n<p class="Pp">A section is usually defined as a floating one, but the code can\n    restrict where the linker can place it.</p>\n<p class="Pp">If a section is defined with no indications, it is a floating\n    section. The linker will decide where to place it in the final binary and it\n    has no obligation to follow any specific rules. The following example\n    defines a section that can be placed anywhere in any ROMX bank:</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent"><code class="Li">SECTION\n  &quot;CoolStuff&quot;,ROMX</code></div>\n<p class="Pp">If it is needed, the following syntax can be used to fix the base\n    address of the section:</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent"><code class="Li">SECTION\n  &quot;CoolStuff&quot;,ROMX[$4567]</code></div>\n<p class="Pp">It won\'t, however, fix the bank number, which is left to the\n    linker. If you also want to specify the bank you can do:</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent"><code class="Li">SECTION\n  &quot;CoolStuff&quot;,ROMX[$4567],BANK[3]</code></div>\n<p class="Pp">And if you only want to force the section into a certain bank, and\n    not it\'s position within the bank, that\'s also possible:</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent"><code class="Li">SECTION\n  &quot;CoolStuff&quot;,ROMX,BANK[7]</code></div>\n<p class="Pp">In addition, you can specify byte alignment for a section. This\n    ensures that the section starts at a memory address where the given number\n    of least-significant bits are 0. This can be used along with\n    <code class="Ic">BANK</code>, if desired. However, if an alignment is\n    specified, the base address must be left unassigned. This can be useful when\n    using DMA to copy data or when it is needed to align the start of an array\n    to 256 bytes to optimize the code that accesses it.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent"><code class="Li">SECTION &quot;OAM\n  Data&quot;,WRAM0,ALIGN[8]; align to 256 bytes</code></div>\n<p class="Pp"></p>\n<div class="Bd Bd-indent"><code class="Li">SECTION &quot;VRAM\n  Data&quot;,ROMX,BANK[2],ALIGN[4]; align to 16 bytes</code></div>\n<p class="Pp">HINT: If you think this is a lot of typing for doing a simple\n    <code class="Ic">ORG</code> type thing you can quite easily write an\n    intelligent macro (called <code class="Ic">ORG</code> for example) that uses\n    <code class="Ic">@</code> for the section name and determines correct\n    section type etc as arguments for <code class="Ic">SECTION</code>.</p>\n<p class="Pp"><code class="Ic">POPS</code> and <code class="Ic">PUSHS</code>\n    provide the interface to the section stack. <code class="Ic">PUSHS</code>\n    will push the current section context on the section stack.\n    <code class="Ic">POPS</code> can then later be used to restore it. Useful\n    for defining sections in included files when you don\'t want to destroy the\n    section context for the program that included your file. The number of\n    entries in the stack is limited only by the amount of memory in your\n    machine.</p>\n<p class="Pp">Sections can also be placed by using a linkerscript file. The\n    format is described in <a class="Xr" href="./rgblink.5">rgblink(5)</a>. They\n    allow the user to place floating sections in the desired bank in the order\n    specified in the script. This is useful if the sections can\'t be placed at\n    an address manually because the size may change, but they have to be\n    together.</p>\n</section>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="SYMBOLS"><a class="permalink" href="#SYMBOLS">SYMBOLS</a></h2>\n<section class="Ss">\n<h3 class="Ss" id="Symbols"><a class="permalink" href="#Symbols">Symbols</a></h3>\n<p class="Pp">RGBDS supports several types of symbols:</p>\n<dl class="Bl-hang">\n  <dt id="Label"><a class="permalink" href="#Label"><b class="Sy">Label</b></a></dt>\n  <dd>Used to assign a memory location with a name</dd>\n  <dt id="EQUate"><a class="permalink" href="#EQUate"><b class="Sy">EQUate</b></a></dt>\n  <dd>Give a constant a name.</dd>\n  <dt id="SET"><a class="permalink" href="#SET"><b class="Sy">SET</b></a></dt>\n  <dd>Almost the same as EQUate, but you can change the value of a SET during\n      assembling.</dd>\n  <dt id="Structure"><a class="permalink" href="#Structure"><b class="Sy">Structure</b></a>\n    (<a class="permalink" href="#the"><b class="Sy" id="the">the RS\n    group</b></a>)</dt>\n  <dd>Define a structure easily.</dd>\n  <dt><b class="Sy">String equate</b> (<b class="Sy">EQUS</b>)</dt>\n  <dd>Give a frequently used string a name. Can also be used as a mini-macro,\n      like #define in C.</dd>\n  <dt id="MACRO"><a class="permalink" href="#MACRO"><b class="Sy">MACRO</b></a></dt>\n  <dd>A block of code or pseudo instructions that you invoke like any other\n      mnemonic. You can give them arguments too.</dd>\n</dl>\n<p class="Pp">A symbol cannot have the same name as a reserved keyword.</p>\n<dl class="Bl-hang">\n  <dt id="Label~2"><a class="permalink" href="#Label~2"><b class="Sy">Label</b></a></dt>\n  <dd>\n    <p class="Pp">One of the assembler\'s main tasks is to keep track of\n        addresses for you so you don\'t have to remember obscure numbers but can\n        make do with a meaningful name, a label.</p>\n    <p class="Pp">This can be done in a number of ways:</p>\n    <div class="Bd Pp Bd-indent Li">\n    <pre>GlobalLabel\nAnotherGlobal:\n.locallabel\n.yet_a_local:\nAnotherGlobal.with_another_local:\nThisWillBeExported:: ;note the two colons\nThisWillBeExported.too::</pre>\n    </div>\n    <p class="Pp">In the line where a label is defined there musn\'t be any\n        whitespace before it. Local labels are only accessible within the scope\n        they are defined. A scope starts after a global label and ends at the\n        next global label. Declaring a label (global or local) with :: does an\n        EXPORT at the same time. Local labels can be declared as scope.local or\n        simply as as .local. If the former notation is used, the scope must be\n        the actual current scope.</p>\n    <p class="Pp">Labels will normally change their value during the link\n        process and are thus not constant. The exception is the case in which\n        the base address of a section is fixed, so the address of the label is\n        known at assembly time.</p>\n    <p class="Pp">The subtraction of two labels is only constant (known at\n        assembly time) if they are two local labels that belong to the same\n        scope, or they are two global labels that belong to sections with fixed\n        base addresses.</p>\n  </dd>\n  <dt id="EQU"><a class="permalink" href="#EQU"><b class="Sy">EQU</b></a></dt>\n  <dd>\n    <p class="Pp">EQUates are constant symbols. They can, for example, be used\n        for things such as bit-definitions of hardware registers.</p>\n    <p class="Pp"></p>\n    <div class="Bd Bd-indent"><code class="Li">EXIT_OK EQU $00</code></div>\n    <div class="Bd Bd-indent"><code class="Li">EXIT_FAILURE EQU $01</code></div>\n    <p class="Pp">Note that a colon (:) following the label-name is not allowed.\n        EQUates cannot be exported and imported. They don\'t change their value\n        during the link process.</p>\n  </dd>\n  <dt id="SET~2"><a class="permalink" href="#SET~2"><b class="Sy">SET</b></a></dt>\n  <dd>\n    <p class="Pp">SETs are similar to EQUates. They are also constant symbols in\n        the sense that their values are defined during the assembly process.\n        These symbols are normally used in macros.</p>\n    <div class="Bd Pp Bd-indent Li">\n    <pre>ARRAY_SIZE EQU 4\nCOUNT      SET 2\nCOUNT      SET ARRAY_SIZE+COUNT</pre>\n    </div>\n    <p class="Pp">Note that a colon (:) following the label-name is not allowed.\n        SETs cannot be exported and imported. Alternatively you can use = as a\n        synonym for SET.</p>\n    <p class="Pp"></p>\n    <div class="Bd Bd-indent"><code class="Li">COUNT = 2</code></div>\n  </dd>\n  <dt id="RSSET"><a class="permalink" href="#RSSET"><b class="Sy">RSSET</b></a>,\n    <b class="Sy">RSRESET</b>, <b class="Sy">RB</b>, <b class="Sy">RW</b></dt>\n  <dd>\n    <p class="Pp">The RS group of commands is a handy way of defining\n        structures:</p>\n    <div class="Bd Pp Bd-indent Li">\n    <pre>              RSRESET\nstr_pStuff    RW   1\nstr_tData     RB   256\nstr_bCount    RB   1\nstr_SIZEOF    RB   0</pre>\n    </div>\n    <p class="Pp">The example defines four equated symbols:</p>\n    <div class="Bd Pp Bd-indent Li">\n    <pre>str_pStuff = 0\nstr_tData  = 2\nstr_bCount = 258\nstr_SIZEOF = 259</pre>\n    </div>\n    <p class="Pp">There are four commands in the RS group of commands:</p>\n    <table class="Bl-column">\n      <tr id="Command">\n        <td><a class="permalink" href="#Command"><b class="Sy">Command</b></a></td>\n        <td></td>\n        <td></td>\n        <td><a class="permalink" href="#Meaning"><b class="Sy" id="Meaning">Meaning</b></a></td>\n      </tr>\n      <tr id="RSRESET">\n        <td><a class="permalink" href="#RSRESET"><code class="Ic">RSRESET</code></a></td>\n        <td></td>\n        <td>Resets the _RS counter to zero.</td>\n      </tr>\n      <tr id="RSSET~2">\n        <td><a class="permalink" href="#RSSET~2"><code class="Ic">RSSET</code></a>\n          <var class="Ar">constexpr</var></td>\n        <td>Sets the <code class="Ic">_RS</code> <span class="No">counter\n          to</span> <var class="Ar">constexpr</var>.</td>\n      </tr>\n      <tr id="RB">\n        <td><a class="permalink" href="#RB"><code class="Ic">RB</code></a>\n          <var class="Ar">constexpr</var></td>\n        <td>Sets the preceding symbol to <code class="Ic">_RS</code>\n          <span class="No">and adds</span> <var class="Ar">constexpr</var>\n          <span class="No">to</span> <code class="Ic">_RS</code>.</td>\n      </tr>\n      <tr id="RW">\n        <td><a class="permalink" href="#RW"><code class="Ic">RW</code></a>\n          <var class="Ar">constexpr</var></td>\n        <td>Sets the preceding symbol to <code class="Ic">_RS</code>\n          <span class="No">and adds</span> <var class="Ar">constexpr</var>\n          <span class="No">* 2 to</span> <code class="Ic">_RS.</code></td>\n      </tr>\n      <tr id="RL">\n        <td><a class="permalink" href="#RL"><code class="Ic">RL</code></a>\n          <var class="Ar">constexpr</var></td>\n        <td>Sets the preceding symbol to <code class="Ic">_RS</code>\n          <span class="No">and adds</span> <var class="Ar">constexpr</var>\n          <span class="No">* 4 to</span> <code class="Ic">_RS.</code></td>\n      </tr>\n    </table>\n    <p class="Pp" id="RS">Note that a colon (:) following the symbol-name is not\n        allowed. <a class="permalink" href="#RS"><b class="Sy">RS</b></a>\n        symbols cannot be exported and imported. They don\'t change their value\n        during the link process.</p>\n  </dd>\n  <dt id="EQUS"><a class="permalink" href="#EQUS"><b class="Sy">EQUS</b></a></dt>\n  <dd>\n    <p class="Pp">EQUS is used to define string-symbols. Wherever the assembler\n        meets a string symbol its name is replaced with its value. If you are\n        familiar with C you can think of it as the same as #define.</p>\n    <div class="Bd Pp Bd-indent Li">\n    <pre>COUNTREG EQUS &quot;[hl+]&quot;\nld a,COUNTREG\n\nPLAYER_NAME EQUS &quot;\\&quot;John\\&quot;&quot;\ndb PLAYER_NAME</pre>\n    </div>\n    <p class="Pp">Note that : following the label-name is not allowed, and that\n        strings must be quoted to be useful.</p>\n    <p class="Pp">This will be interpreted as:</p>\n    <p class="Pp"></p>\n    <div class="Bd Bd-indent"><code class="Li">ld a,[hl+]</code></div>\n    <div class="Bd Bd-indent"><code class="Li">db &quot;John&quot;</code></div>\n    <p class="Pp">String-symbols can also be used to define small one-line\n        macros:</p>\n    <p class="Pp"></p>\n    <div class="Bd Bd-indent"><code class="Li">PUSHA EQUS &quot;push af\\npush\n      bc\\npush de\\npush hl\\n&quot;</code></div>\n    <p class="Pp">Note that a colon (:) following the label-name is not allowed.\n        String equates can\'t be exported or imported.</p>\n    <p class="Pp"><b class="Sy">Important note</b>: An EQUS can be expanded to a\n        string that contains another EQUS and it will be expanded as well. This\n        means that, if you aren\'t careful, you may trap the assembler into an\n        infinite loop if there\'s a circular dependency in the expansions. Also,\n        a MACRO can have inside an EQUS which references the same MACRO, which\n        has the same problem.</p>\n  </dd>\n  <dt id="MACRO~2"><a class="permalink" href="#MACRO~2"><b class="Sy">MACRO</b></a></dt>\n  <dd>\n    <p class="Pp">One of the best features of an assembler is the ability to\n        write macros for it. Macros also provide a method of passing arguments\n        to them and they can then react to the input using IF-constructs.</p>\n    <div class="Bd Pp Bd-indent Li">\n    <pre>MyMacro: MACRO\n         ld   a,80\n         call MyFunc\n         ENDM</pre>\n    </div>\n    <p class="Pp">Note that a colon (:) following the macro-name is required.\n        Macros can\'t be exported or imported. It\'s valid to call a macro from a\n        macro (yes, even the same one).</p>\n    <p class="Pp">The above example is a very simple macro. You execute the\n        macro by typing its name.</p>\n    <div class="Bd Pp Bd-indent Li">\n    <pre>         add  a,b\n         ld   sp,hl\n         MyMacro ;This will be expanded\n         sub  a,87</pre>\n    </div>\n    <p class="Pp">When the assembler meets MyMacro it will insert the\n        macrodefinition (the text enclosed in <code class="Ic">MACRO</code> /\n        <code class="Ic">ENDM</code>).</p>\n    <p class="Pp">Suppose your macro contains a loop.</p>\n    <div class="Bd Pp Bd-indent Li">\n    <pre>LoopyMacro: MACRO\n            xor  a,a\n.loop       ld   [hl+],a\n            dec  c\n            jr   nz,.loop\n            ENDM</pre>\n    </div>\n    <p class="Pp">This is fine. That is, if you only use the macro once per\n        scope. To get around this problem there is a special label string equate\n        called <code class="Ic">\\@</code> that you can append to your labels and\n        it will then expand to a unique string.</p>\n    <p class="Pp"><code class="Ic">\\@</code> also works in REPT-blocks should\n        you have any loops there.</p>\n    <div class="Bd Pp Bd-indent Li">\n    <pre>LoopyMacro: MACRO\n            xor  a,a\n.loop\\@     ld   [hl+],a\n            dec  c\n            jr   nz,.loop\\@\n            ENDM</pre>\n    </div>\n    <p class="Pp"><b class="Sy">Important note</b>: Since a MACRO can call\n        itself (or a different MACRO that calls the first one) there can be\n        problems of circular dependency. They trap the assembler in an infinite\n        loop, so you have to be careful when using recursion with MACROs. Also,\n        a MACRO can have inside an EQUS which references the same MACRO, which\n        has the same problem.</p>\n    <p class="Pp" id="Macro"><a class="permalink" href="#Macro"><b class="Sy">Macro\n        Arguments</b></a></p>\n    <p class="Pp">I\'d like LoopyMacro a lot better if I didn\'t have to pre-load\n        the registers with values and then call it. What I\'d like is the ability\n        to pass it arguments and it then loaded the registers itself.</p>\n    <p class="Pp">And I can do that. In macros you can get the arguments by\n        using the special macro string equates <code class="Ic">\\1</code>\n        through <code class="Ic">\\9</code>, <code class="Ic">\\1</code> being the\n        first argument specified on the calling of the macro.</p>\n    <div class="Bd Pp Bd-indent Li">\n    <pre>LoopyMacro: MACRO\n            ld   hl,\\1\n            ld   c,\\2\n            xor  a,a\n.loop\\@     ld   [hl+],a\n            dec  c\n            jr   nz,.loop\\@\n            ENDM</pre>\n    </div>\n    <p class="Pp">Now I can call the macro specifying two arguments. The first\n        being the address and the second being a bytecount. The macro will then\n        reset all bytes in this range.</p>\n    <p class="Pp"></p>\n    <div class="Bd Bd-indent"><code class="Li">LoopyMacro MyVars,54</code></div>\n    <p class="Pp">Arguments are passed as string equates. There\'s no need to\n        enclose them in quotes. An expression will not be evaluated first but\n        passed directly. This means that it\'s probably a very good idea to use\n        brackets around <code class="Ic">\\1</code> to <code class="Ic">\\9</code>\n        if you perform further calculations on them. For instance, if you pass 1\n        + 2 as the first argument and then do <code class="Ic">PRINTV</code>\n        <code class="Ic">\\1</code> * 2 you will get the value 5 on screen and\n        not 6 as you might have expected.</p>\n    <p class="Pp">In reality, up to 256 arguments can be passed to a macro, but\n        you can only use the first 9 like this. If you want to use the rest, you\n        need to use the keyword <code class="Ic">SHIFT</code>.</p>\n    <p class="Pp"><code class="Ic">SHIFT</code> is a special command only\n        available in macros. Very useful in REPT-blocks. It will\n        &quot;shift&quot; the arguments by one &quot;to the left&quot;.\n        <code class="Ic">\\1</code> will get the value of\n        <code class="Ic">\\2</code>, <code class="Ic">\\2</code> will get the\n        value in <code class="Ic">\\3</code> and so forth.</p>\n    <p class="Pp">This is the only way of accessing the value of arguments from\n        10 to 256.</p>\n  </dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Exporting_and_importing_symbols"><a class="permalink" href="#Exporting_and_importing_symbols">Exporting\n  and importing symbols</a></h3>\n<p class="Pp">Importing and exporting of symbols is a feature that is very\n    useful when your project spans many source-files and, for example, you need\n    to jump to a routine defined in another file.</p>\n<p class="Pp">Exporting of symbols has to be done manually, importing is done\n    automatically if the assembler doesn\'t know where a symbol is defined.</p>\n<p class="Pp"><code class="Ic">EXPORT</code> <var class="Ar">label</var> [,\n    <var class="Ar">label</var> , <span class="No">...</span>]</p>\n<p class="Pp">The assembler will make label accessible to other files during the\n    link process.</p>\n<p class="Pp"><code class="Ic">GLOBAL</code> <var class="Ar">label</var> [,\n    <var class="Ar">label</var> , <span class="No">...</span>]</p>\n<p class="Pp">If label is defined during the assembly it will be exported, if\n    not, it will be imported. Handy (very!) for include-files. Note that, since\n    importing is done automatically, this keyword has the same effect as\n    <code class="Ic">EXPORT</code>.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Purging_symbols"><a class="permalink" href="#Purging_symbols">Purging\n  symbols</a></h3>\n<p class="Pp"><code class="Ic">PURGE</code> allows you to completely remove a\n    symbol from the symbol table as if it had never existed. USE WITH EXTREME\n    CAUTION!!! I can\'t stress this enough, you seriously need to know what you\n    are doing. DON\'T purge symbol that you use in expressions the linker needs\n    to calculate. In fact, it\'s probably not even safe to purge anything other\n    than string symbols and macros.</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>Kamikaze EQUS  &quot;I don\'t want to live anymore&quot;\nAOLer    EQUS  &quot;Me too&quot;\n         PURGE Kamikaze, AOLer</pre>\n</div>\n<p class="Pp">Note that string symbols that are part of a\n    <code class="Ic">PURGE</code> command WILL NOT BE EXPANDED as the ONLY\n    exception to this rule.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Predeclared_Symbols"><a class="permalink" href="#Predeclared_Symbols">Predeclared\n  Symbols</a></h3>\n<p class="Pp">The following symbols are defined by the assembler:</p>\n<table class="Bl-column Bd-indent">\n  <tr id="Type">\n    <td><a class="permalink" href="#Type"><b class="Sy">Type</b></a></td>\n    <td><a class="permalink" href="#Name"><b class="Sy" id="Name">Name</b></a></td>\n    <td></td>\n    <td><a class="permalink" href="#Contents"><b class="Sy" id="Contents">Contents</b></a></td>\n  </tr>\n  <tr id="EQU~2">\n    <td><a class="permalink" href="#EQU~2"><code class="Ic">EQU</code></a></td>\n    <td><code class="Ic">@</code></td>\n    <td></td>\n    <td>PC value</td>\n  </tr>\n  <tr id="EQU~3">\n    <td><a class="permalink" href="#EQU~3"><code class="Ic">EQU</code></a></td>\n    <td><a class="permalink" href="#_PI"><code class="Ic" id="_PI">_PI</code></a></td>\n    <td></td>\n    <td>Fixed point &#x03C0;</td>\n  </tr>\n  <tr id="SET~3">\n    <td><a class="permalink" href="#SET~3"><code class="Ic">SET</code></a></td>\n    <td><a class="permalink" href="#_RS"><code class="Ic" id="_RS">_RS</code></a></td>\n    <td></td>\n    <td>_RS Counter</td>\n  </tr>\n  <tr id="EQU~4">\n    <td><a class="permalink" href="#EQU~4"><code class="Ic">EQU</code></a></td>\n    <td><a class="permalink" href="#_NARG"><code class="Ic" id="_NARG">_NARG</code></a></td>\n    <td></td>\n    <td>Number of arguments passed to macro</td>\n  </tr>\n  <tr id="EQU~5">\n    <td><a class="permalink" href="#EQU~5"><code class="Ic">EQU</code></a></td>\n    <td><a class="permalink" href="#__LINE__"><code class="Ic" id="__LINE__">__LINE__</code></a></td>\n    <td></td>\n    <td>The current line number</td>\n  </tr>\n  <tr id="EQUS~2">\n    <td><a class="permalink" href="#EQUS~2"><code class="Ic">EQUS</code></a></td>\n    <td><a class="permalink" href="#__FILE__"><code class="Ic" id="__FILE__">__FILE__</code></a></td>\n    <td></td>\n    <td>The current filename</td>\n  </tr>\n  <tr id="EQUS~3">\n    <td><a class="permalink" href="#EQUS~3"><code class="Ic">EQUS</code></a></td>\n    <td><a class="permalink" href="#__DATE__"><code class="Ic" id="__DATE__">__DATE__</code></a></td>\n    <td></td>\n    <td>Today\'s date</td>\n  </tr>\n  <tr id="EQUS~4">\n    <td><a class="permalink" href="#EQUS~4"><code class="Ic">EQUS</code></a></td>\n    <td><a class="permalink" href="#__TIME__"><code class="Ic" id="__TIME__">__TIME__</code></a></td>\n    <td></td>\n    <td>The current time</td>\n  </tr>\n  <tr id="EQUS~5">\n    <td><a class="permalink" href="#EQUS~5"><code class="Ic">EQUS</code></a></td>\n    <td><a class="permalink" href="#__ISO_8601_LOCAL__"><code class="Ic" id="__ISO_8601_LOCAL__">__ISO_8601_LOCAL__</code></a></td>\n    <td>ISO 8601 timestamp (local)</td>\n  </tr>\n  <tr id="EQUS~6">\n    <td><a class="permalink" href="#EQUS~6"><code class="Ic">EQUS</code></a></td>\n    <td><a class="permalink" href="#__ISO_8601_UTC__"><code class="Ic" id="__ISO_8601_UTC__">__ISO_8601_UTC__</code></a></td>\n    <td>ISO 8601 timestamp (UTC)</td>\n  </tr>\n  <tr id="EQU~6">\n    <td><a class="permalink" href="#EQU~6"><code class="Ic">EQU</code></a></td>\n    <td><a class="permalink" href="#__UTC_YEAR__"><code class="Ic" id="__UTC_YEAR__">__UTC_YEAR__</code></a></td>\n    <td></td>\n    <td>Today\'s year</td>\n  </tr>\n  <tr id="EQU~7">\n    <td><a class="permalink" href="#EQU~7"><code class="Ic">EQU</code></a></td>\n    <td><a class="permalink" href="#__UTC_MONTH__"><code class="Ic" id="__UTC_MONTH__">__UTC_MONTH__</code></a></td>\n    <td></td>\n    <td>Today\'s month number, 1-12</td>\n  </tr>\n  <tr id="EQU~8">\n    <td><a class="permalink" href="#EQU~8"><code class="Ic">EQU</code></a></td>\n    <td><a class="permalink" href="#__UTC_DAY__"><code class="Ic" id="__UTC_DAY__">__UTC_DAY__</code></a></td>\n    <td></td>\n    <td>Today\'s day of the month, 1-31</td>\n  </tr>\n  <tr id="EQU~9">\n    <td><a class="permalink" href="#EQU~9"><code class="Ic">EQU</code></a></td>\n    <td><a class="permalink" href="#__UTC_HOUR__"><code class="Ic" id="__UTC_HOUR__">__UTC_HOUR__</code></a></td>\n    <td></td>\n    <td>Current hour, 0-23</td>\n  </tr>\n  <tr id="EQU~10">\n    <td><a class="permalink" href="#EQU~10"><code class="Ic">EQU</code></a></td>\n    <td><a class="permalink" href="#__UTC_MINUTE__"><code class="Ic" id="__UTC_MINUTE__">__UTC_MINUTE__</code></a></td>\n    <td></td>\n    <td>Current minute, 0-59</td>\n  </tr>\n  <tr id="EQU~11">\n    <td><a class="permalink" href="#EQU~11"><code class="Ic">EQU</code></a></td>\n    <td><a class="permalink" href="#__UTC_SECOND__"><code class="Ic" id="__UTC_SECOND__">__UTC_SECOND__</code></a></td>\n    <td></td>\n    <td>Current second, 0-59</td>\n  </tr>\n  <tr id="EQU~12">\n    <td><a class="permalink" href="#EQU~12"><code class="Ic">EQU</code></a></td>\n    <td><a class="permalink" href="#__RGBDS_MAJOR__"><code class="Ic" id="__RGBDS_MAJOR__">__RGBDS_MAJOR__</code></a></td>\n    <td></td>\n    <td>Major version number of RGBDS.</td>\n  </tr>\n  <tr id="EQU~13">\n    <td><a class="permalink" href="#EQU~13"><code class="Ic">EQU</code></a></td>\n    <td><a class="permalink" href="#__RGBDS_MINOR__"><code class="Ic" id="__RGBDS_MINOR__">__RGBDS_MINOR__</code></a></td>\n    <td></td>\n    <td>Minor version number of RGBDS.</td>\n  </tr>\n  <tr id="EQU~14">\n    <td><a class="permalink" href="#EQU~14"><code class="Ic">EQU</code></a></td>\n    <td><a class="permalink" href="#__RGBDS_PATCH__"><code class="Ic" id="__RGBDS_PATCH__">__RGBDS_PATCH__</code></a></td>\n    <td></td>\n    <td>Patch version number of RGBDS.</td>\n  </tr>\n</table>\n</section>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="DEFINING_DATA"><a class="permalink" href="#DEFINING_DATA">DEFINING\n  DATA</a></h2>\n<section class="Ss">\n<h3 class="Ss" id="Defining_constant_data"><a class="permalink" href="#Defining_constant_data">Defining\n  constant data</a></h3>\n<p class="Pp"><code class="Ic">DB</code> defines a list of bytes that will be\n    stored in the final image. Ideal for tables and text (which is not\n    zero-terminated).</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent"><code class="Li">DB 1,2,3,4,&quot;This is a\n  string&quot;</code></div>\n<p class="Pp">Alternatively, you can use <code class="Ic">DW</code> to store a\n    list of words (16-bits) or <code class="Ic">DL</code> to store a list of\n    doublewords/longs (32-bits). Strings are not allowed as arguments to\n    <code class="Ic">DW</code> and <code class="Ic">DL</code>.</p>\n<p class="Pp">You can also use <code class="Ic">DB</code>,\n    <code class="Ic">DW</code> and <code class="Ic">DL</code> without arguments,\n    or leaving empty elements at any point in the list. This works exactly like\n    <b class="Sy">DS 1</b>, <b class="Sy">DS 2</b> and <b class="Sy">DS 4</b>\n    respectively. Consequently, <code class="Ic">DB</code>,\n    <code class="Ic">DW</code> and <code class="Ic">DL</code> can be used in a\n    <b class="Sy">WRAM0</b> <span class="No">/</span> <b class="Sy">WRAMX</b>\n    <span class="No">/</span> <b class="Sy">HRAM</b> <span class="No">/</span>\n    <b class="Sy">VRAM</b> <span class="No">/</span> <b class="Sy">SRAM</b>\n    section.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Declaring_variables_in_a_RAM_section"><a class="permalink" href="#Declaring_variables_in_a_RAM_section">Declaring\n  variables in a RAM section</a></h3>\n<p class="Pp"><code class="Ic">DS</code> allocates a number of bytes. The\n    content is undefined. This is the preferred method of allocationg space in a\n    RAM section. You can, however, use <code class="Ic">DB</code>,\n    <code class="Ic">DW</code> and <code class="Ic">DL</code> without any\n    arguments instead.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent"><code class="Li">DS str_SIZEOF ;allocate str_SIZEOF\n  bytes</code></div>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Including_binary_files"><a class="permalink" href="#Including_binary_files">Including\n  binary files</a></h3>\n<p class="Pp">You probably have some graphics you\'d like to include. Use\n    <code class="Ic">INCBIN</code> to include a raw binary file as it is. If the\n    file isn\'t found in the current directory, the include-path list passed to\n    the linker on the command line will be searched.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent"><code class="Li">INCBIN\n  &quot;titlepic.bin&quot;</code></div>\n<div class="Bd Bd-indent"><code class="Li">INCBIN\n  &quot;sprites/hero.bin&quot;&#x00A0;; UNIX</code></div>\n<div class="Bd Bd-indent"><code class="Li">INCBIN\n  &quot;sprites\\\\hero.bin&quot;&#x00A0;; Windows</code></div>\n<p class="Pp">You can also include only part of a file with\n    <code class="Ic">INCBIN</code>. The example below includes 256 bytes from\n    data.bin starting from byte 78.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent"><code class="Li">INCBIN\n  &quot;data.bin&quot;,78,256</code></div>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Unions"><a class="permalink" href="#Unions">Unions</a></h3>\n<p class="Pp">Unions allow multiple memory allocations to share the same space\n    in memory, like unions in C. This allows you to easily reuse memory for\n    different purposes, depending on the game\'s state.</p>\n<p class="Pp">You create unions using the <code class="Ic">UNION</code>,\n    <code class="Ic">NEXTU</code> and <code class="Ic">ENDU</code> keywords.\n    <code class="Ic">NEXTU</code> lets you create a new block of allocations,\n    and you may use it as many times within a union as necessary.</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>UNION\nName: ds 8\nNickname: ds 8\nNEXTU\nHealth: dw\nSomething: ds 3\nLives: db\nNEXTU\nTemporary: ds 19\nENDU</pre>\n</div>\n<p class="Pp">This union will use up 19 bytes, as this is the size of the\n    largest block (the last one, containing \'Temporary\'). Of course, as \'Name\',\n    \'Health\', and \'Temporary\' all point to the same memory locations, writes to\n    any one of these will affect values read from the others.</p>\n<p class="Pp">Unions may be used in any section, but code and data may not be\n    included.</p>\n</section>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="THE_MACRO_LANGUAGE"><a class="permalink" href="#THE_MACRO_LANGUAGE">THE\n  MACRO LANGUAGE</a></h2>\n<section class="Ss">\n<h3 class="Ss" id="Printing_things_during_assembly"><a class="permalink" href="#Printing_things_during_assembly">Printing\n  things during assembly</a></h3>\n<p class="Pp">These three instructions type text and values to stdout. Useful\n    for debugging macros or wherever you may feel the need to tell yourself some\n    important information.</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>PRINTT &quot;I\'m the greatest programmer in the whole wide world\\n&quot;\nPRINTV (2+3)/5\nPRINTF MUL(3.14,3987.0)</pre>\n</div>\n<dl class="Bl-inset">\n  <dt id="PRINTT"><a class="permalink" href="#PRINTT"><code class="Ic">PRINTT</code></a></dt>\n  <dd>prints out a string.</dd>\n  <dt id="PRINTV"><a class="permalink" href="#PRINTV"><code class="Ic">PRINTV</code></a></dt>\n  <dd>prints out an integer value or, as in the example, the result of a\n      calculation. Unsurprisingly, you can also print out a constant symbols\n      value.</dd>\n  <dt id="PRINTF"><a class="permalink" href="#PRINTF"><code class="Ic">PRINTF</code></a></dt>\n  <dd>prints out a fixed point value.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Automatically_repeating_blocks_of_code"><a class="permalink" href="#Automatically_repeating_blocks_of_code">Automatically\n  repeating blocks of code</a></h3>\n<p class="Pp">Suppose you\'re feeling lazy and you want to unroll a time\n    consuming loop. <code class="Ic">REPT</code> is here for that purpose.\n    Everything between <code class="Ic">REPT</code> and\n    <code class="Ic">ENDR</code> will be repeated a number of times just as if\n    you done a copy/paste operation yourself. The following example will\n    assemble <a class="permalink" href="#add"><b class="Sy" id="add">add\n    a,c</b></a> four times:</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>REPT 4\nadd  a,c\nENDR</pre>\n</div>\n<p class="Pp">You can also use <code class="Ic">REPT</code> to generate tables\n    on the fly:</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>; --\n; -- Generate a 256 byte sine table with values between 0 and 128\n; --\nANGLE SET   0.0\n      REPT  256\n      DB    (MUL(64.0,SIN(ANGLE))+64.0)&gt;&gt;16\nANGLE SET ANGLE+256.0\n      ENDR</pre>\n</div>\n<p class="Pp"><code class="Ic">REPT</code> is also very useful in recursive\n    macros and, as in macros, you can also use the special label operator\n    <code class="Ic">\\@</code>. REPT-blocks can be nested.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Aborting_the_assembly_process"><a class="permalink" href="#Aborting_the_assembly_process">Aborting\n  the assembly process</a></h3>\n<p class="Pp"><code class="Ic">FAIL</code> and <code class="Ic">WARN</code> can\n    be used to print errors and warnings respectively during the assembly\n    process. This is especially useful for macros that get an invalid argument.\n    <code class="Ic">FAIL</code> and <code class="Ic">WARN</code> take a string\n    as the only argument and they will print this string out as a normal error\n    with a line number.</p>\n<p class="Pp"><code class="Ic">FAIL</code> stops assembling immediately while\n    <code class="Ic">WARN</code> shows the message but continues afterwards.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Including_other_source_files"><a class="permalink" href="#Including_other_source_files">Including\n  other source files</a></h3>\n<p class="Pp">Use <code class="Ic">INCLUDE</code> to process another\n    assembler-file and then return to the current file when done. If the file\n    isn\'t found in the current directory the include-path list will be searched.\n    You may nest <code class="Ic">INCLUDE</code> calls infinitely (or until you\n    run out of memory, whichever comes first).</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent"><code class="Li">INCLUDE\n  &quot;irq.inc&quot;</code></div>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Conditional_assembling"><a class="permalink" href="#Conditional_assembling">Conditional\n  assembling</a></h3>\n<p class="Pp">The four commands <code class="Ic">IF</code>,\n    <code class="Ic">ELIF</code>, <code class="Ic">ELSE</code>, and\n    <code class="Ic">ENDC</code> are used to conditionally assemble parts of\n    your file. This is a powerful feature commonly used in macros.</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>IF NUM &lt; 0\n  PRINTT &quot;NUM &lt; 0\\n&quot;\nELIF NUM == 0\n  PRINTT &quot;NUM == 0\\n&quot;\nELSE\n  PRINTT &quot;NUM &gt; 0\\n&quot;\nENDC</pre>\n</div>\n<p class="Pp">The <code class="Ic">ELIF</code> and <code class="Ic">ELSE</code>\n    blocks are optional. <code class="Ic">IF</code> <span class="No">/</span>\n    <code class="Ic">ELIF</code> <span class="No">/</span>\n    <code class="Ic">ELSE</code> <span class="No">/</span>\n    <code class="Ic">ENDC</code> blocks can be nested.</p>\n<p class="Pp">Note that if an <code class="Ic">ELSE</code> block is found before\n    an <code class="Ic">ELIF</code> block, the <code class="Ic">ELIF</code>\n    block will be ignored. All <code class="Ic">ELIF</code> blocks must go\n    before the <code class="Ic">ELSE</code> block. Also, if there is more than\n    one <code class="Ic">ELSE</code> block, all of them but the first one are\n    ignored.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Integer_and_Boolean_expressions"><a class="permalink" href="#Integer_and_Boolean_expressions">Integer\n  and Boolean expressions</a></h3>\n<p class="Pp">An expression can be composed of many things. Expressions are\n    always evaluated using signed 32-bit math.</p>\n<p class="Pp">The most basic expression is just a single number.</p>\n<p class="Pp" id="Numeric"><a class="permalink" href="#Numeric"><b class="Sy">Numeric\n    Formats</b></a></p>\n<p class="Pp">There are a number of numeric formats.</p>\n<p class="Pp"></p>\n<ul class="Bl-dash Bl-compact">\n  <li>Hexadecimal: $0123456789ABCDEF. Case-insensitive</li>\n  <li>Decimal: 0123456789</li>\n  <li>Octal: &amp;01234567</li>\n  <li>Binary: %01</li>\n  <li>Fixedpoint (16.16): 01234.56789</li>\n  <li>Character constant: &quot;ABYZ&quot;</li>\n  <li>Gameboy graphics: `0123</li>\n</ul>\n<p class="Pp">The last one, Gameboy graphics, is quite interesting and useful.\n    The values are actually pixel values and it converts the\n    &#x201C;chunky&#x201D; data to &#x201C;planar&#x201D; data as used in the\n    Gameboy.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent"><code class="Li">DW `01012323</code></div>\n<p class="Pp">Admittedly, an expression with just a single number is quite\n    boring. To spice things up a bit there are a few operators you can use to\n    perform calculations between numbers.</p>\n<p class="Pp" id="Operators"><a class="permalink" href="#Operators"><b class="Sy">Operators</b></a></p>\n<p class="Pp">A great number of operators you can use in expressions are\n    available (listed in order of precedence):</p>\n<table class="Bl-column Bd-indent">\n  <tr id="Operator">\n    <td><a class="permalink" href="#Operator"><b class="Sy">Operator</b></a></td>\n    <td><a class="permalink" href="#Meaning~2"><b class="Sy" id="Meaning~2">Meaning</b></a></td>\n  </tr>\n  <tr>\n    <td>()</td>\n    <td>Precedence override</td>\n  </tr>\n  <tr id="FUNC()">\n    <td><a class="permalink" href="#FUNC()"><code class="Li">FUNC()</code></a></td>\n    <td>Function call</td>\n  </tr>\n  <tr id="_">\n    <td><a class="permalink" href="#_"><code class="Li">~ + -</code></a></td>\n    <td>Unary not/plus/minus</td>\n  </tr>\n  <tr id="*">\n    <td><a class="permalink" href="#*"><code class="Li">* / %</code></a></td>\n    <td>Multiply/divide/modulo</td>\n  </tr>\n  <tr id="__">\n    <td><a class="permalink" href="#__"><code class="Li">&lt;&lt;\n      &gt;&gt;</code></a></td>\n    <td>Shift left/right</td>\n  </tr>\n  <tr id="&amp;">\n    <td><a class="permalink" href="#&amp;"><code class="Li">&amp;</code></a> |\n      <a class="permalink" href="#_~2"><code class="Li" id="_~2">^</code></a></td>\n    <td>Binary and/or/xor</td>\n  </tr>\n  <tr id="+">\n    <td><a class="permalink" href="#+"><code class="Li">+ -</code></a></td>\n    <td>Add/subtract</td>\n  </tr>\n  <tr id="!=">\n    <td><a class="permalink" href="#!="><code class="Li">!= ==\n      &lt;=</code></a></td>\n    <td>Boolean comparison</td>\n  </tr>\n  <tr id="_=">\n    <td><a class="permalink" href="#_="><code class="Li">&gt;= &lt;\n      &gt;</code></a></td>\n    <td>Boolean comparison (Same precedence as the others)</td>\n  </tr>\n  <tr id="&amp;&amp;">\n    <td><a class="permalink" href="#&amp;&amp;"><code class="Li">&amp;&amp;\n      ||</code></a></td>\n    <td>Boolean and/or</td>\n  </tr>\n  <tr>\n    <td>!</td>\n    <td>Unary Boolean not</td>\n  </tr>\n</table>\n<p class="Pp">The result of the boolean operators is zero if when FALSE and\n    non-zero when TRUE. It is legal to use an integer as the condition for IF\n    blocks. You can use symbols instead of numbers in your expression if you\n    wish.</p>\n<p class="Pp">An expression is said to be constant when it doesn\'t change its\n    value during linking. This basically means that you can\'t use labels in\n    those expressions. The instructions in the macro-language all require\n    expressions that are constant. The only exception is the subtraction of\n    labels in the same section or labels that belong to sections with a fixed\n    base addresses, all of which must be defined in the same source file (the\n    calculation cannot be passed to the object file generated by the assembler).\n    In this case, the result is a constant that can be calculated at assembly\n    time.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Fixed"><a class="permalink" href="#Fixed">Fixed&#x2010;point\n  Expressions</a></h3>\n<p class="Pp">Fixed point constants are basically normal 32-bit constants where\n    the upper 16 bits are used for the integer part and the lower 16 bits are\n    used for the fraction (65536ths). This means that you can use them in normal\n    integer expression, and some integer operators like plus and minus don\'t\n    care whether the operands are integer or fixed-point. You can easily convert\n    a fixed-point number to an integer by shifting it right 16 bits. It follows\n    that you can convert an integer to a fixed-point number by shifting it\n  left.</p>\n<p class="Pp">Some things are different for fixed-point math, though, which is\n    why you have the following functions to use:</p>\n<table class="Bl-column Bd-indent">\n  <tr id="Name~2">\n    <td><a class="permalink" href="#Name~2"><b class="Sy">Name</b></a></td>\n    <td></td>\n    <td><a class="permalink" href="#Operation"><b class="Sy" id="Operation">Operation</b></a></td>\n  </tr>\n  <tr id="DIV(x,y)">\n    <td><a class="permalink" href="#DIV(x,y)"><code class="Li">DIV(x,y)</code></a></td>\n    <td></td>\n    <td>x/y</td>\n  </tr>\n  <tr id="MUL(x,y)">\n    <td><a class="permalink" href="#MUL(x,y)"><code class="Li">MUL(x,y)</code></a></td>\n    <td></td>\n    <td>x*y</td>\n  </tr>\n  <tr id="SIN(x)">\n    <td><a class="permalink" href="#SIN(x)"><code class="Li">SIN(x)</code></a></td>\n    <td></td>\n    <td>sin(x)</td>\n  </tr>\n  <tr id="COS(x)">\n    <td><a class="permalink" href="#COS(x)"><code class="Li">COS(x)</code></a></td>\n    <td></td>\n    <td>cos(x)</td>\n  </tr>\n  <tr id="TAN(x)">\n    <td><a class="permalink" href="#TAN(x)"><code class="Li">TAN(x)</code></a></td>\n    <td></td>\n    <td>tan(x)</td>\n  </tr>\n  <tr id="ASIN(x)">\n    <td><a class="permalink" href="#ASIN(x)"><code class="Li">ASIN(x)</code></a></td>\n    <td></td>\n    <td>arcsin(x)</td>\n  </tr>\n  <tr id="ACOS(x)">\n    <td><a class="permalink" href="#ACOS(x)"><code class="Li">ACOS(x)</code></a></td>\n    <td></td>\n    <td>arccos(x)</td>\n  </tr>\n  <tr id="ATAN(x)">\n    <td><a class="permalink" href="#ATAN(x)"><code class="Li">ATAN(x)</code></a></td>\n    <td></td>\n    <td>arctan(x)</td>\n  </tr>\n  <tr id="ATAN2(x,y)">\n    <td><a class="permalink" href="#ATAN2(x,y)"><code class="Li">ATAN2(x,y)</code></a></td>\n    <td>Angle between (x,y) and (1,0)</td>\n  </tr>\n</table>\n<p class="Pp">These functions are extremely useful for automatic generation of\n    various tables. A circle has 65536.0 degrees. Sine values are between [-1.0;\n    1.0].</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>; --\n; -- Generate a 256 byte sine table with values between 0 and 128\n; --\nANGLE SET   0.0\n      REPT  256\n      DB    (MUL(64.0,SIN(ANGLE))+64.0)&gt;&gt;16\nANGLE SET ANGLE+256.0\n      ENDR</pre>\n</div>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="String_Expressions"><a class="permalink" href="#String_Expressions">String\n  Expressions</a></h3>\n<p class="Pp">The most basic string expression is any number of characters\n    contained in double quotes (&quot;for instance&quot;). Like in C, the escape\n    character is \\, and there are a number of commands you can use within a\n    string:</p>\n<table class="Bl-column Bd-indent">\n  <tr id="String">\n    <td><a class="permalink" href="#String"><b class="Sy">String</b></a></td>\n    <td><a class="permalink" href="#Meaning~3"><b class="Sy" id="Meaning~3">Meaning</b></a></td>\n  </tr>\n  <tr>\n    <td><code class="Li">\\\\</code></td>\n    <td>Backslash</td>\n  </tr>\n  <tr>\n    <td><code class="Li">\\&quot;</code></td>\n    <td>Double quote</td>\n  </tr>\n  <tr>\n    <td><code class="Li">\\,</code></td>\n    <td>Comma</td>\n  </tr>\n  <tr>\n    <td><code class="Li">\\{</code></td>\n    <td>Curly bracket left</td>\n  </tr>\n  <tr>\n    <td><code class="Li">\\}</code></td>\n    <td>Curly bracket right</td>\n  </tr>\n  <tr>\n    <td><code class="Li">\\n</code></td>\n    <td>Newline ($0A)</td>\n  </tr>\n  <tr>\n    <td><code class="Li">\\t</code></td>\n    <td>Tab ($09)</td>\n  </tr>\n  <tr>\n    <td><code class="Li">\\1 - \\9</code></td>\n    <td>Macro argument (Only the body of a macros)</td>\n  </tr>\n  <tr>\n    <td><code class="Li">\\@</code></td>\n    <td>Label name suffix (Only in the body of macros and repts)</td>\n  </tr>\n</table>\n<p class="Pp">A funky feature is <b class="Sy">{symbol}</b> withing a string.\n    This will examine the type of the symbol and insert its value accordingly.\n    If symbol is a string symbol, the symbols value is simply copied. If it\'s a\n    numeric symbol, the value is converted to hexadecimal notation and inserted\n    as a string.</p>\n<p class="Pp">HINT: The <b class="Sy">{symbol}</b> construct can also be used\n    outside strings. The symbol\'s value is again inserted as a string. This is\n    just a short way of doing &quot;{symbol}&quot;.</p>\n<p class="Pp">Whenever the macro-language expects a string you can actually use\n    a string expression. This consists of one or more of these function (yes,\n    you can nest them). Note that some of these functions actually return an\n    integer and can be used as part of an integer expression!</p>\n<table class="Bl-column">\n  <tr id="Name~3">\n    <td><a class="permalink" href="#Name~3"><b class="Sy">Name</b></a></td>\n    <td></td>\n    <td></td>\n    <td><a class="permalink" href="#Operation~2"><b class="Sy" id="Operation~2">Operation</b></a></td>\n  </tr>\n  <tr id="STRLEN(string)">\n    <td><a class="permalink" href="#STRLEN(string)"><code class="Li">STRLEN(string)</code></a></td>\n    <td>Returns the number of characters in string</td>\n  </tr>\n  <tr id="STRCAT(str1,str2)">\n    <td><a class="permalink" href="#STRCAT(str1,str2)"><code class="Li">STRCAT(str1,str2)</code></a></td>\n    <td>Appends str2 to str1.</td>\n  </tr>\n  <tr id="STRCMP(str1,str2)">\n    <td><a class="permalink" href="#STRCMP(str1,str2)"><code class="Li">STRCMP(str1,str2)</code></a></td>\n    <td>Returns negative if str1 is alphabetically lower than str2, zero if they\n      match, positive if str1 is greater than str2.</td>\n  </tr>\n  <tr id="STRIN(str1,str2)">\n    <td><a class="permalink" href="#STRIN(str1,str2)"><code class="Li">STRIN(str1,str2)</code></a></td>\n    <td>Returns the position of str2 in str1 or zero if it\'s not present (first\n      character is position 1).</td>\n  </tr>\n  <tr id="STRSUB(str,pos,len)">\n    <td><a class="permalink" href="#STRSUB(str,pos,len)"><code class="Li">STRSUB(str,pos,len)</code></a></td>\n    <td>Returns a substring from str starting at pos (first character is\n      position 1) and with len characters.</td>\n  </tr>\n  <tr id="STRUPR(str)">\n    <td><a class="permalink" href="#STRUPR(str)"><code class="Li">STRUPR(str)</code></a></td>\n    <td>Converts all characters in str to capitals and returns the new\n      string.</td>\n  </tr>\n  <tr id="STRLWR(str)">\n    <td><a class="permalink" href="#STRLWR(str)"><code class="Li">STRLWR(str)</code></a></td>\n    <td>Converts all characters in str to lower case and returns the new\n      string.</td>\n  </tr>\n</table>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Other_functions"><a class="permalink" href="#Other_functions">Other\n  functions</a></h3>\n<p class="Pp">There are a few other functions that do various useful things:</p>\n<table class="Bl-column">\n  <tr id="Name~4">\n    <td><a class="permalink" href="#Name~4"><b class="Sy">Name</b></a></td>\n    <td></td>\n    <td></td>\n    <td><a class="permalink" href="#Operation~3"><b class="Sy" id="Operation~3">Operation</b></a></td>\n  </tr>\n  <tr id="BANK(">\n    <td><a class="permalink" href="#BANK("><code class="Li">BANK(@/str/lbl)</code></a></td>\n    <td>Returns a bank number. If the argument is the symbol\n      <code class="Ic">@,</code> this function returns the bank of the current\n      section. If the argument is a string, it returns the bank of the section\n      that has that name. If the argument is a label, it returns the bank number\n      the label is in. For labels, as the linker has to resolve this, it can\'t\n      be used when the expression has to be constant.</td>\n  </tr>\n  <tr id="DEF(label)">\n    <td><a class="permalink" href="#DEF(label)"><code class="Li">DEF(label)</code></a></td>\n    <td>Returns TRUE if label has been defined.</td>\n  </tr>\n  <tr id="HIGH(r16/cnst/lbl)">\n    <td><a class="permalink" href="#HIGH(r16/cnst/lbl)"><code class="Li">HIGH(r16/cnst/lbl)</code></a></td>\n    <td>Returns the top 8 bits of the operand if it is a label or constant, or\n      the top 8-bit register if it is a 16-bit register.</td>\n  </tr>\n  <tr id="LOW(r16/cnst/lbl)">\n    <td><a class="permalink" href="#LOW(r16/cnst/lbl)"><code class="Li">LOW(r16/cnst/lbl)</code></a></td>\n    <td>Returns the bottom 8 bits of the operand if it is a label or constant,\n      or the bottom 8-bit register if it is a 16-bit register (AF isn\'t a valid\n      register for this function).</td>\n  </tr>\n</table>\n</section>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="MISCELLANEOUS"><a class="permalink" href="#MISCELLANEOUS">MISCELLANEOUS</a></h2>\n<section class="Ss">\n<h3 class="Ss" id="Changing_options_while_assembling"><a class="permalink" href="#Changing_options_while_assembling">Changing\n  options while assembling</a></h3>\n<p class="Pp"><code class="Ic">OPT</code> can be used to change some of the\n    options during assembling the source instead of defining them on the\n    commandline.</p>\n<p class="Pp"><code class="Ic">OPT</code> takes a comma-seperated list of\n    options as its argument:</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>PUSHO\nOPT   g.oOX ;Set the GB graphics constants to use these characters\nDW    `..ooOOXX\nPOPO\nDW    `00112233</pre>\n</div>\n<p class="Pp" id="b">The options that OPT can modify are currently:\n    <a class="permalink" href="#b"><b class="Sy">b</b></a>,\n    <a class="permalink" href="#e"><b class="Sy" id="e">e</b></a> and\n    <a class="permalink" href="#g"><b class="Sy" id="g">g</b></a>.</p>\n<p class="Pp"><code class="Ic">POPO</code> and <code class="Ic">PUSHO</code>\n    provide the interface to the option stack. <code class="Ic">PUSHO</code>\n    will push the current set of options on the option stack.\n    <code class="Ic">POPO</code> can then later be used to restore them. Useful\n    if you want to change some options in an include file and you don\'t want to\n    destroy the options set by the program that included your file. The stacks\n    number of entries is limited only by the amount of memory in your\n  machine.</p>\n</section>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="ALPHABETICAL_LIST_OF_KEYWORDS"><a class="permalink" href="#ALPHABETICAL_LIST_OF_KEYWORDS">ALPHABETICAL\n  LIST OF KEYWORDS</a></h2>\n<dl class="Bl-inset Bl-compact">\n  <dt><a class="Sx" href="#@">@</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#__DATE__">__DATE__</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#__FILE__">__FILE__</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#__ISO_8601_LOCAL__">__ISO_8601_LOCAL__</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#__ISO_8601_UTC__">__ISO_8601_UTC__</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#__LINE__">__LINE__</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#__TIME__">__TIME__</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#__RGBDS_MAJOR__">__RGBDS_MAJOR__</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#__RGBDS_MINOR__">__RGBDS_MINOR__</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#__RGBDS_PATCH__">__RGBDS_PATCH__</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#__UTC_YEAR__">__UTC_YEAR__</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#__UTC_MONTH__">__UTC_MONTH__</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#__UTC_DAY__">__UTC_DAY__</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#__UTC_HOUR__">__UTC_HOUR__</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#__UTC_MINUTE__">__UTC_MINUTE__</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#__UTC_SECOND__">__UTC_SECOND__</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#_NARG">_NARG</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#_PI">_PI</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#_RS">_RS</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#ACOS">ACOS</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#ASIN">ASIN</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#ATAN">ATAN</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#ATAN2">ATAN2</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#BANK">BANK</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#COS">COS</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#DB">DB</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#DEF">DEF</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#DIV">DIV</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#DL">DL</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#DS">DS</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#DW">DW</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#ELIF">ELIF</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#ELSE">ELSE</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#ENDC">ENDC</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#ENDM">ENDM</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#ENDR">ENDR</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#EQU">EQU</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#EQUS">EQUS</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#EXPORT">EXPORT</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#FAIL">FAIL</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#GLOBAL">GLOBAL</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#HIGH">HIGH</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#HRAM">HRAM</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#IF">IF</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#INCBIN">INCBIN</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#INCLUDE">INCLUDE</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LOW">LOW</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#MACRO">MACRO</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#MUL">MUL</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#OPT">OPT</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#POPO">POPO</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#POPS">POPS</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#PRINTF">PRINTF</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#PRINTT">PRINTT</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#PRINTV">PRINTV</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#PURGE">PURGE</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#PUSHO">PUSHO</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#PUSHS">PUSHS</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#REPT">REPT</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#RB">RB</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#RL">RL</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#ROM0">ROM0</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#ROMX">ROMX</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#RSRESET">RSRESET</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#RSSET">RSSET</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#RW">RW</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#SECTION">SECTION</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#SET">SET</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#SHIFT">SHIFT</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#SIN">SIN</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#SRAM">SRAM</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#STRCAT">STRCAT</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#STRCMP">STRCMP</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#STRIN">STRIN</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#STRLEN">STRLEN</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#STRLWR">STRLWR</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#STRSUB">STRSUB</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#STRUPR">STRUPR</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#TAN">TAN</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#VRAM">VRAM</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#WRAM0">WRAM0</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#WRAMX">WRAMX</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#WARN">WARN</a></dt>\n  <dd></dd>\n</dl>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="SEE_ALSO"><a class="permalink" href="#SEE_ALSO">SEE\n  ALSO</a></h2>\n<p class="Pp"><a class="Xr" href="./rgbasm.1">rgbasm(1)</a>,\n    <a class="Xr" href="./rgblink.1">rgblink(1)</a>,\n    <a class="Xr" href="./rgblink.5">rgblink(5)</a>,\n    <a class="Xr" href="./rgbds.5">rgbds(5)</a>,\n    <a class="Xr" href="./rgbds.7">rgbds(7)</a>,\n    <a class="Xr" href="./gbz80.7">gbz80(7)</a></p>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="HISTORY"><a class="permalink" href="#HISTORY">HISTORY</a></h2>\n<p class="Pp"><code class="Nm">rgbds</code> was originally written by Carsten\n    S&#x00F8;rensen as part of the ASMotor package, and was later packaged in\n    RGBDS by Justin Lloyd. It is now maintained by a number of contributors at\n    <a class="Lk" href="https://github.com/rednex/rgbds">https://github.com/rednex/rgbds</a>.</p>\n</section>\n'}}))}m.isMDXComponent=!0}}]);