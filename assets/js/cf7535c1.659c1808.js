"use strict";(self.webpackChunkrgbds_www=self.webpackChunkrgbds_www||[]).push([[1919],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return u}});var a=t(67294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,s=function(e,n){if(null==e)return{};var t,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var i=a.createContext({}),l=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},d=function(e){var n=l(e.components);return a.createElement(i.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,s=e.mdxType,r=e.originalType,i=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=l(t),u=s,f=m["".concat(i,".").concat(u)]||m[u]||p[u]||r;return t?a.createElement(f,c(c({ref:n},d),{},{components:t})):a.createElement(f,c({ref:n},d))}));function u(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var r=t.length,c=new Array(r);c[0]=m;var o={};for(var i in n)hasOwnProperty.call(n,i)&&(o[i]=n[i]);o.originalType=e,o.mdxType="string"==typeof e?e:s,c[1]=o;for(var l=2;l<r;l++)c[l]=t[l];return a.createElement.apply(null,c)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},15825:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return i},default:function(){return u},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return p}});var a=t(83117),s=t(80102),r=(t(67294),t(3905)),c=["components"],o={},i="rgblink(5) \u2014 linker script file format",l={unversionedId:"rgblink.5",id:"rgblink.5",title:"rgblink(5) \u2014 linker script file format",description:"",source:"@site/docs/rgblink.5.md",sourceDirName:".",slug:"/rgblink.5",permalink:"/docs/master/rgblink.5",draft:!1,editUrl:"https://github.com/gbdev/rgbds/edit/master/man/rgblink.5",tags:[],version:"current",frontMatter:{},sidebar:"nav",previous:{title:"gbz80(7) \u2014 CPU opcode reference",permalink:"/docs/master/gbz80.7"},next:{title:"rgbds(5) \u2014 object file format documentation",permalink:"/docs/master/rgbds.5"}},d={},p=[{value:"DESCRIPTION",id:"DESCRIPTION",level:2,children:[]},{value:"SEE ALSO",id:"SEE_ALSO",level:2,children:[]},{value:"HISTORY",id:"HISTORY",level:2,children:[]}],m={toc:p};function u(e){var n=e.components,t=(0,s.Z)(e,c);return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"rgblink5--linker-script-file-format"},"rgblink(5) \u2014 linker script file format"),(0,r.kt)("div",{className:"manual-text",dangerouslySetInnerHTML:{__html:'<section class="Sh">\n<h2 class="Sh" id="DESCRIPTION"><a class="permalink" href="#DESCRIPTION">DESCRIPTION</a></h2>\n<p class="Pp">The linker script is an external file that allows the user to\n    specify the order of sections at link time and in a centralized manner.</p>\n<p class="Pp">A linker script consists of a series of bank declarations, each\n    optionally followed by a list of section names (in double quotes) or\n    commands. All reserved keywords (bank types and command names) are\n    case-insensitive; all section names are case-sensitive.</p>\n<p class="Pp">Any line can contain a comment starting with\n    &#x2018;<code class="Li">;</code>&#x2019; that ends at the end of the\n  line.</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>; This line is a comment\nROMX $F            ; start a bank\n  &quot;Some functions&quot; ; a section name\n  ALIGN 8          ; a command\n  &quot;Some array&quot;\n\nWRAMX 2            ; start another bank\n  org $d123        ; another command\n  &quot;Some variables&quot;</pre>\n</div>\n<p class="Pp">Numbers can be in decimal or hexadecimal format (the prefix is\n    &#x2018;<code class="Li">$</code>&#x2019;). It is an error if any section\n    name or command is found before setting a bank.</p>\n<p class="Pp">Files can be included by using the <code class="Ic">INCLUDE</code>\n    keyword, followed by a string with the path of the file that has to be\n    included.</p>\n<p class="Pp">The possible bank types are: <code class="Cm">ROM0</code>,\n    <code class="Cm">ROMX</code>, <code class="Cm">VRAM</code>,\n    <code class="Cm">SRAM</code>, <code class="Cm">WRAM0</code>,\n    <code class="Cm">WRAMX</code>, <code class="Cm">OAM</code> and\n    <code class="Cm">HRAM</code>. Unless there is a single bank, which can occur\n    with types <code class="Cm">ROMX</code>, <code class="Cm">VRAM</code>,\n    <code class="Cm">SRAM</code> and <code class="Cm">WRAMX</code>, it is needed\n    to specify a bank number after the type.</p>\n<p class="Pp">Section names in double quotes support the same character escape\n    sequences as strings in <a class="Xr" href="./rgbasm.5">rgbasm(5)</a>,\n    specifically &#x2018;<code class="Li">\\\\</code>&#x2019;,\n    &#x2018;<code class="Li">\\&quot;</code>&#x2019;,\n    &#x2018;<code class="Li">\\n</code>&#x2019;,\n    &#x2018;<code class="Li">\\r</code>&#x2019;, and\n    &#x2018;<code class="Li">\\t</code>&#x2019;. Other backslash escape sequences\n    in <a class="Xr" href="./rgbasm.5">rgbasm(5)</a> are only relevant to\n    assembly code and do not apply in section names.</p>\n<p class="Pp">When a new bank statement is found, sections found after it will\n    be placed right from the beginning of that bank. If the linker script\n    switches to a different bank and then comes back to a previous one, it will\n    continue from the last address that was used.</p>\n<p class="Pp">The only two commands are <code class="Ic">ORG</code> and\n    <code class="Ic">ALIGN</code>:</p>\n<ul class="Bl-bullet">\n  <li id="ORG"><a class="permalink" href="#ORG"><code class="Ic">ORG</code></a>\n      sets the address in which new sections will be placed. It can not be lower\n      than the current address.</li>\n  <li id="ALIGN"><a class="permalink" href="#ALIGN"><code class="Ic">ALIGN</code></a>\n      will increase the address until it is aligned to the specified boundary\n      (it tries to set to 0 the number of bits specified after the command:\n      &#x2018;<code class="Li">ALIGN 8</code>&#x2019; will align to $100).</li>\n</ul>\n<p class="Pp" id="Note:"><a class="permalink" href="#Note:"><b class="Sy">Note:</b></a>\n    The bank, alignment, address and type of sections can be specified both in\n    the source code and in the linker script. For a section to be able to be\n    placed with the linker script, the bank, address and alignment must be left\n    unassigned in the source code or be compatible with what is specified in the\n    linker script. For example, &#x2018;<code class="Li">ALIGN[8]</code>&#x2019;\n    in the source code is compatible with &#x2018;<code class="Li">ORG\n    $F00</code>&#x2019; in the linker script.</p>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="SEE_ALSO"><a class="permalink" href="#SEE_ALSO">SEE\n  ALSO</a></h2>\n<p class="Pp"><a class="Xr" href="./rgbasm.1">rgbasm(1)</a>,\n    <a class="Xr" href="./rgblink.1">rgblink(1)</a>,\n    <a class="Xr" href="./rgbfix.1">rgbfix(1)</a>,\n    <a class="Xr" href="./rgbds.5">rgbds(5)</a>,\n    <a class="Xr" href="./rgbds.7">rgbds(7)</a></p>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="HISTORY"><a class="permalink" href="#HISTORY">HISTORY</a></h2>\n<p class="Pp"><code class="Nm">rgblink</code> was originally written by Carsten\n    S&#x00F8;rensen as part of the ASMotor package, and was later packaged in\n    RGBDS by Justin Lloyd. It is now maintained by a number of contributors at\n    <a class="Lk" href="https://github.com/gbdev/rgbds">https://github.com/gbdev/rgbds</a>.</p>\n</section>\n'}}))}u.isMDXComponent=!0}}]);