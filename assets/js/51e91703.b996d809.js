"use strict";(self.webpackChunkrgbds_www=self.webpackChunkrgbds_www||[]).push([[4753],{3905:function(s,a,l){l.d(a,{Zo:function(){return d},kt:function(){return o}});var n=l(67294);function e(s,a,l){return a in s?Object.defineProperty(s,a,{value:l,enumerable:!0,configurable:!0,writable:!0}):s[a]=l,s}function c(s,a){var l=Object.keys(s);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(s);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(s,a).enumerable}))),l.push.apply(l,n)}return l}function r(s){for(var a=1;a<arguments.length;a++){var l=null!=arguments[a]?arguments[a]:{};a%2?c(Object(l),!0).forEach((function(a){e(s,a,l[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(s,Object.getOwnPropertyDescriptors(l)):c(Object(l)).forEach((function(a){Object.defineProperty(s,a,Object.getOwnPropertyDescriptor(l,a))}))}return s}function i(s,a){if(null==s)return{};var l,n,e=function(s,a){if(null==s)return{};var l,n,e={},c=Object.keys(s);for(n=0;n<c.length;n++)l=c[n],a.indexOf(l)>=0||(e[l]=s[l]);return e}(s,a);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(s);for(n=0;n<c.length;n++)l=c[n],a.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(s,l)&&(e[l]=s[l])}return e}var p=n.createContext({}),t=function(s){var a=n.useContext(p),l=a;return s&&(l="function"==typeof s?s(a):r(r({},a),s)),l},d=function(s){var a=t(s.components);return n.createElement(p.Provider,{value:a},s.children)},S={inlineCode:"code",wrapper:function(s){var a=s.children;return n.createElement(n.Fragment,{},a)}},h=n.forwardRef((function(s,a){var l=s.components,e=s.mdxType,c=s.originalType,p=s.parentName,d=i(s,["components","mdxType","originalType","parentName"]),h=t(l),o=e,b=h["".concat(p,".").concat(o)]||h[o]||S[o]||c;return l?n.createElement(b,r(r({ref:a},d),{},{components:l})):n.createElement(b,r({ref:a},d))}));function o(s,a){var l=arguments,e=a&&a.mdxType;if("string"==typeof s||e){var c=l.length,r=new Array(c);r[0]=h;var i={};for(var p in a)hasOwnProperty.call(a,p)&&(i[p]=a[p]);i.originalType=s,i.mdxType="string"==typeof s?s:e,r[1]=i;for(var t=2;t<c;t++)r[t]=l[t];return n.createElement.apply(null,r)}return n.createElement.apply(null,l)}h.displayName="MDXCreateElement"},31362:function(s,a,l){l.r(a),l.d(a,{assets:function(){return d},contentTitle:function(){return p},default:function(){return o},frontMatter:function(){return i},metadata:function(){return t},toc:function(){return S}});var n=l(83117),e=l(80102),c=(l(67294),l(3905)),r=["components"],i={},p="gbz80(7) \u2014 CPU opcode reference",t={unversionedId:"gbz80.7",id:"version-v0.3.2/gbz80.7",title:"gbz80(7) \u2014 CPU opcode reference",description:"",source:"@site/versioned_docs/version-v0.3.2/gbz80.7.md",sourceDirName:".",slug:"/gbz80.7",permalink:"/docs/v0.3.2/gbz80.7",draft:!1,editUrl:"https://github.com/gbdev/rgbds/edit/master/man/gbz80.7",tags:[],version:"v0.3.2",frontMatter:{},sidebar:"nav",previous:{title:"rgbasm(5) \u2014 language documentation",permalink:"/docs/v0.3.2/rgbasm.5"},next:{title:"rgblink(5) \u2014 linkerscript file format",permalink:"/docs/v0.3.2/rgblink.5"}},d={},S=[{value:"DESCRIPTION",id:"DESCRIPTION",level:2,children:[]},{value:"LEGEND",id:"LEGEND",level:2,children:[]},{value:"INSTRUCTION OVERVIEW",id:"INSTRUCTION_OVERVIEW",level:2,children:[{value:"8-bit Arithmetic and Logic Instructions",id:"8-bit_Arithmetic_and_Logic_Instructions",level:3,children:[]},{value:"16-bit Arithmetic Instructions",id:"16-bit_Arithmetic_Instructions",level:3,children:[]},{value:"Bit Operations Instructions",id:"Bit_Operations_Instructions",level:3,children:[]},{value:"Bit Shift Instructions",id:"Bit_Shift_Instructions",level:3,children:[]},{value:"Load Instructions",id:"Load_Instructions",level:3,children:[]},{value:"Jumps and Subroutines",id:"Jumps_and_Subroutines",level:3,children:[]},{value:"Stack Operations Instructions",id:"Stack_Operations_Instructions",level:3,children:[]},{value:"Miscelaneous Instructions",id:"Miscelaneous_Instructions",level:3,children:[]}]},{value:"INSTRUCTION REFERENCE",id:"INSTRUCTION_REFERENCE",level:2,children:[{value:"ADC A,r8",id:"ADC_A,r8",level:3,children:[]},{value:"ADC A,[HL]",id:"ADC_A,[HL]",level:3,children:[]},{value:"ADC A,n8",id:"ADC_A,n8",level:3,children:[]},{value:"ADD A,r8",id:"ADD_A,r8",level:3,children:[]},{value:"ADD A,[HL]",id:"ADD_A,[HL]",level:3,children:[]},{value:"ADD A,n8",id:"ADD_A,n8",level:3,children:[]},{value:"ADD HL,r16",id:"ADD_HL,r16",level:3,children:[]},{value:"ADD HL,SP",id:"ADD_HL,SP",level:3,children:[]},{value:"ADD SP,e8",id:"ADD_SP,e8",level:3,children:[]},{value:"AND A,r8",id:"AND_A,r8",level:3,children:[]},{value:"AND A,[HL]",id:"AND_A,[HL]",level:3,children:[]},{value:"AND A,n8",id:"AND_A,n8",level:3,children:[]},{value:"BIT u3,r8",id:"BIT_u3,r8",level:3,children:[]},{value:"BIT u3,[HL]",id:"BIT_u3,[HL]",level:3,children:[]},{value:"CALL n16",id:"CALL_n16",level:3,children:[]},{value:"CALL cc,n16",id:"CALL_cc,n16",level:3,children:[]},{value:"CCF",id:"CCF",level:3,children:[]},{value:"CP A,r8",id:"CP_A,r8",level:3,children:[]},{value:"CP A,[HL]",id:"CP_A,[HL]",level:3,children:[]},{value:"CP A,n8",id:"CP_A,n8",level:3,children:[]},{value:"CPL",id:"CPL",level:3,children:[]},{value:"DAA",id:"DAA",level:3,children:[]},{value:"DEC r8",id:"DEC_r8",level:3,children:[]},{value:"DEC [HL]",id:"DEC_[HL]",level:3,children:[]},{value:"DEC r16",id:"DEC_r16",level:3,children:[]},{value:"DEC SP",id:"DEC_SP",level:3,children:[]},{value:"DI",id:"DI",level:3,children:[]},{value:"EI",id:"EI",level:3,children:[]},{value:"HALT",id:"HALT",level:3,children:[]},{value:"INC r8",id:"INC_r8",level:3,children:[]},{value:"INC [HL]",id:"INC_[HL]",level:3,children:[]},{value:"INC r16",id:"INC_r16",level:3,children:[]},{value:"INC SP",id:"INC_SP",level:3,children:[]},{value:"JP n16",id:"JP_n16",level:3,children:[]},{value:"JP cc,n16",id:"JP_cc,n16",level:3,children:[]},{value:"JP HL",id:"JP_HL",level:3,children:[]},{value:"JR e8",id:"JR_e8",level:3,children:[]},{value:"JR cc,e8",id:"JR_cc,e8",level:3,children:[]},{value:"LD r8,r8",id:"LD_r8,r8",level:3,children:[]},{value:"LD r8,n8",id:"LD_r8,n8",level:3,children:[]},{value:"LD r16,n16",id:"LD_r16,n16",level:3,children:[]},{value:"LD [HL],r8",id:"LD_[HL],r8",level:3,children:[]},{value:"LD [HL],n8",id:"LD_[HL],n8",level:3,children:[]},{value:"LD r8,[HL]",id:"LD_r8,[HL]",level:3,children:[]},{value:"LD [r16],A",id:"LD_[r16],A",level:3,children:[]},{value:"LD [n16],A",id:"LD_[n16],A",level:3,children:[]},{value:"LD [$FF00+n8],A",id:"LD_[$FF00+n8],A",level:3,children:[]},{value:"LD [$FF00+C],A",id:"LD_[$FF00+C],A",level:3,children:[]},{value:"LD A,[r16]",id:"LD_A,[r16]",level:3,children:[]},{value:"LD A,[n16]",id:"LD_A,[n16]",level:3,children:[]},{value:"LD A,[$FF00+n8]",id:"LD_A,[$FF00+n8]",level:3,children:[]},{value:"LD A,[$FF00+C]",id:"LD_A,[$FF00+C]",level:3,children:[]},{value:"LD [HL+],A",id:"LD_[HL+],A",level:3,children:[]},{value:"LD [HL-],A",id:"LD_[HL-],A",level:3,children:[]},{value:"LD A,[HL+]",id:"LD_A,[HL+]",level:3,children:[]},{value:"LD A,[HL-]",id:"LD_A,[HL-]",level:3,children:[]},{value:"LD SP,n16",id:"LD_SP,n16",level:3,children:[]},{value:"LD [n16],SP",id:"LD_[n16],SP",level:3,children:[]},{value:"LD HL,SP+e8",id:"LD_HL,SP+e8",level:3,children:[]},{value:"LD SP,HL",id:"LD_SP,HL",level:3,children:[]},{value:"NOP",id:"NOP",level:3,children:[]},{value:"OR A,r8",id:"OR_A,r8",level:3,children:[]},{value:"OR A,[HL]",id:"OR_A,[HL]",level:3,children:[]},{value:"OR A,n8",id:"OR_A,n8",level:3,children:[]},{value:"POP AF",id:"POP_AF",level:3,children:[]},{value:"POP r16",id:"POP_r16",level:3,children:[]},{value:"PUSH AF",id:"PUSH_AF",level:3,children:[]},{value:"PUSH r16",id:"PUSH_r16",level:3,children:[]},{value:"RES u3,r8",id:"RES_u3,r8",level:3,children:[]},{value:"RES u3,[HL]",id:"RES_u3,[HL]",level:3,children:[]},{value:"RET",id:"RET",level:3,children:[]},{value:"RET cc",id:"RET_cc",level:3,children:[]},{value:"RETI",id:"RETI",level:3,children:[]},{value:"RL r8",id:"RL_r8",level:3,children:[]},{value:"RL [HL]",id:"RL_[HL]",level:3,children:[]},{value:"RLA",id:"RLA",level:3,children:[]},{value:"RLC r8",id:"RLC_r8",level:3,children:[]},{value:"RLC [HL]",id:"RLC_[HL]",level:3,children:[]},{value:"RLCA",id:"RLCA",level:3,children:[]},{value:"RR r8",id:"RR_r8",level:3,children:[]},{value:"RR [HL]",id:"RR_[HL]",level:3,children:[]},{value:"RRA",id:"RRA",level:3,children:[]},{value:"RRC r8",id:"RRC_r8",level:3,children:[]},{value:"RRC [HL]",id:"RRC_[HL]",level:3,children:[]},{value:"RRCA",id:"RRCA",level:3,children:[]},{value:"RST vec",id:"RST_vec",level:3,children:[]},{value:"SBC A,r8",id:"SBC_A,r8",level:3,children:[]},{value:"SBC A,[HL]",id:"SBC_A,[HL]",level:3,children:[]},{value:"SBC A,n8",id:"SBC_A,n8",level:3,children:[]},{value:"SCF",id:"SCF",level:3,children:[]},{value:"SET u3,r8",id:"SET_u3,r8",level:3,children:[]},{value:"SET u3,[HL]",id:"SET_u3,[HL]",level:3,children:[]},{value:"SLA r8",id:"SLA_r8",level:3,children:[]},{value:"SLA [HL]",id:"SLA_[HL]",level:3,children:[]},{value:"SRA r8",id:"SRA_r8",level:3,children:[]},{value:"SRA [HL]",id:"SRA_[HL]",level:3,children:[]},{value:"SRL r8",id:"SRL_r8",level:3,children:[]},{value:"SRL [HL]",id:"SRL_[HL]",level:3,children:[]},{value:"STOP",id:"STOP",level:3,children:[]},{value:"SUB A,r8",id:"SUB_A,r8",level:3,children:[]},{value:"SUB A,[HL]",id:"SUB_A,[HL]",level:3,children:[]},{value:"SUB A,n8",id:"SUB_A,n8",level:3,children:[]},{value:"SWAP r8",id:"SWAP_r8",level:3,children:[]},{value:"SWAP [HL]",id:"SWAP_[HL]",level:3,children:[]},{value:"XOR A,r8",id:"XOR_A,r8",level:3,children:[]},{value:"XOR A,[HL]",id:"XOR_A,[HL]",level:3,children:[]},{value:"XOR A,n8",id:"XOR_A,n8",level:3,children:[]}]},{value:"SEE ALSO",id:"SEE_ALSO",level:2,children:[]},{value:"HISTORY",id:"HISTORY",level:2,children:[]}],h={toc:S};function o(s){var a=s.components,l=(0,e.Z)(s,r);return(0,c.kt)("wrapper",(0,n.Z)({},h,l,{components:a,mdxType:"MDXLayout"}),(0,c.kt)("h1",{id:"gbz807--cpu-opcode-reference"},"gbz80(7) \u2014 CPU opcode reference"),(0,c.kt)("div",{className:"manual-text",dangerouslySetInnerHTML:{__html:'<section class="Sh">\n<h2 class="Sh" id="DESCRIPTION"><a class="permalink" href="#DESCRIPTION">DESCRIPTION</a></h2>\n<p class="Pp">This is the list of opcodes supported by\n    <a class="Xr" href="./rgbasm.1">rgbasm(1)</a>, including a short\n    description, the number of bytes needed to encode them and the number of CPU\n    cycles at 1MHz (or 2MHz in GBC dual speed mode) needed to complete them.</p>\n<p class="Pp">Note: All arithmetic/logic operations that use register\n    <b class="Sy">A</b> as destination can omit the destination as it is assumed\n    it\'s register <b class="Sy">A</b>. The following two lines have the same\n    effect:</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent"><code class="Li">OR A,B</code></div>\n<div class="Bd Bd-indent"><code class="Li">OR B</code></div>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="LEGEND"><a class="permalink" href="#LEGEND">LEGEND</a></h2>\n<p class="Pp">List of abbreviations used in this document.</p>\n<dl class="Bl-tag">\n  <dt id="B"><var class="Ar">r8</var></dt>\n  <dd>Any of the 8-bit registers (<b class="Sy">A</b>,\n      <a class="permalink" href="#B"><b class="Sy">B</b></a>,\n      <b class="Sy">C</b>,\n      <a class="permalink" href="#D"><b class="Sy" id="D">D</b></a>,\n      <a class="permalink" href="#E"><b class="Sy" id="E">E</b></a>,\n      <b class="Sy">H</b>,\n      <a class="permalink" href="#L"><b class="Sy" id="L">L</b></a>).</dd>\n  <dt id="BC"><var class="Ar">r16</var></dt>\n  <dd>Any of the general-purpose 16-bit registers\n      (<a class="permalink" href="#BC"><b class="Sy">BC</b></a>,\n      <a class="permalink" href="#DE"><b class="Sy" id="DE">DE</b></a>,\n      <b class="Sy">HL</b>).</dd>\n  <dt><var class="Ar">n8</var></dt>\n  <dd>8-bit integer constant.</dd>\n  <dt><var class="Ar">n16</var></dt>\n  <dd>16-bit integer constant.</dd>\n  <dt id="128"><var class="Ar">e8</var></dt>\n  <dd>8-bit offset\n      (<code class="Fl">-</code><a class="permalink" href="#128"><b class="Sy">128</b></a>\n      to\n    <a class="permalink" href="#127"><b class="Sy" id="127">127</b></a>).</dd>\n  <dt id="0"><var class="Ar">u3</var></dt>\n  <dd>3-bit unsigned integer constant\n      (<a class="permalink" href="#0"><b class="Sy">0</b></a> to\n      <a class="permalink" href="#7"><b class="Sy" id="7">7</b></a>).</dd>\n  <dt><var class="Ar">cc</var></dt>\n  <dd>Condition codes:\n    <dl class="Bl-tag Bl-compact">\n      <dt id="Z"><a class="permalink" href="#Z"><b class="Sy">Z</b></a>:</dt>\n      <dd>Execute if Z is set.</dd>\n      <dt id="NZ"><a class="permalink" href="#NZ"><b class="Sy">NZ</b></a>:</dt>\n      <dd>Execute if Z is not set.</dd>\n      <dt id="C"><a class="permalink" href="#C"><b class="Sy">C</b></a>:</dt>\n      <dd>Execute if C is set.</dd>\n      <dt id="NC"><a class="permalink" href="#NC"><b class="Sy">NC</b></a>:</dt>\n      <dd>Execute if C is not set.</dd>\n    </dl>\n  </dd>\n  <dt id="0x00"><var class="Ar">vec</var></dt>\n  <dd>One of the <var class="Ar">RST</var> vectors\n      (<a class="permalink" href="#0x00"><b class="Sy">0x00</b></a>,\n      <a class="permalink" href="#0x08"><b class="Sy" id="0x08">0x08</b></a>,\n      <a class="permalink" href="#0x10"><b class="Sy" id="0x10">0x10</b></a>,\n      <a class="permalink" href="#0x18"><b class="Sy" id="0x18">0x18</b></a>,\n      <a class="permalink" href="#0x20"><b class="Sy" id="0x20">0x20</b></a>,\n      <a class="permalink" href="#0x28"><b class="Sy" id="0x28">0x28</b></a>,\n      <a class="permalink" href="#0x30"><b class="Sy" id="0x30">0x30</b></a> and\n      <a class="permalink" href="#0x38"><b class="Sy" id="0x38">0x38</b></a>).</dd>\n</dl>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="INSTRUCTION_OVERVIEW"><a class="permalink" href="#INSTRUCTION_OVERVIEW">INSTRUCTION\n  OVERVIEW</a></h2>\n<section class="Ss">\n<h3 class="Ss" id="8-bit_Arithmetic_and_Logic_Instructions"><a class="permalink" href="#8-bit_Arithmetic_and_Logic_Instructions">8-bit\n  Arithmetic and Logic Instructions</a></h3>\n<dl class="Bl-inset Bl-compact">\n  <dt><a class="Sx" href="#ADC_A,r8">ADC A,r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#ADC_A,_HL_">ADC A,[HL]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#ADC_A,n8">ADC A,n8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#ADD_A,r8">ADD A,r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#ADD_A,_HL_">ADD A,[HL]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#ADD_A,n8">ADD A,n8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#AND_A,r8">AND A,r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#AND_A,_HL_">AND A,[HL]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#AND_A,n8">AND A,n8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#CP_A,r8">CP A,r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#CP_A,_HL_">CP A,[HL]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#CP_A,n8">CP A,n8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#DEC_r8">DEC r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#DEC__HL_">DEC [HL]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#INC_r8">INC r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#INC__HL_">INC [HL]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#OR_A,r8">OR A,r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#OR_A,_HL_">OR A,[HL]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#OR_A,n8">OR A,n8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#SBC_A,r8">SBC A,r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#SBC_A,_HL_">SBC A,[HL]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#SBC_A,n8">SBC A,n8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#SUB_A,r8">SUB A,r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#SUB_A,_HL_">SUB A,[HL]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#SUB_A,n8">SUB A,n8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#XOR_A,r8">XOR A,r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#XOR_A,_HL_">XOR A,[HL]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#XOR_A,n8">XOR A,n8</a></dt>\n  <dd></dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="16-bit_Arithmetic_Instructions"><a class="permalink" href="#16-bit_Arithmetic_Instructions">16-bit\n  Arithmetic Instructions</a></h3>\n<dl class="Bl-inset Bl-compact">\n  <dt><a class="Sx" href="#ADD_HL,r16">ADD HL,r16</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#DEC_r16">DEC r16</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#INC_r16">INC r16</a></dt>\n  <dd></dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Bit_Operations_Instructions"><a class="permalink" href="#Bit_Operations_Instructions">Bit\n  Operations Instructions</a></h3>\n<dl class="Bl-inset Bl-compact">\n  <dt><a class="Sx" href="#BIT_u3,r8">BIT u3,r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#BIT_u3,_HL_">BIT u3,[HL]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#RES_u3,r8">RES u3,r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#RES_u3,_HL_">RES u3,[HL]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#SET_u3,r8">SET u3,r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#SET_u3,_HL_">SET u3,[HL]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#SWAP_r8">SWAP r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#SWAP__HL_">SWAP [HL]</a></dt>\n  <dd></dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Bit_Shift_Instructions"><a class="permalink" href="#Bit_Shift_Instructions">Bit\n  Shift Instructions</a></h3>\n<dl class="Bl-inset Bl-compact">\n  <dt><a class="Sx" href="#RL_r8">RL r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#RL__HL_">RL [HL]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#RLA">RLA</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#RLC_r8">RLC r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#RLC__HL_">RLC [HL]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#RLCA">RLCA</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#RR_r8">RR r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#RR__HL_">RR [HL]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#RRA">RRA</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#RRC_r8">RRC r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#RRC__HL_">RRC [HL]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#RRCA">RRCA</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#SLA_r8">SLA r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#SLA__HL_">SLA [HL]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#SRA_r8">SRA r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#SRA__HL_">SRA [HL]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#SRL_r8">SRL r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#SRL__HL_">SRL [HL]</a></dt>\n  <dd></dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Load_Instructions"><a class="permalink" href="#Load_Instructions">Load\n  Instructions</a></h3>\n<dl class="Bl-inset Bl-compact">\n  <dt><a class="Sx" href="#LD_r8,r8">LD r8,r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_r8,n8">LD r8,n8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_r16,n16">LD r16,n16</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD__HL_,r8">LD [HL],r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD__HL_,n8">LD [HL],n8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_r8,_HL_">LD r8,[HL]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD__r16_,A">LD [r16],A</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD__n16_,A">LD [n16],A</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD__$FF00+n8_,A">LD [$FF00+n8],A</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD__$FF00+C_,A">LD [$FF00+C],A</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_A,_r16_">LD A,[r16]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_A,_n16_">LD A,[n16]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_A,_$FF00+n8_">LD A,[$FF00+n8]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_A,_$FF00+C_">LD A,[$FF00+C]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD__HL+_,A">LD [HL+],A</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD__HL-_,A">LD [HL-],A</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_A,_HL+_">LD A,[HL+]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_A,_HL-_">LD A,[HL-]</a></dt>\n  <dd></dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Jumps_and_Subroutines"><a class="permalink" href="#Jumps_and_Subroutines">Jumps\n  and Subroutines</a></h3>\n<dl class="Bl-inset Bl-compact">\n  <dt><a class="Sx" href="#CALL_n16">CALL n16</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#CALL_cc,n16">CALL cc,n16</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#JP_HL">JP HL</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#JP_n16">JP n16</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#JP_cc,n16">JP cc,n16</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#JR_e8">JR e8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#JR_cc,e8">JR cc,e8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#RET_cc">RET cc</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#RET">RET</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#RETI">RETI</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#RST_vec">RST vec</a></dt>\n  <dd></dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Stack_Operations_Instructions"><a class="permalink" href="#Stack_Operations_Instructions">Stack\n  Operations Instructions</a></h3>\n<dl class="Bl-inset Bl-compact">\n  <dt><a class="Sx" href="#ADD_HL,SP">ADD HL,SP</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#ADD_SP,e8">ADD SP,e8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#DEC_SP">DEC SP</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#INC_SP">INC SP</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_SP,n16">LD SP,n16</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD__n16_,SP">LD [n16],SP</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_HL,SP+e8">LD HL,SP+e8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_SP,HL">LD SP,HL</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#POP_AF">POP AF</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#POP_r16">POP r16</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#PUSH_AF">PUSH AF</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#PUSH_r16">PUSH r16</a></dt>\n  <dd></dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Miscelaneous_Instructions"><a class="permalink" href="#Miscelaneous_Instructions">Miscelaneous\n  Instructions</a></h3>\n<dl class="Bl-inset Bl-compact">\n  <dt><a class="Sx" href="#CCF">CCF</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#CPL">CPL</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#DAA">DAA</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#DI">DI</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#EI">EI</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#HALT">HALT</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#NOP">NOP</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#SCF">SCF</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#STOP">STOP</a></dt>\n  <dd></dd>\n</dl>\n</section>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="INSTRUCTION_REFERENCE"><a class="permalink" href="#INSTRUCTION_REFERENCE">INSTRUCTION\n  REFERENCE</a></h2>\n<section class="Ss">\n<h3 class="Ss" id="ADC_A,r8"><a class="permalink" href="#ADC_A,r8">ADC\n  A,r8</a></h3>\n<p class="Pp">Add the value in <var class="Ar">r8</var> plus the carry flag to\n    <b class="Sy">A</b>.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<ul class="Bl-bullet Bl-compact">\n  <li id="Z~2"><a class="permalink" href="#Z~2"><b class="Sy">Z</b></a>: Set if\n      result is 0.</li>\n  <li id="N"><a class="permalink" href="#N"><b class="Sy">N</b></a>: 0</li>\n  <li id="H"><a class="permalink" href="#H"><b class="Sy">H</b></a>: Set if\n      overflow from bit 3.</li>\n  <li id="C~2"><a class="permalink" href="#C~2"><b class="Sy">C</b></a>: Set if\n      overflow from bit 7.</li>\n</ul>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="ADC_A,_HL_"><a class="permalink" href="#ADC_A,_HL_">ADC\n  A,[HL]</a></h3>\n<p class="Pp">Add the value pointed by <b class="Sy">HL</b> plus the carry flag\n    to <b class="Sy">A</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: See <a class="Sx" href="#ADC_A,r8">ADC A,r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="ADC_A,n8"><a class="permalink" href="#ADC_A,n8">ADC\n  A,n8</a></h3>\n<p class="Pp">Add the value <var class="Ar">n8</var> plus the carry flag to\n    <b class="Sy">A</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See <a class="Sx" href="#ADC_A,r8">ADC A,r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="ADD_A,r8"><a class="permalink" href="#ADD_A,r8">ADD\n  A,r8</a></h3>\n<p class="Pp">Add the value in <var class="Ar">r8</var> to\n  <b class="Sy">A</b>.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<ul class="Bl-bullet Bl-compact">\n  <li id="Z~3"><a class="permalink" href="#Z~3"><b class="Sy">Z</b></a>: Set if\n      result is 0.</li>\n  <li id="N~2"><a class="permalink" href="#N~2"><b class="Sy">N</b></a>: 0</li>\n  <li id="H~2"><a class="permalink" href="#H~2"><b class="Sy">H</b></a>: Set if\n      overflow from bit 3.</li>\n  <li id="C~3"><a class="permalink" href="#C~3"><b class="Sy">C</b></a>: Set if\n      overflow from bit 7.</li>\n</ul>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="ADD_A,_HL_"><a class="permalink" href="#ADD_A,_HL_">ADD\n  A,[HL]</a></h3>\n<p class="Pp">Add the value pointed by <b class="Sy">HL</b> to\n    <b class="Sy">A</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: See <a class="Sx" href="#ADD_A,r8">ADD A,r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="ADD_A,n8"><a class="permalink" href="#ADD_A,n8">ADD\n  A,n8</a></h3>\n<p class="Pp">Add the value <var class="Ar">n8</var> to <b class="Sy">A</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See <a class="Sx" href="#ADD_A,r8">ADD A,r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="ADD_HL,r16"><a class="permalink" href="#ADD_HL,r16">ADD\n  HL,r16</a></h3>\n<p class="Pp">Add the value in <var class="Ar">r16</var> to\n    <b class="Sy">HL</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<ul class="Bl-bullet Bl-compact">\n  <li id="N~3"><a class="permalink" href="#N~3"><b class="Sy">N</b></a>: 0</li>\n  <li id="H~3"><a class="permalink" href="#H~3"><b class="Sy">H</b></a>: Set if\n      overflow from bit 11.</li>\n  <li id="C~4"><a class="permalink" href="#C~4"><b class="Sy">C</b></a>: Set if\n      overflow from bit 15.</li>\n</ul>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="ADD_HL,SP"><a class="permalink" href="#ADD_HL,SP">ADD\n  HL,SP</a></h3>\n<p class="Pp">Add the value in <b class="Sy">SP</b> to <b class="Sy">HL</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: See <a class="Sx" href="#ADD_HL,r16">ADD HL,r16</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="ADD_SP,e8"><a class="permalink" href="#ADD_SP,e8">ADD\n  SP,e8</a></h3>\n<p class="Pp">Add the signed value <var class="Ar">e8</var> to\n    <b class="Sy">SP</b>.</p>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags:</p>\n<ul class="Bl-bullet Bl-compact">\n  <li id="Z~4"><a class="permalink" href="#Z~4"><b class="Sy">Z</b></a>: 0</li>\n  <li id="N~4"><a class="permalink" href="#N~4"><b class="Sy">N</b></a>: 0</li>\n  <li id="H~4"><a class="permalink" href="#H~4"><b class="Sy">H</b></a>: Set if\n      overflow from bit 3.</li>\n  <li id="C~5"><a class="permalink" href="#C~5"><b class="Sy">C</b></a>: Set if\n      overflow from bit 7.</li>\n</ul>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="AND_A,r8"><a class="permalink" href="#AND_A,r8">AND\n  A,r8</a></h3>\n<p class="Pp">Bitwise AND between the value in <var class="Ar">r8</var> and\n    <b class="Sy">A</b>.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<ul class="Bl-bullet Bl-compact">\n  <li id="Z~5"><a class="permalink" href="#Z~5"><b class="Sy">Z</b></a>: Set if\n      result is 0.</li>\n  <li id="N~5"><a class="permalink" href="#N~5"><b class="Sy">N</b></a>: 0</li>\n  <li id="H~5"><a class="permalink" href="#H~5"><b class="Sy">H</b></a>: 1</li>\n  <li id="C~6"><a class="permalink" href="#C~6"><b class="Sy">C</b></a>: 0</li>\n</ul>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="AND_A,_HL_"><a class="permalink" href="#AND_A,_HL_">AND\n  A,[HL]</a></h3>\n<p class="Pp">Bitwise AND between the value pointed by <b class="Sy">HL</b> and\n    <b class="Sy">A</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: See <a class="Sx" href="#AND_A,r8">AND A,r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="AND_A,n8"><a class="permalink" href="#AND_A,n8">AND\n  A,n8</a></h3>\n<p class="Pp">Bitwise AND between the value in <var class="Ar">n8</var> and\n    <b class="Sy">A</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See <a class="Sx" href="#AND_A,r8">AND A,r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="BIT_u3,r8"><a class="permalink" href="#BIT_u3,r8">BIT\n  u3,r8</a></h3>\n<p class="Pp">Test bit <var class="Ar">u3</var> in register\n    <var class="Ar">r8</var>, set the zero flag if bit not set.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags:</p>\n<ul class="Bl-bullet Bl-compact">\n  <li id="Z~6"><a class="permalink" href="#Z~6"><b class="Sy">Z</b></a>: Set if\n      the selected bit is 0.</li>\n  <li id="N~6"><a class="permalink" href="#N~6"><b class="Sy">N</b></a>: 0</li>\n  <li id="H~6"><a class="permalink" href="#H~6"><b class="Sy">H</b></a>: 1</li>\n</ul>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="BIT_u3,_HL_"><a class="permalink" href="#BIT_u3,_HL_">BIT\n  u3,[HL]</a></h3>\n<p class="Pp">Test bit <var class="Ar">u3</var> in the byte pointed by\n    <b class="Sy">HL</b>, set the zero flag if bit not set.</p>\n<p class="Pp">Cycles: 3</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See <a class="Sx" href="#BIT_u3,r8">BIT u3,r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="CALL_n16"><a class="permalink" href="#CALL_n16">CALL\n  n16</a></h3>\n<p class="Pp">Call address <var class="Ar">n16</var>.</p>\n<p class="Pp">Cycles: 6</p>\n<p class="Pp">Bytes: 3</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="CALL_cc,n16"><a class="permalink" href="#CALL_cc,n16">CALL\n  cc,n16</a></h3>\n<p class="Pp">Call address <var class="Ar">n16</var> if condition\n    <var class="Ar">cc</var> is met.</p>\n<p class="Pp">Cycles: 6/3</p>\n<p class="Pp">Bytes: 3</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="CCF"><a class="permalink" href="#CCF">CCF</a></h3>\n<p class="Pp">Complement Carry Flag.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<ul class="Bl-bullet Bl-compact">\n  <li id="N~7"><a class="permalink" href="#N~7"><b class="Sy">N</b></a>: 0</li>\n  <li id="H~7"><a class="permalink" href="#H~7"><b class="Sy">H</b></a>: 0</li>\n  <li id="C~7"><a class="permalink" href="#C~7"><b class="Sy">C</b></a>:\n      Complemented.</li>\n</ul>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="CP_A,r8"><a class="permalink" href="#CP_A,r8">CP\n  A,r8</a></h3>\n<p class="Pp">Subtract the value in <var class="Ar">r8</var> from\n    <b class="Sy">A</b> and set flags accordingly, but don\'t store the\n  result.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<ul class="Bl-bullet Bl-compact">\n  <li id="Z~7"><a class="permalink" href="#Z~7"><b class="Sy">Z</b></a>: Set if\n      result is 0.</li>\n  <li id="N~8"><a class="permalink" href="#N~8"><b class="Sy">N</b></a>: 1</li>\n  <li id="H~8"><a class="permalink" href="#H~8"><b class="Sy">H</b></a>: Set if\n      no borrow from bit 4.</li>\n  <li id="C~8"><a class="permalink" href="#C~8"><b class="Sy">C</b></a>: Set if\n      no borrow (set if <var class="Ar">r8</var> &gt; <b class="Sy">A</b>).</li>\n</ul>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="CP_A,_HL_"><a class="permalink" href="#CP_A,_HL_">CP\n  A,[HL]</a></h3>\n<p class="Pp">Subtract the value pointed by <b class="Sy">HL</b> from\n    <b class="Sy">A</b> and set flags accordingly, but don\'t store the\n  result.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: See <a class="Sx" href="#CP_A,r8">CP A,r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="CP_A,n8"><a class="permalink" href="#CP_A,n8">CP\n  A,n8</a></h3>\n<p class="Pp">Subtract the value <var class="Ar">n8</var> from\n    <b class="Sy">A</b> and set flags accordingly, but don\'t store the\n  result.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See <a class="Sx" href="#CP_A,r8">CP A,r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="CPL"><a class="permalink" href="#CPL">CPL</a></h3>\n<p class="Pp">Complement accumulator (<b class="Sy">A</b> =\n    <a class="permalink" href="#_A"><b class="Sy" id="_A">~A</b></a>).</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<ul class="Bl-bullet Bl-compact">\n  <li id="N~9"><a class="permalink" href="#N~9"><b class="Sy">N</b></a>: 1</li>\n  <li id="H~9"><a class="permalink" href="#H~9"><b class="Sy">H</b></a>: 1</li>\n</ul>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="DAA"><a class="permalink" href="#DAA">DAA</a></h3>\n<p class="Pp">Decimal adjust register A to get a correct BCD representation\n    after an arithmetic instruction.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<ul class="Bl-bullet Bl-compact">\n  <li id="Z~8"><a class="permalink" href="#Z~8"><b class="Sy">Z</b></a>: Set if\n      result is 0.</li>\n  <li id="H~10"><a class="permalink" href="#H~10"><b class="Sy">H</b></a>:\n    0</li>\n  <li id="C~9"><a class="permalink" href="#C~9"><b class="Sy">C</b></a>: Set or\n      reset depending on the operation.</li>\n</ul>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="DEC_r8"><a class="permalink" href="#DEC_r8">DEC r8</a></h3>\n<p class="Pp">Decrement value in register <var class="Ar">r8</var> by 1.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<ul class="Bl-bullet Bl-compact">\n  <li id="Z~9"><a class="permalink" href="#Z~9"><b class="Sy">Z</b></a>: Set if\n      result is 0.</li>\n  <li id="N~10"><a class="permalink" href="#N~10"><b class="Sy">N</b></a>:\n    1</li>\n  <li id="H~11"><a class="permalink" href="#H~11"><b class="Sy">H</b></a>: Set\n      if no borrow from bit 4.</li>\n</ul>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="DEC__HL_"><a class="permalink" href="#DEC__HL_">DEC\n  [HL]</a></h3>\n<p class="Pp">Decrement the value pointed by <b class="Sy">HL</b> by 1.</p>\n<p class="Pp">Cycles: 3</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: See <a class="Sx" href="#DEC_r8">DEC r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="DEC_r16"><a class="permalink" href="#DEC_r16">DEC\n  r16</a></h3>\n<p class="Pp">Decrement value in register <var class="Ar">r16</var> by 1.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="DEC_SP"><a class="permalink" href="#DEC_SP">DEC SP</a></h3>\n<p class="Pp">Decrement value in register <b class="Sy">SP</b> by 1.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="DI"><a class="permalink" href="#DI">DI</a></h3>\n<p class="Pp">Disable Interrupts.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="EI"><a class="permalink" href="#EI">EI</a></h3>\n<p class="Pp">Enable Interrupts.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="HALT"><a class="permalink" href="#HALT">HALT</a></h3>\n<p class="Pp">Enter CPU low power mode.</p>\n<p class="Pp">Cycles: -</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="INC_r8"><a class="permalink" href="#INC_r8">INC r8</a></h3>\n<p class="Pp">Increment value in register <var class="Ar">r8</var> by 1.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<ul class="Bl-bullet Bl-compact">\n  <li id="Z~10"><a class="permalink" href="#Z~10"><b class="Sy">Z</b></a>: Set\n      if result is 0.</li>\n  <li id="N~11"><a class="permalink" href="#N~11"><b class="Sy">N</b></a>:\n    0</li>\n  <li id="H~12"><a class="permalink" href="#H~12"><b class="Sy">H</b></a>: Set\n      if overflow from bit 3.</li>\n</ul>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="INC__HL_"><a class="permalink" href="#INC__HL_">INC\n  [HL]</a></h3>\n<p class="Pp">Increment the value pointed by <b class="Sy">HL</b> by 1.</p>\n<p class="Pp">Cycles: 3</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: See <a class="Sx" href="#INC_r8">INC r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="INC_r16"><a class="permalink" href="#INC_r16">INC\n  r16</a></h3>\n<p class="Pp">Increment value in register <var class="Ar">r16</var> by 1.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="INC_SP"><a class="permalink" href="#INC_SP">INC SP</a></h3>\n<p class="Pp">Increment value in register <b class="Sy">SP</b> by 1.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="JP_n16"><a class="permalink" href="#JP_n16">JP n16</a></h3>\n<p class="Pp">Absolute jump to address <var class="Ar">n16</var>.</p>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 3</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="JP_cc,n16"><a class="permalink" href="#JP_cc,n16">JP\n  cc,n16</a></h3>\n<p class="Pp">Absolute jump to address <var class="Ar">n16</var> if condition\n    <var class="Ar">cc</var> is met.</p>\n<p class="Pp">Cycles: 4/3</p>\n<p class="Pp">Bytes: 3</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="JP_HL"><a class="permalink" href="#JP_HL">JP HL</a></h3>\n<p class="Pp">Jump to address in <b class="Sy">HL</b>, that is, load\n    <a class="permalink" href="#PC"><b class="Sy" id="PC">PC</b></a> with value\n    in register <b class="Sy">HL</b>.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="JR_e8"><a class="permalink" href="#JR_e8">JR e8</a></h3>\n<p class="Pp">Relative jump by adding <var class="Ar">e8</var> to the current\n    address.</p>\n<p class="Pp">Cycles: 3</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="JR_cc,e8"><a class="permalink" href="#JR_cc,e8">JR\n  cc,e8</a></h3>\n<p class="Pp">Relative jump by adding <var class="Ar">e8</var> to the current\n    address if condition <var class="Ar">cc</var> is met.</p>\n<p class="Pp">Cycles: 3/2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_r8,r8"><a class="permalink" href="#LD_r8,r8">LD\n  r8,r8</a></h3>\n<p class="Pp">Store value in register on the right into register on the\n  left.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_r8,n8"><a class="permalink" href="#LD_r8,n8">LD\n  r8,n8</a></h3>\n<p class="Pp">Load value <var class="Ar">n8</var> into register\n    <var class="Ar">r8</var>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_r16,n16"><a class="permalink" href="#LD_r16,n16">LD\n  r16,n16</a></h3>\n<p class="Pp">Load value <var class="Ar">n16</var> into register\n    <var class="Ar">r16</var>.</p>\n<p class="Pp">Cycles: 3</p>\n<p class="Pp">Bytes: 3</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD__HL_,r8"><a class="permalink" href="#LD__HL_,r8">LD\n  [HL],r8</a></h3>\n<p class="Pp">Store value in register <var class="Ar">r8</var> into byte pointed\n    by register <b class="Sy">HL</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD__HL_,n8"><a class="permalink" href="#LD__HL_,n8">LD\n  [HL],n8</a></h3>\n<p class="Pp">Store value <var class="Ar">n8</var> into byte pointed by register\n    <b class="Sy">HL</b>.</p>\n<p class="Pp">Cycles: 3</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_r8,_HL_"><a class="permalink" href="#LD_r8,_HL_">LD\n  r8,[HL]</a></h3>\n<p class="Pp">Load value into register <var class="Ar">r8</var> from byte\n    pointed by register <b class="Sy">HL</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD__r16_,A"><a class="permalink" href="#LD__r16_,A">LD\n  [r16],A</a></h3>\n<p class="Pp">Store value in register <b class="Sy">A</b> into address pointed\n    by register <var class="Ar">r16</var>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD__n16_,A"><a class="permalink" href="#LD__n16_,A">LD\n  [n16],A</a></h3>\n<p class="Pp">Store value in register <b class="Sy">A</b> into address\n    <var class="Ar">n16</var>.</p>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 3</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD__$FF00+n8_,A"><a class="permalink" href="#LD__$FF00+n8_,A">LD\n  [$FF00+n8],A</a></h3>\n<p class="Pp">Store value in register <b class="Sy">A</b> into high RAM or I/O\n    registers.</p>\n<p class="Pp">The following synonym forces this encoding: <b class="Sy">LDH\n    [$FF00+n8],A</b></p>\n<p class="Pp">Cycles: 3</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD__$FF00+C_,A"><a class="permalink" href="#LD__$FF00+C_,A">LD\n  [$FF00+C],A</a></h3>\n<p class="Pp">Store value in register <b class="Sy">A</b> into high RAM or I/O\n    registers.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_A,_r16_"><a class="permalink" href="#LD_A,_r16_">LD\n  A,[r16]</a></h3>\n<p class="Pp">Load value in register <b class="Sy">A</b> from address pointed by\n    register <var class="Ar">r16</var>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_A,_n16_"><a class="permalink" href="#LD_A,_n16_">LD\n  A,[n16]</a></h3>\n<p class="Pp">Load value in register <b class="Sy">A</b> from address\n    <var class="Ar">n16</var>.</p>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 3</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_A,_$FF00+n8_"><a class="permalink" href="#LD_A,_$FF00+n8_">LD\n  A,[$FF00+n8]</a></h3>\n<p class="Pp">Load value in register <b class="Sy">A</b> from high RAM or I/O\n    registers.</p>\n<p class="Pp">The following synonym forces this encoding: <b class="Sy">LDH\n    A,[$FF00+n8]</b></p>\n<p class="Pp">Cycles: 3</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_A,_$FF00+C_"><a class="permalink" href="#LD_A,_$FF00+C_">LD\n  A,[$FF00+C]</a></h3>\n<p class="Pp">Load value in register <b class="Sy">A</b> from high RAM or I/O\n    registers.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD__HL+_,A"><a class="permalink" href="#LD__HL+_,A">LD\n  [HL+],A</a></h3>\n<p class="Pp">Store value in register <b class="Sy">A</b> into byte pointed by\n    <b class="Sy">HL</b> and post-increment <b class="Sy">HL</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD__HL-_,A"><a class="permalink" href="#LD__HL-_,A">LD\n  [HL-],A</a></h3>\n<p class="Pp">Store value in register <b class="Sy">A</b> into byte pointed by\n    <b class="Sy">HL</b> and post-decrement <b class="Sy">HL</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_A,_HL+_"><a class="permalink" href="#LD_A,_HL+_">LD\n  A,[HL+]</a></h3>\n<p class="Pp">Load value into register <b class="Sy">A</b> from byte pointed by\n    <b class="Sy">HL</b> and post-increment <b class="Sy">HL</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_A,_HL-_"><a class="permalink" href="#LD_A,_HL-_">LD\n  A,[HL-]</a></h3>\n<p class="Pp">Load value into register <b class="Sy">A</b> from byte pointed by\n    <b class="Sy">HL</b> and post-decrement <b class="Sy">HL</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_SP,n16"><a class="permalink" href="#LD_SP,n16">LD\n  SP,n16</a></h3>\n<p class="Pp">Load value <var class="Ar">n16</var> into register\n    <b class="Sy">SP</b>.</p>\n<p class="Pp">Cycles: 3</p>\n<p class="Pp">Bytes: 3</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD__n16_,SP"><a class="permalink" href="#LD__n16_,SP">LD\n  [n16],SP</a></h3>\n<p class="Pp">Store <b class="Sy">SP</b> into addresses\n    <var class="Ar">n16</var> (LSB) and <var class="Ar">n16</var> + 1 (MSB).</p>\n<p class="Pp">Cycles: 5</p>\n<p class="Pp">Bytes: 3</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_HL,SP+e8"><a class="permalink" href="#LD_HL,SP+e8">LD\n  HL,SP+e8</a></h3>\n<p class="Pp">Add the signed value <var class="Ar">e8</var> to\n    <b class="Sy">SP</b> and store the result in\n    <a class="permalink" href="#HL."><b class="Sy" id="HL.">HL.</b></a></p>\n<p class="Pp">Cycles: 3</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags:</p>\n<ul class="Bl-bullet Bl-compact">\n  <li id="Z~11"><a class="permalink" href="#Z~11"><b class="Sy">Z</b></a>:\n    0</li>\n  <li id="N~12"><a class="permalink" href="#N~12"><b class="Sy">N</b></a>:\n    0</li>\n  <li id="H~13"><a class="permalink" href="#H~13"><b class="Sy">H</b></a>: Set\n      if overflow from bit 3.</li>\n  <li id="C~10"><a class="permalink" href="#C~10"><b class="Sy">C</b></a>: Set\n      if overflow from bit 7.</li>\n</ul>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_SP,HL"><a class="permalink" href="#LD_SP,HL">LD\n  SP,HL</a></h3>\n<p class="Pp">Load register <b class="Sy">HL</b> into register\n    <b class="Sy">SP</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="NOP"><a class="permalink" href="#NOP">NOP</a></h3>\n<p class="Pp">No operation.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="OR_A,r8"><a class="permalink" href="#OR_A,r8">OR\n  A,r8</a></h3>\n<p class="Pp">Bitwise OR between the value in <var class="Ar">r8</var> and\n    <b class="Sy">A</b>.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<ul class="Bl-bullet Bl-compact">\n  <li id="Z~12"><a class="permalink" href="#Z~12"><b class="Sy">Z</b></a>: Set\n      if result is 0.</li>\n  <li id="N~13"><a class="permalink" href="#N~13"><b class="Sy">N</b></a>:\n    0</li>\n  <li id="H~14"><a class="permalink" href="#H~14"><b class="Sy">H</b></a>:\n    0</li>\n  <li id="C~11"><a class="permalink" href="#C~11"><b class="Sy">C</b></a>:\n    0</li>\n</ul>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="OR_A,_HL_"><a class="permalink" href="#OR_A,_HL_">OR\n  A,[HL]</a></h3>\n<p class="Pp">Bitwise OR between the value pointed by <b class="Sy">HL</b> and\n    <b class="Sy">A</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: See <a class="Sx" href="#OR_A,r8">OR A,r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="OR_A,n8"><a class="permalink" href="#OR_A,n8">OR\n  A,n8</a></h3>\n<p class="Pp">Bitwise OR between the value in <var class="Ar">n8</var> and\n    <b class="Sy">A</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See <a class="Sx" href="#OR_A,r8">OR A,r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="POP_AF"><a class="permalink" href="#POP_AF">POP AF</a></h3>\n<p class="Pp">Pop register <b class="Sy">AF</b> from the stack.</p>\n<p class="Pp">Cycles: 3</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="POP_r16"><a class="permalink" href="#POP_r16">POP\n  r16</a></h3>\n<p class="Pp">Pop register <var class="Ar">r16</var> from the stack.</p>\n<p class="Pp">Cycles: 3</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="PUSH_AF"><a class="permalink" href="#PUSH_AF">PUSH\n  AF</a></h3>\n<p class="Pp">Push register <b class="Sy">AF</b> into the stack.</p>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="PUSH_r16"><a class="permalink" href="#PUSH_r16">PUSH\n  r16</a></h3>\n<p class="Pp">Push register <var class="Ar">r16</var> into the stack.</p>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="RES_u3,r8"><a class="permalink" href="#RES_u3,r8">RES\n  u3,r8</a></h3>\n<p class="Pp">Set bit <var class="Ar">u3</var> in register\n    <var class="Ar">r8</var> to 0.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="RES_u3,_HL_"><a class="permalink" href="#RES_u3,_HL_">RES\n  u3,[HL]</a></h3>\n<p class="Pp">Set bit <var class="Ar">u3</var> in the byte pointed by\n    <b class="Sy">HL</b> to 0.</p>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="RET"><a class="permalink" href="#RET">RET</a></h3>\n<p class="Pp">Return from subroutine.</p>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="RET_cc"><a class="permalink" href="#RET_cc">RET cc</a></h3>\n<p class="Pp">Return from subroutine if condition <var class="Ar">cc</var> is\n    met.</p>\n<p class="Pp">Cycles: 5/2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="RETI"><a class="permalink" href="#RETI">RETI</a></h3>\n<p class="Pp">Return from subroutine and enable interrupts.</p>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="RL_r8"><a class="permalink" href="#RL_r8">RL r8</a></h3>\n<p class="Pp">Rotate register <var class="Ar">r8</var> left through carry.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">C &lt;- [7 &lt;- 0] &lt;- C</div>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags:</p>\n<ul class="Bl-bullet Bl-compact">\n  <li id="Z~13"><a class="permalink" href="#Z~13"><b class="Sy">Z</b></a>: Set\n      if result is 0.</li>\n  <li id="N~14"><a class="permalink" href="#N~14"><b class="Sy">N</b></a>:\n    0</li>\n  <li id="H~15"><a class="permalink" href="#H~15"><b class="Sy">H</b></a>:\n    0</li>\n  <li id="C~12"><a class="permalink" href="#C~12"><b class="Sy">C</b></a>: Set\n      according to result.</li>\n</ul>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="RL__HL_"><a class="permalink" href="#RL__HL_">RL\n  [HL]</a></h3>\n<p class="Pp">Rotate value pointed by <b class="Sy">HL</b> left through\n  carry.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">C &lt;- [7 &lt;- 0] &lt;- C</div>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See <a class="Sx" href="#RL_r8">RL r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="RLA"><a class="permalink" href="#RLA">RLA</a></h3>\n<p class="Pp">Rotate register <b class="Sy">A</b> left through carry.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">C &lt;- [7 &lt;- 0] &lt;- C</div>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<ul class="Bl-bullet Bl-compact">\n  <li id="Z~14"><a class="permalink" href="#Z~14"><b class="Sy">Z</b></a>:\n    0</li>\n  <li id="N~15"><a class="permalink" href="#N~15"><b class="Sy">N</b></a>:\n    0</li>\n  <li id="H~16"><a class="permalink" href="#H~16"><b class="Sy">H</b></a>:\n    0</li>\n  <li id="C~13"><a class="permalink" href="#C~13"><b class="Sy">C</b></a>: Set\n      according to result.</li>\n</ul>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="RLC_r8"><a class="permalink" href="#RLC_r8">RLC r8</a></h3>\n<p class="Pp">Rotate register <var class="Ar">r8</var> left.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">C &lt;- [7 &lt;- 0] &lt;- [7]</div>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags:</p>\n<ul class="Bl-bullet Bl-compact">\n  <li id="Z~15"><a class="permalink" href="#Z~15"><b class="Sy">Z</b></a>: Set\n      if result is 0.</li>\n  <li id="N~16"><a class="permalink" href="#N~16"><b class="Sy">N</b></a>:\n    0</li>\n  <li id="H~17"><a class="permalink" href="#H~17"><b class="Sy">H</b></a>:\n    0</li>\n  <li id="C~14"><a class="permalink" href="#C~14"><b class="Sy">C</b></a>: Set\n      according to result.</li>\n</ul>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="RLC__HL_"><a class="permalink" href="#RLC__HL_">RLC\n  [HL]</a></h3>\n<p class="Pp">Rotate value pointed by <b class="Sy">HL</b> left.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">C &lt;- [7 &lt;- 0] &lt;- [7]</div>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See <a class="Sx" href="#RLC_r8">RLC r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="RLCA"><a class="permalink" href="#RLCA">RLCA</a></h3>\n<p class="Pp">Rotate register <b class="Sy">A</b> left.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">C &lt;- [7 &lt;- 0] &lt;- [7]</div>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<ul class="Bl-bullet Bl-compact">\n  <li id="Z~16"><a class="permalink" href="#Z~16"><b class="Sy">Z</b></a>:\n    0</li>\n  <li id="N~17"><a class="permalink" href="#N~17"><b class="Sy">N</b></a>:\n    0</li>\n  <li id="H~18"><a class="permalink" href="#H~18"><b class="Sy">H</b></a>:\n    0</li>\n  <li id="C~15"><a class="permalink" href="#C~15"><b class="Sy">C</b></a>: Set\n      according to result.</li>\n</ul>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="RR_r8"><a class="permalink" href="#RR_r8">RR r8</a></h3>\n<p class="Pp">Rotate register <var class="Ar">r8</var> right through carry.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">C -&gt; [7 -&gt; 0] -&gt; C</div>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags:</p>\n<ul class="Bl-bullet Bl-compact">\n  <li id="Z~17"><a class="permalink" href="#Z~17"><b class="Sy">Z</b></a>: Set\n      if result is 0.</li>\n  <li id="N~18"><a class="permalink" href="#N~18"><b class="Sy">N</b></a>:\n    0</li>\n  <li id="H~19"><a class="permalink" href="#H~19"><b class="Sy">H</b></a>:\n    0</li>\n  <li id="C~16"><a class="permalink" href="#C~16"><b class="Sy">C</b></a>: Set\n      according to result.</li>\n</ul>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="RR__HL_"><a class="permalink" href="#RR__HL_">RR\n  [HL]</a></h3>\n<p class="Pp">Rotate value pointed by <b class="Sy">HL</b> right through\n  carry.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">C -&gt; [7 -&gt; 0] -&gt; C</div>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See <a class="Sx" href="#RR_r8">RR r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="RRA"><a class="permalink" href="#RRA">RRA</a></h3>\n<p class="Pp">Rotate register <b class="Sy">A</b> right through carry.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">C -&gt; [7 -&gt; 0] -&gt; C</div>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<ul class="Bl-bullet Bl-compact">\n  <li id="Z~18"><a class="permalink" href="#Z~18"><b class="Sy">Z</b></a>:\n    0</li>\n  <li id="N~19"><a class="permalink" href="#N~19"><b class="Sy">N</b></a>:\n    0</li>\n  <li id="H~20"><a class="permalink" href="#H~20"><b class="Sy">H</b></a>:\n    0</li>\n  <li id="C~17"><a class="permalink" href="#C~17"><b class="Sy">C</b></a>: Set\n      according to result.</li>\n</ul>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="RRC_r8"><a class="permalink" href="#RRC_r8">RRC r8</a></h3>\n<p class="Pp">Rotate register <var class="Ar">r8</var> right.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">[0] -&gt; [7 -&gt; 0] -&gt; C</div>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags:</p>\n<ul class="Bl-bullet Bl-compact">\n  <li id="Z~19"><a class="permalink" href="#Z~19"><b class="Sy">Z</b></a>: Set\n      if result is 0.</li>\n  <li id="N~20"><a class="permalink" href="#N~20"><b class="Sy">N</b></a>:\n    0</li>\n  <li id="H~21"><a class="permalink" href="#H~21"><b class="Sy">H</b></a>:\n    0</li>\n  <li id="C~18"><a class="permalink" href="#C~18"><b class="Sy">C</b></a>: Set\n      according to result.</li>\n</ul>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="RRC__HL_"><a class="permalink" href="#RRC__HL_">RRC\n  [HL]</a></h3>\n<p class="Pp">Rotate value pointed by <b class="Sy">HL</b> right.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">[0] -&gt; [7 -&gt; 0] -&gt; C</div>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See <a class="Sx" href="#RRC_r8">RRC r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="RRCA"><a class="permalink" href="#RRCA">RRCA</a></h3>\n<p class="Pp">Rotate register <b class="Sy">A</b> right.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">[0] -&gt; [7 -&gt; 0] -&gt; C</div>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<ul class="Bl-bullet Bl-compact">\n  <li id="Z~20"><a class="permalink" href="#Z~20"><b class="Sy">Z</b></a>:\n    0</li>\n  <li id="N~21"><a class="permalink" href="#N~21"><b class="Sy">N</b></a>:\n    0</li>\n  <li id="H~22"><a class="permalink" href="#H~22"><b class="Sy">H</b></a>:\n    0</li>\n  <li id="C~19"><a class="permalink" href="#C~19"><b class="Sy">C</b></a>: Set\n      according to result.</li>\n</ul>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="RST_vec"><a class="permalink" href="#RST_vec">RST\n  vec</a></h3>\n<p class="Pp">Call restart vector <var class="Ar">vec</var>.</p>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="SBC_A,r8"><a class="permalink" href="#SBC_A,r8">SBC\n  A,r8</a></h3>\n<p class="Pp">Subtract the value in <var class="Ar">r8</var> and the carry flag\n    from <b class="Sy">A</b>.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<ul class="Bl-bullet Bl-compact">\n  <li id="Z~21"><a class="permalink" href="#Z~21"><b class="Sy">Z</b></a>: Set\n      if result is 0.</li>\n  <li id="N~22"><a class="permalink" href="#N~22"><b class="Sy">N</b></a>:\n    1</li>\n  <li id="H~23"><a class="permalink" href="#H~23"><b class="Sy">H</b></a>: Set\n      if no borrow from bit 4.</li>\n  <li id="C~20"><a class="permalink" href="#C~20"><b class="Sy">C</b></a>: Set\n      if no borrow (set if <var class="Ar">r8</var> &gt;\n    <b class="Sy">A</b>).</li>\n</ul>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="SBC_A,_HL_"><a class="permalink" href="#SBC_A,_HL_">SBC\n  A,[HL]</a></h3>\n<p class="Pp">Subtract the value pointed by <b class="Sy">HL</b> and the carry\n    flag from <b class="Sy">A</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: See <a class="Sx" href="#SBC_A,r8">SBC A,r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="SBC_A,n8"><a class="permalink" href="#SBC_A,n8">SBC\n  A,n8</a></h3>\n<p class="Pp">Subtract the value <var class="Ar">n8</var> and the carry flag\n    from <b class="Sy">A</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See <a class="Sx" href="#SBC_A,r8">SBC A,r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="SCF"><a class="permalink" href="#SCF">SCF</a></h3>\n<p class="Pp">Set Carry Flag.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<ul class="Bl-bullet Bl-compact">\n  <li id="N~23"><a class="permalink" href="#N~23"><b class="Sy">N</b></a>:\n    0</li>\n  <li id="H~24"><a class="permalink" href="#H~24"><b class="Sy">H</b></a>:\n    0</li>\n  <li id="C~21"><a class="permalink" href="#C~21"><b class="Sy">C</b></a>:\n    1</li>\n</ul>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="SET_u3,r8"><a class="permalink" href="#SET_u3,r8">SET\n  u3,r8</a></h3>\n<p class="Pp">Set bit <var class="Ar">u3</var> in register\n    <var class="Ar">r8</var> to 1.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="SET_u3,_HL_"><a class="permalink" href="#SET_u3,_HL_">SET\n  u3,[HL]</a></h3>\n<p class="Pp">Set bit <var class="Ar">u3</var> in the byte pointed by\n    <b class="Sy">HL</b> to 1.</p>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="SLA_r8"><a class="permalink" href="#SLA_r8">SLA r8</a></h3>\n<p class="Pp">Shift left arithmetic register <var class="Ar">r8</var>.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">C &lt;- [7 &lt;- 0] &lt;- 0</div>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags:</p>\n<ul class="Bl-bullet Bl-compact">\n  <li id="Z~22"><a class="permalink" href="#Z~22"><b class="Sy">Z</b></a>: Set\n      if result is 0.</li>\n  <li id="N~24"><a class="permalink" href="#N~24"><b class="Sy">N</b></a>:\n    0</li>\n  <li id="H~25"><a class="permalink" href="#H~25"><b class="Sy">H</b></a>:\n    0</li>\n  <li id="C~22"><a class="permalink" href="#C~22"><b class="Sy">C</b></a>: Set\n      according to result.</li>\n</ul>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="SLA__HL_"><a class="permalink" href="#SLA__HL_">SLA\n  [HL]</a></h3>\n<p class="Pp">Shift left arithmetic value pointed by <b class="Sy">HL</b>.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">C &lt;- [7 &lt;- 0] &lt;- 0</div>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See <a class="Sx" href="#SLA_r8">SLA r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="SRA_r8"><a class="permalink" href="#SRA_r8">SRA r8</a></h3>\n<p class="Pp">Shift right arithmetic register <var class="Ar">r8</var>.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">[7] -&gt; [7 -&gt; 0] -&gt; C</div>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags:</p>\n<ul class="Bl-bullet Bl-compact">\n  <li id="Z~23"><a class="permalink" href="#Z~23"><b class="Sy">Z</b></a>: Set\n      if result is 0.</li>\n  <li id="N~25"><a class="permalink" href="#N~25"><b class="Sy">N</b></a>:\n    0</li>\n  <li id="H~26"><a class="permalink" href="#H~26"><b class="Sy">H</b></a>:\n    0</li>\n  <li id="C~23"><a class="permalink" href="#C~23"><b class="Sy">C</b></a>: Set\n      according to result.</li>\n</ul>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="SRA__HL_"><a class="permalink" href="#SRA__HL_">SRA\n  [HL]</a></h3>\n<p class="Pp">Shift right arithmetic value pointed by <b class="Sy">HL</b>.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">[7] -&gt; [7 -&gt; 0] -&gt; C</div>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See <a class="Sx" href="#SRA_r8">SRA r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="SRL_r8"><a class="permalink" href="#SRL_r8">SRL r8</a></h3>\n<p class="Pp">Shift right logic register <var class="Ar">r8</var>.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">0 -&gt; [7 -&gt; 0] -&gt; C</div>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags:</p>\n<ul class="Bl-bullet Bl-compact">\n  <li id="Z~24"><a class="permalink" href="#Z~24"><b class="Sy">Z</b></a>: Set\n      if result is 0.</li>\n  <li id="N~26"><a class="permalink" href="#N~26"><b class="Sy">N</b></a>:\n    0</li>\n  <li id="H~27"><a class="permalink" href="#H~27"><b class="Sy">H</b></a>:\n    0</li>\n  <li id="C~24"><a class="permalink" href="#C~24"><b class="Sy">C</b></a>: Set\n      according to result.</li>\n</ul>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="SRL__HL_"><a class="permalink" href="#SRL__HL_">SRL\n  [HL]</a></h3>\n<p class="Pp">Shift right logic value pointed by <b class="Sy">HL</b>.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">0 -&gt; [7 -&gt; 0] -&gt; C</div>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See <a class="Sx" href="#SRA_r8">SRA r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="STOP"><a class="permalink" href="#STOP">STOP</a></h3>\n<p class="Pp">Enter CPU very low power mode. Also used to switch between doube\n    speed and normal CPU modes in GBC.</p>\n<p class="Pp">Cycles: -</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="SUB_A,r8"><a class="permalink" href="#SUB_A,r8">SUB\n  A,r8</a></h3>\n<p class="Pp">Subtract the value in <var class="Ar">r8</var> from\n    <b class="Sy">A</b>.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<ul class="Bl-bullet Bl-compact">\n  <li id="Z~25"><a class="permalink" href="#Z~25"><b class="Sy">Z</b></a>: Set\n      if result is 0.</li>\n  <li id="N~27"><a class="permalink" href="#N~27"><b class="Sy">N</b></a>:\n    1</li>\n  <li id="H~28"><a class="permalink" href="#H~28"><b class="Sy">H</b></a>: Set\n      if no borrow from bit 4.</li>\n  <li id="C~25"><a class="permalink" href="#C~25"><b class="Sy">C</b></a>: Set\n      if no borrow (set if <var class="Ar">r8</var> &gt;\n    <b class="Sy">A</b>).</li>\n</ul>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="SUB_A,_HL_"><a class="permalink" href="#SUB_A,_HL_">SUB\n  A,[HL]</a></h3>\n<p class="Pp">Subtract the value pointed by <b class="Sy">HL</b> from\n    <b class="Sy">A</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: See <a class="Sx" href="#SUB_A,r8">SUB A,r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="SUB_A,n8"><a class="permalink" href="#SUB_A,n8">SUB\n  A,n8</a></h3>\n<p class="Pp">Subtract the value <var class="Ar">n8</var> from\n    <b class="Sy">A</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See <a class="Sx" href="#SUB_A,r8">SUB A,r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="SWAP_r8"><a class="permalink" href="#SWAP_r8">SWAP\n  r8</a></h3>\n<p class="Pp">Swap upper 4 bits in register <var class="Ar">r8</var> and the\n    lower ones.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags:</p>\n<ul class="Bl-bullet Bl-compact">\n  <li id="Z~26"><a class="permalink" href="#Z~26"><b class="Sy">Z</b></a>: Set\n      if result is 0.</li>\n  <li id="N~28"><a class="permalink" href="#N~28"><b class="Sy">N</b></a>:\n    0</li>\n  <li id="H~29"><a class="permalink" href="#H~29"><b class="Sy">H</b></a>:\n    0</li>\n  <li id="C~26"><a class="permalink" href="#C~26"><b class="Sy">C</b></a>:\n    0</li>\n</ul>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="SWAP__HL_"><a class="permalink" href="#SWAP__HL_">SWAP\n  [HL]</a></h3>\n<p class="Pp">Swap upper 4 bits in the byte pointed by <b class="Sy">HL</b> and\n    the lower ones.</p>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See <a class="Sx" href="#SWAP_r8">SWAP r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="XOR_A,r8"><a class="permalink" href="#XOR_A,r8">XOR\n  A,r8</a></h3>\n<p class="Pp">Bitwise XOR between the value in <var class="Ar">r8</var> and\n    <b class="Sy">A</b>.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<ul class="Bl-bullet Bl-compact">\n  <li id="Z~27"><a class="permalink" href="#Z~27"><b class="Sy">Z</b></a>: Set\n      if result is 0.</li>\n  <li id="N~29"><a class="permalink" href="#N~29"><b class="Sy">N</b></a>:\n    0</li>\n  <li id="H~30"><a class="permalink" href="#H~30"><b class="Sy">H</b></a>:\n    0</li>\n  <li id="C~27"><a class="permalink" href="#C~27"><b class="Sy">C</b></a>:\n    0</li>\n</ul>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="XOR_A,_HL_"><a class="permalink" href="#XOR_A,_HL_">XOR\n  A,[HL]</a></h3>\n<p class="Pp">Bitwise XOR between the value pointed by <b class="Sy">HL</b> and\n    <b class="Sy">A</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: See <a class="Sx" href="#XOR_A,r8">XOR A,r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="XOR_A,n8"><a class="permalink" href="#XOR_A,n8">XOR\n  A,n8</a></h3>\n<p class="Pp">Bitwise XOR between the value in <var class="Ar">n8</var> and\n    <b class="Sy">A</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See <a class="Sx" href="#XOR_A,r8">XOR A,r8</a></p>\n</section>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="SEE_ALSO"><a class="permalink" href="#SEE_ALSO">SEE\n  ALSO</a></h2>\n<p class="Pp"><a class="Xr" href="./rgbasm.1">rgbasm(1)</a>,\n    <a class="Xr" href="./rgbds.7">rgbds(7)</a></p>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="HISTORY"><a class="permalink" href="#HISTORY">HISTORY</a></h2>\n<p class="Pp"><code class="Nm">rgbds</code> was originally written by Carsten\n    S&#x00F8;rensen as part of the ASMotor package, and was later packaged in\n    RGBDS by Justin Lloyd. It is now maintained by a number of contributors at\n    <a class="Lk" href="https://github.com/rednex/rgbds">https://github.com/rednex/rgbds</a>.</p>\n</section>\n'}}))}o.isMDXComponent=!0}}]);