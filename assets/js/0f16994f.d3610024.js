"use strict";(self.webpackChunkrgbds_www=self.webpackChunkrgbds_www||[]).push([[4428],{3905:function(e,a,s){s.d(a,{Zo:function(){return o},kt:function(){return p}});var n=s(67294);function t(e,a,s){return a in e?Object.defineProperty(e,a,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[a]=s,e}function d(e,a){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),s.push.apply(s,n)}return s}function r(e){for(var a=1;a<arguments.length;a++){var s=null!=arguments[a]?arguments[a]:{};a%2?d(Object(s),!0).forEach((function(a){t(e,a,s[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):d(Object(s)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(s,a))}))}return e}function c(e,a){if(null==e)return{};var s,n,t=function(e,a){if(null==e)return{};var s,n,t={},d=Object.keys(e);for(n=0;n<d.length;n++)s=d[n],a.indexOf(s)>=0||(t[s]=e[s]);return t}(e,a);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(e);for(n=0;n<d.length;n++)s=d[n],a.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(t[s]=e[s])}return t}var l=n.createContext({}),i=function(e){var a=n.useContext(l),s=a;return e&&(s="function"==typeof e?e(a):r(r({},a),e)),s},o=function(e){var a=i(e.components);return n.createElement(l.Provider,{value:a},e.children)},h={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef((function(e,a){var s=e.components,t=e.mdxType,d=e.originalType,l=e.parentName,o=c(e,["components","mdxType","originalType","parentName"]),m=i(s),p=t,f=m["".concat(l,".").concat(p)]||m[p]||h[p]||d;return s?n.createElement(f,r(r({ref:a},o),{},{components:s})):n.createElement(f,r({ref:a},o))}));function p(e,a){var s=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var d=s.length,r=new Array(d);r[0]=m;var c={};for(var l in a)hasOwnProperty.call(a,l)&&(c[l]=a[l]);c.originalType=e,c.mdxType="string"==typeof e?e:t,r[1]=c;for(var i=2;i<d;i++)r[i]=s[i];return n.createElement.apply(null,r)}return n.createElement.apply(null,s)}m.displayName="MDXCreateElement"},84338:function(e,a,s){s.r(a),s.d(a,{assets:function(){return o},contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return c},metadata:function(){return i},toc:function(){return h}});var n=s(83117),t=s(80102),d=(s(67294),s(3905)),r=["components"],c={},l="rgbds(5) \u2014 object file format documentation",i={unversionedId:"rgbds.5",id:"rgbds.5",title:"rgbds(5) \u2014 object file format documentation",description:"",source:"@site/docs/rgbds.5.md",sourceDirName:".",slug:"/rgbds.5",permalink:"/docs/master/rgbds.5",draft:!1,editUrl:"https://github.com/gbdev/rgbds/edit/master/man/rgbds.5",tags:[],version:"current",frontMatter:{},sidebar:"nav",previous:{title:"rgblink(5) \u2014 linker script file format",permalink:"/docs/master/rgblink.5"},next:{title:"rgbasm(1) \u2014 Game Boy assembler",permalink:"/docs/master/rgbasm.1"}},o={},h=[{value:"DESCRIPTION",id:"DESCRIPTION",level:2,children:[]},{value:"FILE STRUCTURE",id:"FILE_STRUCTURE",level:2,children:[{value:"Header",id:"Header",level:3,children:[]},{value:"Source file info",id:"Source_file_info",level:3,children:[]},{value:"Symbols",id:"Symbols",level:3,children:[]},{value:"Sections",id:"Sections",level:3,children:[]},{value:"Assertions",id:"Assertions",level:3,children:[]},{value:"RPN EXPRESSIONS",id:"RPN_EXPRESSIONS",level:3,children:[]}]},{value:"SEE ALSO",id:"SEE_ALSO",level:2,children:[]},{value:"HISTORY",id:"HISTORY",level:2,children:[]}],m={toc:h};function p(e){var a=e.components,s=(0,t.Z)(e,r);return(0,d.kt)("wrapper",(0,n.Z)({},m,s,{components:a,mdxType:"MDXLayout"}),(0,d.kt)("h1",{id:"rgbds5--object-file-format-documentation"},"rgbds(5) \u2014 object file format documentation"),(0,d.kt)("div",{className:"manual-text",dangerouslySetInnerHTML:{__html:'<section class="Sh">\n<h2 class="Sh" id="DESCRIPTION"><a class="permalink" href="#DESCRIPTION">DESCRIPTION</a></h2>\n<p class="Pp">This is the description of the object files used by\n    <a class="Xr" href="./rgbasm.1">rgbasm(1)</a> and\n    <a class="Xr" href="./rgblink.1">rgblink(1)</a>.\n    <a class="permalink" href="#Please"><i class="Em" id="Please">Please note\n    that the specification is not stable yet.</i></a> RGBDS is still in active\n    development, and some new features require adding more information to the\n    object file, or modifying some fields, both of which break compatibility\n    with older versions.</p>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="FILE_STRUCTURE"><a class="permalink" href="#FILE_STRUCTURE">FILE\n  STRUCTURE</a></h2>\n<p class="Pp">The following types are used:</p>\n<p class="Pp"><code class="Cm">LONG</code> is a 32-bit integer stored in\n    little-endian format. <code class="Cm">BYTE</code> is an 8-bit integer.\n    <code class="Cm">STRING</code> is a 0-terminated string of\n    <code class="Cm">BYTE</code>. Brackets after a type (e.g.\n    <code class="Cm">LONG</code>[<var class="Ar">n</var>]) indicate\n    <var class="Ar">n</var> consecutive elements (here,\n    <code class="Cm">LONG</code>s). All items are contiguous, with no padding\n    anywhere&#x2014;this also means that they may not be aligned in the\n  file!</p>\n<p class="Pp"><code class="Cm">REPT</code> <var class="Ar">n</var> indicates\n    that the fields between the <code class="Cm">REPT</code> and corresponding\n    <code class="Cm">ENDR</code> are repeated <var class="Ar">n</var> times.</p>\n<p class="Pp" id="this">All IDs refer to objects within the file; for example,\n    symbol ID $0001 refers to the second symbol defined in\n    <a class="permalink" href="#this"><i class="Em">this</i></a> object file\'s\n    <a class="Sx" href="#Symbols">Symbols</a> array. The only exception is the\n    <a class="Sx" href="#Source_file_info">Source file info</a> nodes, whose IDs\n    are backwards, i.e. source node ID $0000 refers to the\n    <a class="permalink" href="#last"><i class="Em" id="last">last</i></a> node\n    in the array, not the first one. References to other object files are made\n    by imports (symbols), by name (sections), etc.&#x2014;but never by ID.</p>\n<section class="Ss">\n<h3 class="Ss" id="Header"><a class="permalink" href="#Header">Header</a></h3>\n<dl class="Bl-tag Bl-compact">\n  <dt id="BYTE"><a class="permalink" href="#BYTE"><code class="Cm">BYTE</code></a>\n    <var class="Ar">Magic[4]</var></dt>\n  <dd>&quot;RGB9&quot;</dd>\n  <dt id="LONG"><a class="permalink" href="#LONG"><code class="Cm">LONG</code></a>\n    <var class="Ar">RevisionNumber</var></dt>\n  <dd>The format\'s revision number this file uses. (This is always in the same\n      place in all revisions.)</dd>\n  <dt id="LONG~2"><a class="permalink" href="#LONG~2"><code class="Cm">LONG</code></a>\n    <var class="Ar">NumberOfSymbols</var></dt>\n  <dd>How many symbols are defined in this object file.</dd>\n  <dt id="LONG~3"><a class="permalink" href="#LONG~3"><code class="Cm">LONG</code></a>\n    <var class="Ar">NumberOfSections</var></dt>\n  <dd>How many sections are defined in this object file.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Source_file_info"><a class="permalink" href="#Source_file_info">Source\n  file info</a></h3>\n<dl class="Bl-tag Bl-compact">\n  <dt id="LONG~4"><a class="permalink" href="#LONG~4"><code class="Cm">LONG</code></a>\n    <var class="Ar">NumberOfNodes</var></dt>\n  <dd>The number of source context nodes contained in this file.</dd>\n  <dt id="REPT"><a class="permalink" href="#REPT"><code class="Cm">REPT</code></a>\n    <var class="Ar">NumberOfNodes</var></dt>\n  <dd>\n    <dl class="Bl-tag Bl-compact">\n      <dt id="LONG~5"><a class="permalink" href="#LONG~5"><code class="Cm">LONG</code></a>\n        <var class="Ar">ParentID</var></dt>\n      <dd>ID of the parent node, -1 meaning that this is the root node.\n        <p class="Pp" id="Important"><a class="permalink" href="#Important"><b class="Sy">Important</b></a>:\n            the nodes are actually written in\n            <a class="permalink" href="#reverse"><b class="Sy" id="reverse">reverse</b></a>\n            order, meaning the node with ID 0 is the last one in the list!</p>\n      </dd>\n      <dt id="LONG~6"><a class="permalink" href="#LONG~6"><code class="Cm">LONG</code></a>\n        <var class="Ar">ParentLineNo</var></dt>\n      <dd>Line at which the parent node\'s context was exited; meaningless for\n          the root node.</dd>\n      <dt id="BYTE~2"><a class="permalink" href="#BYTE~2"><code class="Cm">BYTE</code></a>\n        <var class="Ar">Type</var></dt>\n      <dd>\n        <table class="Bl-column Bl-compact">\n          <tr id="Value">\n            <td><a class="permalink" href="#Value"><b class="Sy">Value</b></a></td>\n            <td><a class="permalink" href="#Meaning"><b class="Sy" id="Meaning">Meaning</b></a></td>\n          </tr>\n          <tr>\n            <td>0</td>\n            <td>REPT node</td>\n          </tr>\n          <tr>\n            <td>1</td>\n            <td>File node</td>\n          </tr>\n          <tr>\n            <td>2</td>\n            <td>Macro node</td>\n          </tr>\n        </table>\n      </dd>\n      <dt id="IF"><a class="permalink" href="#IF"><code class="Cm">IF</code></a>\n        <var class="Ar">Type</var> <span class="No">&#x2260; 0</span></dt>\n      <dd>If the node is not a REPT node...\n        <p class="Pp"></p>\n        <dl class="Bl-tag Bl-compact">\n          <dt id="STRING"><a class="permalink" href="#STRING"><code class="Cm">STRING</code></a>\n            <var class="Ar">Name</var></dt>\n          <dd>The node\'s name: either a file name, or the macro\'s name prefixes\n              by its definition\'s file name (e.g.\n              &#x2018;<code class="Li">src/includes/defines.asm::error</code>&#x2019;).</dd>\n        </dl>\n      </dd>\n      <dt id="ELSE"><a class="permalink" href="#ELSE"><code class="Cm">ELSE</code></a></dt>\n      <dd>If the node is a REPT, it also contains the iteration counter of all\n          parent REPTs.\n        <p class="Pp"></p>\n        <dl class="Bl-tag Bl-compact">\n          <dt id="LONG~7"><a class="permalink" href="#LONG~7"><code class="Cm">LONG</code></a>\n            <var class="Ar">Depth</var></dt>\n          <dd style="width: auto;">&#x00A0;</dd>\n          <dt id="LONG~8"><a class="permalink" href="#LONG~8"><code class="Cm">LONG</code></a>\n            <var class="Ar">Iter</var>[<var class="Ar">Depth</var>]</dt>\n          <dd>The number of REPT iterations, by increasing depth.</dd>\n        </dl>\n      </dd>\n      <dt id="ENDC"><a class="permalink" href="#ENDC"><code class="Cm">ENDC</code></a></dt>\n      <dd style="width: auto;">&#x00A0;</dd>\n    </dl>\n  </dd>\n  <dt id="ENDR"><a class="permalink" href="#ENDR"><code class="Cm">ENDR</code></a></dt>\n  <dd style="width: auto;">&#x00A0;</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Symbols"><a class="permalink" href="#Symbols">Symbols</a></h3>\n<dl class="Bl-tag Bl-compact">\n  <dt id="REPT~2"><a class="permalink" href="#REPT~2"><code class="Cm">REPT</code></a>\n    <var class="Ar">NumberOfSymbols</var></dt>\n  <dd>\n    <dl class="Bl-tag Bl-compact">\n      <dt id="STRING~2"><a class="permalink" href="#STRING~2"><code class="Cm">STRING</code></a>\n        <var class="Ar">Name</var></dt>\n      <dd>This symbol\'s name. Local symbols are stored as their full name\n          (&#x2018;<code class="Li">Scope.symbol</code>&#x2019;).</dd>\n      <dt id="BYTE~3"><a class="permalink" href="#BYTE~3"><code class="Cm">BYTE</code></a>\n        <var class="Ar">Type</var></dt>\n      <dd>\n        <table class="Bl-column Bl-compact">\n          <tr id="Value~2">\n            <td><a class="permalink" href="#Value~2"><b class="Sy">Value</b></a></td>\n            <td><a class="permalink" href="#Meaning~2"><b class="Sy" id="Meaning~2">Meaning</b></a></td>\n          </tr>\n          <tr id="Local">\n            <td>0</td>\n            <td><a class="permalink" href="#Local"><b class="Sy">Local</b></a>\n              <span class="No">symbol only used in this file.</span></td>\n          </tr>\n          <tr id="Import">\n            <td>1</td>\n            <td><a class="permalink" href="#Import"><b class="Sy">Import</b></a>\n              <span class="No">of an exported symbol (by name) from another\n              object file.</span></td>\n          </tr>\n          <tr id="Exported">\n            <td>2</td>\n            <td><a class="permalink" href="#Exported"><b class="Sy">Exported</b></a>\n              <span class="No">symbol visible from other object\n              files.</span></td>\n          </tr>\n        </table>\n      </dd>\n      <dt id="IF~2"><a class="permalink" href="#IF~2"><code class="Cm">IF</code></a>\n        <var class="Ar">Type</var> <span class="No">&#x2260; 1</span></dt>\n      <dd>If the symbol is defined in this object file...\n        <p class="Pp"></p>\n        <dl class="Bl-tag Bl-compact">\n          <dt id="LONG~9"><a class="permalink" href="#LONG~9"><code class="Cm">LONG</code></a>\n            <var class="Ar">NodeID</var></dt>\n          <dd>Context in which the symbol was defined.</dd>\n          <dt id="LONG~10"><a class="permalink" href="#LONG~10"><code class="Cm">LONG</code></a>\n            <var class="Ar">LineNo</var></dt>\n          <dd>Line number in the context at which the symbol was defined.</dd>\n          <dt id="LONG~11"><a class="permalink" href="#LONG~11"><code class="Cm">LONG</code></a>\n            <var class="Ar">SectionID</var></dt>\n          <dd>The ID of the section in which the symbol is defined. If the\n              symbol doesn\'t belong to any specific section (i.e. it\'s a\n              constant), this field contains -1.</dd>\n          <dt id="LONG~12"><a class="permalink" href="#LONG~12"><code class="Cm">LONG</code></a>\n            <var class="Ar">Value</var></dt>\n          <dd>The symbol\'s value. If the symbol belongs to a section, this is\n              the offset within that symbol\'s section.</dd>\n        </dl>\n      </dd>\n      <dt id="ENDC~2"><a class="permalink" href="#ENDC~2"><code class="Cm">ENDC</code></a></dt>\n      <dd style="width: auto;">&#x00A0;</dd>\n    </dl>\n  </dd>\n  <dt id="ENDR~2"><a class="permalink" href="#ENDR~2"><code class="Cm">ENDR</code></a></dt>\n  <dd style="width: auto;">&#x00A0;</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Sections"><a class="permalink" href="#Sections">Sections</a></h3>\n<dl class="Bl-tag Bl-compact">\n  <dt id="REPT~3"><a class="permalink" href="#REPT~3"><code class="Cm">REPT</code></a>\n    <var class="Ar">NumberOfSections</var></dt>\n  <dd>\n    <dl class="Bl-tag Bl-compact">\n      <dt id="STRING~3"><a class="permalink" href="#STRING~3"><code class="Cm">STRING</code></a>\n        <var class="Ar">Name</var></dt>\n      <dd>The section\'s name.</dd>\n      <dt id="LONG~13"><a class="permalink" href="#LONG~13"><code class="Cm">LONG</code></a>\n        <var class="Ar">Size</var></dt>\n      <dd>The section\'s size, in bytes.</dd>\n      <dt id="BYTE~4"><a class="permalink" href="#BYTE~4"><code class="Cm">BYTE</code></a>\n        <var class="Ar">Type</var></dt>\n      <dd>Bits 0&#x2013;2 indicate the section\'s type:\n        <table class="Bl-column Bl-compact">\n          <tr id="Value~3">\n            <td><a class="permalink" href="#Value~3"><b class="Sy">Value</b></a></td>\n            <td><a class="permalink" href="#Meaning~3"><b class="Sy" id="Meaning~3">Meaning</b></a></td>\n          </tr>\n          <tr>\n            <td>0</td>\n            <td>WRAM0</td>\n          </tr>\n          <tr>\n            <td>1</td>\n            <td>VRAM</td>\n          </tr>\n          <tr>\n            <td>2</td>\n            <td>ROMX</td>\n          </tr>\n          <tr>\n            <td>3</td>\n            <td>ROM0</td>\n          </tr>\n          <tr>\n            <td>4</td>\n            <td>HRAM</td>\n          </tr>\n          <tr>\n            <td>5</td>\n            <td>WRAMX</td>\n          </tr>\n          <tr>\n            <td>6</td>\n            <td>SRAM</td>\n          </tr>\n          <tr>\n            <td>7</td>\n            <td>OAM</td>\n          </tr>\n        </table>\n        <p class="Pp">Bit&#x00A0;7 being set means that the section is a\n            &quot;union&quot; (see &#x201C;Unionized sections&#x201D; in\n            <a class="Xr" href="./rgbasm.5">rgbasm(5)</a>). Bit&#x00A0;6 being\n            set means that the section is a &quot;fragment&quot; (see\n            &#x201C;Section fragments&#x201D; in\n            <a class="Xr" href="./rgbasm.5">rgbasm(5)</a>). These two bits are\n            mutually exclusive.</p>\n      </dd>\n      <dt id="LONG~14"><a class="permalink" href="#LONG~14"><code class="Cm">LONG</code></a>\n        <var class="Ar">Address</var></dt>\n      <dd>Address this section must be placed at. This must either be valid for\n          the section\'s <var class="Ar">Type</var> (as affected by flags like\n          <code class="Fl">-t</code> or <code class="Fl">-d</code> in\n          <a class="Xr" href="./rgblink.1">rgblink(1)</a>), or -1 to indicate\n          that the linker should automatically decide (the section is\n          &#x201C;floating&#x201D;).</dd>\n      <dt id="LONG~15"><a class="permalink" href="#LONG~15"><code class="Cm">LONG</code></a>\n        <var class="Ar">Bank</var></dt>\n      <dd>ID of the bank this section must be placed in. This must either be\n          valid for the section\'s <var class="Ar">Type</var> (with the same\n          caveats as for the <var class="Ar">Address</var>), or -1 to indicate\n          that the linker should automatically decide.</dd>\n      <dt id="BYTE~5"><a class="permalink" href="#BYTE~5"><code class="Cm">BYTE</code></a>\n        <var class="Ar">Alignment</var></dt>\n      <dd>How many bits of the section\'s address should be equal to\n          <var class="Ar">AlignOfs</var>, starting from the least-significant\n          bit.</dd>\n      <dt id="LONG~16"><a class="permalink" href="#LONG~16"><code class="Cm">LONG</code></a>\n        <var class="Ar">AlignOfs</var></dt>\n      <dd>Alignment offset. Must be strictly less than\n          &#x2018;<code class="Li">1 &lt;&lt;\n          <var class="Ar">Alignment</var></code>&#x2019;.</dd>\n      <dt id="IF~3"><a class="permalink" href="#IF~3"><code class="Cm">IF</code></a>\n        <var class="Ar">Type</var> <span class="No">= 2 ||</span>\n        <var class="Ar">Type</var> <span class="No">= 3</span></dt>\n      <dd>If the section has ROM type, it contains data.\n        <p class="Pp"></p>\n        <dl class="Bl-tag Bl-compact">\n          <dt id="BYTE~6"><a class="permalink" href="#BYTE~6"><code class="Cm">BYTE</code></a>\n            <var class="Ar">Data</var>[Size]</dt>\n          <dd>The section\'s raw data. Bytes that will be patched over must be\n              present, even though their contents will be overwritten.</dd>\n          <dt id="LONG~17"><a class="permalink" href="#LONG~17"><code class="Cm">LONG</code></a>\n            <var class="Ar">NumberOfPatches</var></dt>\n          <dd>How many patches must be applied to this section\'s\n              <var class="Ar">Data</var>.</dd>\n          <dt id="REPT~4"><a class="permalink" href="#REPT~4"><code class="Cm">REPT</code></a>\n            <var class="Ar">NumberOfPatches</var></dt>\n          <dd>\n            <dl class="Bl-tag Bl-compact">\n              <dt id="LONG~18"><a class="permalink" href="#LONG~18"><code class="Cm">LONG</code></a>\n                <var class="Ar">NodeID</var></dt>\n              <dd>Context in which the patch was defined.</dd>\n              <dt id="LONG~19"><a class="permalink" href="#LONG~19"><code class="Cm">LONG</code></a>\n                <var class="Ar">LineNo</var></dt>\n              <dd>Line number in the context at which the patch was\n                defined.</dd>\n              <dt id="LONG~20"><a class="permalink" href="#LONG~20"><code class="Cm">LONG</code></a>\n                <var class="Ar">Offset</var></dt>\n              <dd>Offset within the section\'s <var class="Ar">Data</var> at\n                  which the patch should be applied. Must not be greater than\n                  the section\'s <var class="Ar">Size</var> minus the patch\'s\n                  size (see <var class="Ar">Type</var>\n                  <span class="No">below</span>).</dd>\n              <dt id="LONG~21"><a class="permalink" href="#LONG~21"><code class="Cm">LONG</code></a>\n                <var class="Ar">PCSectionID</var></dt>\n              <dd>ID of the section in which PC is located. (This is usually the\n                  same section within which the patch is applied, except for\n                  e.g. &#x2018;<code class="Li">LOAD</code>&#x2019; blocks, see\n                  &#x201C;RAM code&#x201D; in\n                  <a class="Xr" href="./rgbasm.5">rgbasm(5)</a>.)</dd>\n              <dt id="LONG~22"><a class="permalink" href="#LONG~22"><code class="Cm">LONG</code></a>\n                <var class="Ar">PCOffset</var></dt>\n              <dd>Offset of the PC symbol within the section designated by\n                  <var class="Ar">PCSectionID</var>. It is expected that PC\n                  points to the instruction\'s first byte for instruction\n                  operands (i.e. &#x2018;<code class="Li">jp @</code>&#x2019;\n                  must be an infinite loop), and to the patch\'s first byte\n                  otherwise (&#x2018;<code class="Li">db</code>&#x2019;,\n                  &#x2018;<code class="Li">dw</code>&#x2019;,\n                  &#x2018;<code class="Li">dl</code>&#x2019;).</dd>\n              <dt id="BYTE~7"><a class="permalink" href="#BYTE~7"><code class="Cm">BYTE</code></a>\n                <var class="Ar">Type</var></dt>\n              <dd>\n                <table class="Bl-column Bl-compact">\n                  <tr id="Value~4">\n                    <td><a class="permalink" href="#Value~4"><b class="Sy">Value</b></a></td>\n                    <td><a class="permalink" href="#Meaning~4"><b class="Sy" id="Meaning~4">Meaning</b></a></td>\n                  </tr>\n                  <tr>\n                    <td>0</td>\n                    <td>Single-byte patch</td>\n                  </tr>\n                  <tr>\n                    <td>1</td>\n                    <td>Little-endian two-byte patch</td>\n                  </tr>\n                  <tr>\n                    <td>2</td>\n                    <td>Little-endian four-byte patch</td>\n                  </tr>\n                  <tr>\n                    <td>3</td>\n                    <td>Single-byte &#x2018;<code class="Li">jr</code>&#x2019;\n                      patch; the patch\'s value will be subtracted to PC + 2\n                      (i.e. &#x2018;<code class="Li">jr @</code>&#x2019; must be\n                      the infinite loop &#x2018;<code class="Li">18\n                      FE</code>&#x2019;).</td>\n                  </tr>\n                </table>\n              </dd>\n              <dt id="LONG~23"><a class="permalink" href="#LONG~23"><code class="Cm">LONG</code></a>\n                <var class="Ar">RPNSize</var></dt>\n              <dd>Size of the <var class="Ar">RPNExpr</var> below.</dd>\n              <dt id="BYTE~8"><a class="permalink" href="#BYTE~8"><code class="Cm">BYTE</code></a>\n                <var class="Ar">RPNExpr</var>[RPNSize]</dt>\n              <dd>The patch\'s value, encoded as a RPN expression (see\n                  <a class="Sx" href="#RPN_EXPRESSIONS">RPN\n                EXPRESSIONS</a>).</dd>\n            </dl>\n          </dd>\n          <dt id="ENDR~3"><a class="permalink" href="#ENDR~3"><code class="Cm">ENDR</code></a></dt>\n          <dd style="width: auto;">&#x00A0;</dd>\n        </dl>\n      </dd>\n      <dt id="ENDC~3"><a class="permalink" href="#ENDC~3"><code class="Cm">ENDC</code></a></dt>\n      <dd style="width: auto;">&#x00A0;</dd>\n    </dl>\n  </dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="Assertions"><a class="permalink" href="#Assertions">Assertions</a></h3>\n<dl class="Bl-tag Bl-compact">\n  <dt id="LONG~24"><a class="permalink" href="#LONG~24"><code class="Cm">LONG</code></a>\n    <var class="Ar">NumberOfAssertions</var></dt>\n  <dd>How many assertions this object file contains.</dd>\n  <dt id="REPT~5"><a class="permalink" href="#REPT~5"><code class="Cm">REPT</code></a>\n    <var class="Ar">NumberOfAssertions</var></dt>\n  <dd>Assertions are essentially patches with a message.\n    <p class="Pp"></p>\n    <dl class="Bl-tag Bl-compact">\n      <dt id="LONG~25"><a class="permalink" href="#LONG~25"><code class="Cm">LONG</code></a>\n        <var class="Ar">NodeID</var></dt>\n      <dd>Context in which the assertions was defined.</dd>\n      <dt id="LONG~26"><a class="permalink" href="#LONG~26"><code class="Cm">LONG</code></a>\n        <var class="Ar">LineNo</var></dt>\n      <dd>Line number in the context at which the assertion was defined.</dd>\n      <dt id="LONG~27"><a class="permalink" href="#LONG~27"><code class="Cm">LONG</code></a>\n        <var class="Ar">Offset</var></dt>\n      <dd>Unused leftover from the patch structure.</dd>\n      <dt id="LONG~28"><a class="permalink" href="#LONG~28"><code class="Cm">LONG</code></a>\n        <var class="Ar">PCSectionID</var></dt>\n      <dd>ID of the section in which PC is located.</dd>\n      <dt id="LONG~29"><a class="permalink" href="#LONG~29"><code class="Cm">LONG</code></a>\n        <var class="Ar">PCOffset</var></dt>\n      <dd>Offset of the PC symbol within the section designated by\n          <var class="Ar">PCSectionID</var>.</dd>\n      <dt id="BYTE~9"><a class="permalink" href="#BYTE~9"><code class="Cm">BYTE</code></a>\n        <var class="Ar">Type</var></dt>\n      <dd>Describes what should happen if the expression evaluates to a non-zero\n          value.\n        <table class="Bl-column Bl-compact">\n          <tr id="Value~5">\n            <td><a class="permalink" href="#Value~5"><b class="Sy">Value</b></a></td>\n            <td><a class="permalink" href="#Meaning~5"><b class="Sy" id="Meaning~5">Meaning</b></a></td>\n          </tr>\n          <tr>\n            <td>0</td>\n            <td>Print a warning message, and continue linking normally.</td>\n          </tr>\n          <tr>\n            <td>1</td>\n            <td>Print an error message, so linking will fail, but allow other\n              assertions to be evaluated.</td>\n          </tr>\n          <tr>\n            <td>2</td>\n            <td>Print a fatal error message, and abort immediately.</td>\n          </tr>\n        </table>\n      </dd>\n      <dt id="LONG~30"><a class="permalink" href="#LONG~30"><code class="Cm">LONG</code></a>\n        <var class="Ar">RPNSize</var></dt>\n      <dd>Size of the <var class="Ar">RPNExpr</var> below.</dd>\n      <dt id="BYTE~10"><a class="permalink" href="#BYTE~10"><code class="Cm">BYTE</code></a>\n        <var class="Ar">RPNExpr</var>[RPNSize]</dt>\n      <dd>The patch\'s value, encoded as a RPN expression (see\n          <a class="Sx" href="#RPN_EXPRESSIONS">RPN EXPRESSIONS</a>).</dd>\n      <dt id="STRING~4"><a class="permalink" href="#STRING~4"><code class="Cm">STRING</code></a>\n        <var class="Ar">Message</var></dt>\n      <dd>The message displayed if the expression evaluates to a non-zero value.\n          If empty, a generic message is displayed instead.</dd>\n    </dl>\n  </dd>\n  <dt id="ENDR~4"><a class="permalink" href="#ENDR~4"><code class="Cm">ENDR</code></a></dt>\n  <dd style="width: auto;">&#x00A0;</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="RPN_EXPRESSIONS"><a class="permalink" href="#RPN_EXPRESSIONS">RPN\n  EXPRESSIONS</a></h3>\n<p class="Pp">Expressions in the object file are stored as RPN, or\n    &#x201C;Reverse Polish Notation&#x201D;, which is a notation that allows\n    computing arbitrary expressions with just a simple stack. For example, the\n    expression &#x2018;<code class="Li">2 5 -</code>&#x2019; will first push the\n    value &#x201C;2&#x201D; to the stack, then &#x201C;5&#x201D;. The\n    &#x2018;<code class="Li">-</code>&#x2019; operator pops two arguments from\n    the stack, subtracts them, and then pushes back the result\n    (&#x201C;3&#x201D;) on the stack. A well-formed RPN expression never tries\n    to pop from an empty stack, and leaves exactly one value in it at the\n  end.</p>\n<p class="Pp">RGBDS encodes RPN expressions as an array of\n    <code class="Cm">BYTE</code>s. The first byte encodes either an operator, or\n    a literal, which consumes more <code class="Cm">BYTE</code>s after it.</p>\n<table class="Bl-column Bd-indent">\n  <tr id="Value~6">\n    <td><a class="permalink" href="#Value~6"><b class="Sy">Value</b></a></td>\n    <td><a class="permalink" href="#Meaning~6"><b class="Sy" id="Meaning~6">Meaning</b></a></td>\n  </tr>\n  <tr id="$00">\n    <td><a class="permalink" href="#$00"><code class="Li">$00</code></a></td>\n    <td>Addition operator (&#x2018;<code class="Li">+</code>&#x2019;)</td>\n  </tr>\n  <tr id="$01">\n    <td><a class="permalink" href="#$01"><code class="Li">$01</code></a></td>\n    <td>Subtraction operator (&#x2018;<code class="Li">-</code>&#x2019;)</td>\n  </tr>\n  <tr id="$02">\n    <td><a class="permalink" href="#$02"><code class="Li">$02</code></a></td>\n    <td>Multiplication operator (&#x2018;<code class="Li">*</code>&#x2019;)</td>\n  </tr>\n  <tr id="$03">\n    <td><a class="permalink" href="#$03"><code class="Li">$03</code></a></td>\n    <td>Division operator (&#x2018;<code class="Li">/</code>&#x2019;)</td>\n  </tr>\n  <tr id="$04">\n    <td><a class="permalink" href="#$04"><code class="Li">$04</code></a></td>\n    <td>Modulo operator (&#x2018;<code class="Li">%</code>&#x2019;)</td>\n  </tr>\n  <tr id="$05">\n    <td><a class="permalink" href="#$05"><code class="Li">$05</code></a></td>\n    <td>Negation (unary &#x2018;<code class="Li">-</code>&#x2019;)</td>\n  </tr>\n  <tr id="$06">\n    <td><a class="permalink" href="#$06"><code class="Li">$06</code></a></td>\n    <td>Exponent operator (&#x2018;<code class="Li">**</code>&#x2019;)</td>\n  </tr>\n  <tr id="$10">\n    <td><a class="permalink" href="#$10"><code class="Li">$10</code></a></td>\n    <td>Bitwise OR operator (&#x2018;<code class="Li">|</code>&#x2019;)</td>\n  </tr>\n  <tr id="$11">\n    <td><a class="permalink" href="#$11"><code class="Li">$11</code></a></td>\n    <td>Bitwise AND operator\n      (&#x2018;<code class="Li">&amp;</code>&#x2019;)</td>\n  </tr>\n  <tr id="$12">\n    <td><a class="permalink" href="#$12"><code class="Li">$12</code></a></td>\n    <td>Bitwise XOR operator (&#x2018;<code class="Li">^</code>&#x2019;)</td>\n  </tr>\n  <tr id="$13">\n    <td><a class="permalink" href="#$13"><code class="Li">$13</code></a></td>\n    <td>Bitwise complement operator (unary\n      &#x2018;<code class="Li">~</code>&#x2019;)</td>\n  </tr>\n  <tr id="$21">\n    <td><a class="permalink" href="#$21"><code class="Li">$21</code></a></td>\n    <td>Logical AND operator\n      (&#x2018;<code class="Li">&amp;&amp;</code>&#x2019;)</td>\n  </tr>\n  <tr id="$22">\n    <td><a class="permalink" href="#$22"><code class="Li">$22</code></a></td>\n    <td>Logical OR operator (&#x2018;<code class="Li">||</code>&#x2019;)</td>\n  </tr>\n  <tr id="$23">\n    <td><a class="permalink" href="#$23"><code class="Li">$23</code></a></td>\n    <td>Logical complement operator (unary\n      &#x2018;<code class="Li">!</code>&#x2019;)</td>\n  </tr>\n  <tr id="$30">\n    <td><a class="permalink" href="#$30"><code class="Li">$30</code></a></td>\n    <td>Equality operator (&#x2018;<code class="Li">==</code>&#x2019;)</td>\n  </tr>\n  <tr id="$31">\n    <td><a class="permalink" href="#$31"><code class="Li">$31</code></a></td>\n    <td>Non-equality operator (&#x2018;<code class="Li">!=</code>&#x2019;)</td>\n  </tr>\n  <tr id="$32">\n    <td><a class="permalink" href="#$32"><code class="Li">$32</code></a></td>\n    <td>Greater-than operator\n      (&#x2018;<code class="Li">&gt;</code>&#x2019;)</td>\n  </tr>\n  <tr id="$33">\n    <td><a class="permalink" href="#$33"><code class="Li">$33</code></a></td>\n    <td>Less-than operator (&#x2018;<code class="Li">&lt;</code>&#x2019;)</td>\n  </tr>\n  <tr id="$34">\n    <td><a class="permalink" href="#$34"><code class="Li">$34</code></a></td>\n    <td>Greater-than-or-equal operator\n      (&#x2018;<code class="Li">&gt;=</code>&#x2019;)</td>\n  </tr>\n  <tr id="$35">\n    <td><a class="permalink" href="#$35"><code class="Li">$35</code></a></td>\n    <td>Less-than-or-equal operator\n      (&#x2018;<code class="Li">&lt;=</code>&#x2019;)</td>\n  </tr>\n  <tr id="$40">\n    <td><a class="permalink" href="#$40"><code class="Li">$40</code></a></td>\n    <td>Left shift operator\n      (&#x2018;<code class="Li">&lt;&lt;</code>&#x2019;)</td>\n  </tr>\n  <tr id="$41">\n    <td><a class="permalink" href="#$41"><code class="Li">$41</code></a></td>\n    <td>Arithmetic/signed right shift operator\n      (&#x2018;<code class="Li">&gt;&gt;</code>&#x2019;)</td>\n  </tr>\n  <tr id="$42">\n    <td><a class="permalink" href="#$42"><code class="Li">$42</code></a></td>\n    <td>Logical/unsigned right shift operator\n      (&#x2018;<code class="Li">&gt;&gt;&gt;</code>&#x2019;)</td>\n  </tr>\n  <tr id="$50">\n    <td><a class="permalink" href="#$50"><code class="Li">$50</code></a></td>\n    <td><a class="permalink" href="#BANK"><code class="Fn" id="BANK">BANK</code></a>(<var class="Fa">symbol</var>),\n      followed by the <var class="Ar">symbol</var>\'s\n      <code class="Cm">LONG</code> ID.</td>\n  </tr>\n  <tr id="$51">\n    <td><a class="permalink" href="#$51"><code class="Li">$51</code></a></td>\n    <td><code class="Fn">BANK</code>(<var class="Fa">section</var>), followed by\n      the <var class="Ar">section</var>\'s <code class="Cm">STRING</code>\n      name.</td>\n  </tr>\n  <tr id="$52">\n    <td><a class="permalink" href="#$52"><code class="Li">$52</code></a></td>\n    <td>PC\'s <code class="Fn">BANK</code>() (i.e.\n      &#x2018;<code class="Li">BANK(@)</code>&#x2019;).</td>\n  </tr>\n  <tr id="$53">\n    <td><a class="permalink" href="#$53"><code class="Li">$53</code></a></td>\n    <td><a class="permalink" href="#SIZEOF"><code class="Fn" id="SIZEOF">SIZEOF</code></a>(<var class="Fa">section</var>),\n      followed by the <var class="Ar">section</var>\'s\n      <code class="Cm">STRING</code> name.</td>\n  </tr>\n  <tr id="$54">\n    <td><a class="permalink" href="#$54"><code class="Li">$54</code></a></td>\n    <td><a class="permalink" href="#STARTOF"><code class="Fn" id="STARTOF">STARTOF</code></a>(<var class="Fa">section</var>),\n      followed by the <var class="Ar">section</var>\'s\n      <code class="Cm">STRING</code> name.</td>\n  </tr>\n  <tr id="$60">\n    <td><a class="permalink" href="#$60"><code class="Li">$60</code></a></td>\n    <td>&#x2018;<code class="Li">ldh</code>&#x2019; check. Checks if the value\n      is a valid &#x2018;<code class="Li">ldh</code>&#x2019; operand (see\n      &#x201C;Load Instructions&#x201D; in\n      <a class="Xr" href="./gbz80.7">gbz80(7)</a>), i.e. that it is between\n      either $00 and $FF, or $FF00 and $FFFF, both inclusive. The value is then\n      ANDed with $00FF (&#x2018;<code class="Li">&amp; $FF</code>&#x2019;).</td>\n  </tr>\n  <tr id="$61">\n    <td><a class="permalink" href="#$61"><code class="Li">$61</code></a></td>\n    <td>&#x2018;<code class="Li">rst</code>&#x2019; check. Checks if the value\n      is a valid &#x2018;<code class="Li">rst</code>&#x2019; (see &#x201C;RST\n      vec&#x201D; in <a class="Xr" href="./gbz80.7">gbz80(7)</a>) vector, that\n      is one of $00, $08, $10, $18, $20, $28, $30, or $38. The value is then\n      ORed with $C7 (&#x2018;<code class="Li">| $C7</code>&#x2019;).</td>\n  </tr>\n  <tr id="$80">\n    <td><a class="permalink" href="#$80"><code class="Li">$80</code></a></td>\n    <td>Integer literal. Followed by the <code class="Cm">LONG</code>\n      integer.</td>\n  </tr>\n  <tr id="$81">\n    <td><a class="permalink" href="#$81"><code class="Li">$81</code></a></td>\n    <td>A symbol\'s value. Followed by the symbol\'s <code class="Cm">LONG</code>\n      ID.</td>\n  </tr>\n</table>\n</section>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="SEE_ALSO"><a class="permalink" href="#SEE_ALSO">SEE\n  ALSO</a></h2>\n<p class="Pp"><a class="Xr" href="./rgbasm.1">rgbasm(1)</a>,\n    <a class="Xr" href="./rgblink.1">rgblink(1)</a>,\n    <a class="Xr" href="./rgbds.7">rgbds(7)</a>,\n    <a class="Xr" href="./gbz80.7">gbz80(7)</a></p>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="HISTORY"><a class="permalink" href="#HISTORY">HISTORY</a></h2>\n<p class="Pp"><code class="Nm">rgbds</code> was originally written by Carsten\n    S&#x00F8;rensen as part of the ASMotor package, and was later packaged in\n    RGBDS by Justin Lloyd. It is now maintained by a number of contributors at\n    <a class="Lk" href="https://github.com/gbdev/rgbds">https://github.com/gbdev/rgbds</a>.</p>\n</section>\n'}}))}p.isMDXComponent=!0}}]);