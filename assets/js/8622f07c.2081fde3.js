"use strict";(self.webpackChunkrgbds_www_2=self.webpackChunkrgbds_www_2||[]).push([[7347],{3905:function(s,a,n){n.d(a,{Zo:function(){return i},kt:function(){return _}});var e=n(7294);function l(s,a,n){return a in s?Object.defineProperty(s,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):s[a]=n,s}function d(s,a){var n=Object.keys(s);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(s);a&&(e=e.filter((function(a){return Object.getOwnPropertyDescriptor(s,a).enumerable}))),n.push.apply(n,e)}return n}function c(s){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?d(Object(n),!0).forEach((function(a){l(s,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(s,Object.getOwnPropertyDescriptors(n)):d(Object(n)).forEach((function(a){Object.defineProperty(s,a,Object.getOwnPropertyDescriptor(n,a))}))}return s}function r(s,a){if(null==s)return{};var n,e,l=function(s,a){if(null==s)return{};var n,e,l={},d=Object.keys(s);for(e=0;e<d.length;e++)n=d[e],a.indexOf(n)>=0||(l[n]=s[n]);return l}(s,a);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(s);for(e=0;e<d.length;e++)n=d[e],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(s,n)&&(l[n]=s[n])}return l}var t=e.createContext({}),p=function(s){var a=e.useContext(t),n=a;return s&&(n="function"==typeof s?s(a):c(c({},a),s)),n},i=function(s){var a=p(s.components);return e.createElement(t.Provider,{value:a},s.children)},L={inlineCode:"code",wrapper:function(s){var a=s.children;return e.createElement(e.Fragment,{},a)}},h=e.forwardRef((function(s,a){var n=s.components,l=s.mdxType,d=s.originalType,t=s.parentName,i=r(s,["components","mdxType","originalType","parentName"]),h=p(n),_=l,S=h["".concat(t,".").concat(_)]||h[_]||L[_]||d;return n?e.createElement(S,c(c({ref:a},i),{},{components:n})):e.createElement(S,c({ref:a},i))}));function _(s,a){var n=arguments,l=a&&a.mdxType;if("string"==typeof s||l){var d=n.length,c=new Array(d);c[0]=h;var r={};for(var t in a)hasOwnProperty.call(a,t)&&(r[t]=a[t]);r.originalType=s,r.mdxType="string"==typeof s?s:l,c[1]=r;for(var p=2;p<d;p++)c[p]=n[p];return e.createElement.apply(null,c)}return e.createElement.apply(null,n)}h.displayName="MDXCreateElement"},6619:function(s,a,n){n.r(a),n.d(a,{assets:function(){return i},contentTitle:function(){return t},default:function(){return _},frontMatter:function(){return r},metadata:function(){return p},toc:function(){return L}});var e=n(3117),l=n(102),d=(n(7294),n(3905)),c=["components"],r={},t="gbz80(7) \u2014 CPU opcode reference",p={unversionedId:"gbz80.7",id:"version-v0.5.0-rcCar/gbz80.7",title:"gbz80(7) \u2014 CPU opcode reference",description:"",source:"@site/versioned_docs/version-v0.5.0-rcCar/gbz80.7.md",sourceDirName:".",slug:"/gbz80.7",permalink:"/docs/v0.5.0-rcCar/gbz80.7",draft:!1,editUrl:"https://github.com/gbdev/rgbds-www/edit/master/versioned_docs/version-v0.5.0-rcCar/gbz80.7.md",tags:[],version:"v0.5.0-rcCar",frontMatter:{},sidebar:"nav",previous:{title:"rgbasm(5) \u2014 language documentation",permalink:"/docs/v0.5.0-rcCar/rgbasm.5"},next:{title:"rgblink(5) \u2014 linker script file format",permalink:"/docs/v0.5.0-rcCar/rgblink.5"}},i={},L=[{value:"DESCRIPTION",id:"DESCRIPTION",level:2,children:[]},{value:"LEGEND",id:"LEGEND",level:2,children:[]},{value:"INSTRUCTION OVERVIEW",id:"INSTRUCTION_OVERVIEW",level:2,children:[{value:"Load Instructions",id:"Load_Instructions",level:3,children:[]}]},{value:"INSTRUCTION REFERENCE",id:"INSTRUCTION_REFERENCE",level:2,children:[{value:"LD A,A+C+r8",id:"LD_A,A+C+r8",level:3,children:[]},{value:"LD A,A+C+[HL]",id:"LD_A,A+C+[HL]",level:3,children:[]},{value:"LD A,A+C+n8",id:"LD_A,A+C+n8",level:3,children:[]},{value:"LD A,A+r8",id:"LD_A,A+r8",level:3,children:[]},{value:"LD A,A+[HL]",id:"LD_A,A+[HL]",level:3,children:[]},{value:"LD A,A+n8",id:"LD_A,A+n8",level:3,children:[]},{value:"LD HL,HL+r16",id:"LD_HL,HL+r16",level:3,children:[]},{value:"LD HL,HL+SP",id:"LD_HL,HL+SP",level:3,children:[]},{value:"LD SP,SP+e8",id:"LD_SP,SP+e8",level:3,children:[]},{value:"LD A,A&r8",id:"LD_A,A&r8",level:3,children:[]},{value:"LD A,A&[HL]",id:"LD_A,A&[HL]",level:3,children:[]},{value:"LD A,A&n8",id:"LD_A,A&n8",level:3,children:[]},{value:"LD F.7,r8.u3",id:"LD_F.7,r8.u3",level:3,children:[]},{value:"LD F.7,[HL].u3",id:"LD_F.7,[HL].u3",level:3,children:[]},{value:"LD [--SP],PC,n16",id:"LD_[--SP],PC,n16",level:3,children:[]},{value:"LD cc [--SP],PC,n16",id:"LD_cc_[--SP],PC,n16",level:3,children:[]},{value:"LD F.4,!F.4",id:"LD_F.4,!F.4",level:3,children:[]},{value:"LD F.7,A-r8",id:"LD_F.7,A-r8",level:3,children:[]},{value:"LD F.7,A-[HL]",id:"LD_F.7,A-[HL]",level:3,children:[]},{value:"LD F.7,A-n8",id:"LD_F.7,A-n8",level:3,children:[]},{value:"LD A,~A",id:"LD_A,~A",level:3,children:[]},{value:"LD A,A?",id:"LD_A,A?",level:3,children:[]},{value:"LD r8-",id:"LD_r8-",level:3,children:[]},{value:"LD [HL]-",id:"LD_[HL]-",level:3,children:[]},{value:"LD r16-",id:"LD_r16-",level:3,children:[]},{value:"LD SP-",id:"LD_SP-",level:3,children:[]},{value:"LD IME,0",id:"LD_IME,0",level:3,children:[]},{value:"LD IME,1",id:"LD_IME,1",level:3,children:[]},{value:"LD [HL],[HL]",id:"LD_[HL],[HL]",level:3,children:[]},{value:"LD r8+",id:"LD_r8+",level:3,children:[]},{value:"LD [HL]+",id:"LD_[HL]+",level:3,children:[]},{value:"LD r16+",id:"LD_r16+",level:3,children:[]},{value:"LD SP+",id:"LD_SP+",level:3,children:[]},{value:"LD PC,n16",id:"LD_PC,n16",level:3,children:[]},{value:"LD cc PC,n16",id:"LD_cc_PC,n16",level:3,children:[]},{value:"LD PC,HL",id:"LD_PC,HL",level:3,children:[]},{value:"LD PC,B e8",id:"LD_PC,B_e8",level:3,children:[]},{value:"LD cc PC,B e8",id:"LD_cc_PC,B_e8",level:3,children:[]},{value:"LD r8,r8",id:"LD_r8,r8",level:3,children:[]},{value:"LD r8,n8",id:"LD_r8,n8",level:3,children:[]},{value:"LD r16,n16",id:"LD_r16,n16",level:3,children:[]},{value:"LD [HL],r8",id:"LD_[HL],r8",level:3,children:[]},{value:"LD [HL],n8",id:"LD_[HL],n8",level:3,children:[]},{value:"LD r8,[HL]",id:"LD_r8,[HL]",level:3,children:[]},{value:"LD [r16],A",id:"LD_[r16],A",level:3,children:[]},{value:"LD [n16],A",id:"LD_[n16],A",level:3,children:[]},{value:"LD [H n16],A",id:"LD_[H_n16],A",level:3,children:[]},{value:"LD [H C],A",id:"LD_[H_C],A",level:3,children:[]},{value:"LD A,[r16]",id:"LD_A,[r16]",level:3,children:[]},{value:"LD A,[n16]",id:"LD_A,[n16]",level:3,children:[]},{value:"LD A,[H n16]",id:"LD_A,[H_n16]",level:3,children:[]},{value:"LD A,[H C]",id:"LD_A,[H_C]",level:3,children:[]},{value:"LD [HLI],A",id:"LD_[HLI],A",level:3,children:[]},{value:"LD [HLD],A",id:"LD_[HLD],A",level:3,children:[]},{value:"LD A,[HLD]",id:"LD_A,[HLD]",level:3,children:[]},{value:"LD A,[HLI]",id:"LD_A,[HLI]",level:3,children:[]},{value:"LD SP,n16",id:"LD_SP,n16",level:3,children:[]},{value:"LD [n16],SP",id:"LD_[n16],SP",level:3,children:[]},{value:"LD HL,SP+e8",id:"LD_HL,SP+e8",level:3,children:[]},{value:"LD SP,HL",id:"LD_SP,HL",level:3,children:[]},{value:"LD PC,PC",id:"LD_PC,PC",level:3,children:[]},{value:"LD A,A|r8",id:"LD_A,A|r8",level:3,children:[]},{value:"LD A,A|[HL]",id:"LD_A,A|[HL]",level:3,children:[]},{value:"LD A,A|n8",id:"LD_A,A|n8",level:3,children:[]},{value:"LD AF,[SP++]",id:"LD_AF,[SP++]",level:3,children:[]},{value:"LD r16,[SP++]",id:"LD_r16,[SP++]",level:3,children:[]},{value:"LD [--SP],AF",id:"LD_[--SP],AF",level:3,children:[]},{value:"LD [--SP],r16",id:"LD_[--SP],r16",level:3,children:[]},{value:"LD r8.u3,0",id:"LD_r8.u3,0",level:3,children:[]},{value:"LD [HL].u3,0",id:"LD_[HL].u3,0",level:3,children:[]},{value:"LD PC,[SP++]",id:"LD_PC,[SP++]",level:3,children:[]},{value:"LD cc PC,[SP++]",id:"LD_cc_PC,[SP++]",level:3,children:[]},{value:"LD PC,[SP++] / LD IME,1",id:"LD_PC,[SP++]_/_LD_IME,1",level:3,children:[]},{value:"LD r8,'r8",id:"LD_r8,'r8",level:3,children:[]},{value:"LD [HL],'[HL]",id:"LD_[HL],'[HL]",level:3,children:[]},{value:"LD 'A",id:"LD_'A",level:3,children:[]},{value:"LD r8,''r8",id:"LD_r8,''r8",level:3,children:[]},{value:"LD [HL],''[HL]",id:"LD_[HL],''[HL]",level:3,children:[]},{value:"LD ''A",id:"LD_''A",level:3,children:[]},{value:"LD r8,r8'",id:"LD_r8,r8'",level:3,children:[]},{value:"LD [HL],[HL]'",id:"LD_[HL],[HL]'",level:3,children:[]},{value:"LD A'",id:"LD_A'",level:3,children:[]},{value:"LD r8,r8''",id:"LD_r8,r8''",level:3,children:[]},{value:"LD [HL],[HL]''",id:"LD_[HL],[HL]''",level:3,children:[]},{value:"LD A''",id:"LD_A''",level:3,children:[]},{value:"LD [--SP],PC,B vec",id:"LD_[--SP],PC,B_vec",level:3,children:[]},{value:"LD A,A-C-r8",id:"LD_A,A-C-r8",level:3,children:[]},{value:"LD A,A-C-[HL]",id:"LD_A,A-C-[HL]",level:3,children:[]},{value:"LD A,A-C-n8",id:"LD_A,A-C-n8",level:3,children:[]},{value:"LD F.4,1",id:"LD_F.4,1",level:3,children:[]},{value:"LD r8.u3,1",id:"LD_r8.u3,1",level:3,children:[]},{value:"LD [HL].u3,1",id:"LD_[HL].u3,1",level:3,children:[]},{value:"LD r8,<<r8",id:"LD_r8,<<r8",level:3,children:[]},{value:"LD [HL],<<[HL]",id:"LD_[HL],<<[HL]",level:3,children:[]},{value:"LD r8,>>r8",id:"LD_r8,>>r8",level:3,children:[]},{value:"LD [HL],>>[HL]",id:"LD_[HL],>>[HL]",level:3,children:[]},{value:"LD r8,>>>r8",id:"LD_r8,>>>r8",level:3,children:[]},{value:"LD [HL],>>>[HL]",id:"LD_[HL],>>>[HL]",level:3,children:[]},{value:"LD,0",id:"LD,0",level:3,children:[]},{value:"LD A,A-r8",id:"LD_A,A-r8",level:3,children:[]},{value:"LD A,A-[HL]",id:"LD_A,A-[HL]",level:3,children:[]},{value:"LD A,A-n8",id:"LD_A,A-n8",level:3,children:[]},{value:"LD r8,''r8''",id:"LD_r8,''r8''",level:3,children:[]},{value:"LD [HL],''[HL]''",id:"LD_[HL],''[HL]''",level:3,children:[]},{value:"LD A,A^r8",id:"LD_A,A^r8",level:3,children:[]},{value:"LD A,A^[HL]",id:"LD_A,A^[HL]",level:3,children:[]},{value:"LD A,A^n8",id:"LD_A,A^n8",level:3,children:[]}]},{value:"SEE ALSO",id:"SEE_ALSO",level:2,children:[]},{value:"HISTORY",id:"HISTORY",level:2,children:[]}],h={toc:L};function _(s){var a=s.components,n=(0,l.Z)(s,c);return(0,d.kt)("wrapper",(0,e.Z)({},h,n,{components:a,mdxType:"MDXLayout"}),(0,d.kt)("h1",{id:"gbz807--cpu-opcode-reference"},"gbz80(7) \u2014 CPU opcode reference"),(0,d.kt)("div",{className:"manual-text",dangerouslySetInnerHTML:{__html:'<section class="Sh">\n<h2 class="Sh" id="DESCRIPTION"><a class="permalink" href="#DESCRIPTION">DESCRIPTION</a></h2>\n<p class="Pp">This is the list of opcodes supported by\n    <a class="Xr" href="./rgbasm.1">rgbasm(1)</a>, including a short\n    description, the number of bytes needed to encode them and the number of CPU\n    cycles at 1MHz (or 2MHz in GBC dual speed mode) needed to complete them.</p>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="LEGEND"><a class="permalink" href="#LEGEND">LEGEND</a></h2>\n<p class="Pp">List of abbreviations used in this document.</p>\n<dl class="Bl-tag">\n  <dt id="B"><var class="Ar">r8</var></dt>\n  <dd>Any of the 8-bit registers (<b class="Sy">A</b>,\n      <a class="permalink" href="#B"><b class="Sy">B</b></a>,\n      <b class="Sy">C</b>,\n      <a class="permalink" href="#D"><b class="Sy" id="D">D</b></a>,\n      <a class="permalink" href="#E"><b class="Sy" id="E">E</b></a>,\n      <b class="Sy">H</b>,\n      <a class="permalink" href="#L"><b class="Sy" id="L">L</b></a>).</dd>\n  <dt id="BC"><var class="Ar">r16</var></dt>\n  <dd>Any of the general-purpose 16-bit registers\n      (<a class="permalink" href="#BC"><b class="Sy">BC</b></a>,\n      <a class="permalink" href="#DE"><b class="Sy" id="DE">DE</b></a>,\n      <b class="Sy">HL</b>).</dd>\n  <dt><var class="Ar">n8</var></dt>\n  <dd>8-bit integer constant.</dd>\n  <dt><var class="Ar">n16</var></dt>\n  <dd>16-bit integer constant.</dd>\n  <dt id="128"><var class="Ar">e8</var></dt>\n  <dd>8-bit offset (<a class="permalink" href="#128"><b class="Sy">-128</b></a>\n      to\n    <a class="permalink" href="#127"><b class="Sy" id="127">127</b></a>).</dd>\n  <dt id="0"><var class="Ar">u3</var></dt>\n  <dd>3-bit unsigned integer constant\n      (<a class="permalink" href="#0"><b class="Sy">0</b></a> to\n      <a class="permalink" href="#7"><b class="Sy" id="7">7</b></a>).</dd>\n  <dt><var class="Ar">cc</var></dt>\n  <dd>Condition codes:\n    <dl class="Bl-tag Bl-compact">\n      <dt id="Z"><a class="permalink" href="#Z"><b class="Sy">Z</b></a></dt>\n      <dd>Execute if Z is set.</dd>\n      <dt id="NZ"><a class="permalink" href="#NZ"><b class="Sy">NZ</b></a></dt>\n      <dd>Execute if Z is not set.</dd>\n      <dt id="C"><a class="permalink" href="#C"><b class="Sy">C</b></a></dt>\n      <dd>Execute if C is set.</dd>\n      <dt id="NC"><a class="permalink" href="#NC"><b class="Sy">NC</b></a></dt>\n      <dd>Execute if C is not set.</dd>\n    </dl>\n  </dd>\n  <dt id="RST"><var class="Ar">vec</var></dt>\n  <dd>One of the <a class="permalink" href="#RST"><b class="Sy">RST</b></a>\n      vectors\n      (<a class="permalink" href="#0x00"><b class="Sy" id="0x00">0x00</b></a>,\n      <a class="permalink" href="#0x08"><b class="Sy" id="0x08">0x08</b></a>,\n      <a class="permalink" href="#0x10"><b class="Sy" id="0x10">0x10</b></a>,\n      <a class="permalink" href="#0x18"><b class="Sy" id="0x18">0x18</b></a>,\n      <a class="permalink" href="#0x20"><b class="Sy" id="0x20">0x20</b></a>,\n      <a class="permalink" href="#0x28"><b class="Sy" id="0x28">0x28</b></a>,\n      <a class="permalink" href="#0x30"><b class="Sy" id="0x30">0x30</b></a> and\n      <a class="permalink" href="#0x38"><b class="Sy" id="0x38">0x38</b></a>).</dd>\n</dl>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="INSTRUCTION_OVERVIEW"><a class="permalink" href="#INSTRUCTION_OVERVIEW">INSTRUCTION\n  OVERVIEW</a></h2>\n<section class="Ss">\n<h3 class="Ss" id="Load_Instructions"><a class="permalink" href="#Load_Instructions">Load\n  Instructions</a></h3>\n<dl class="Bl-inset Bl-compact">\n  <dt><a class="Sx" href="#LD_A,A+C+r8">LD A,A+C+r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_A,A+C+_HL_">LD A,A+C+[HL]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_A,A+C+n8">LD A,A+C+n8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_A,A+r8">LD A,A+r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_A,A+_HL_">LD A,A+[HL]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_A,A+n8">LD A,A+n8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_A,A&amp;r8">LD A,A&amp;r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_A,A&amp;_HL_">LD A,A&amp;[HL]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_A,A&amp;n8">LD A,A&amp;n8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_F.7,A_r8">LD F.7,A-r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_F.7,A-_HL_">LD F.7,A-[HL]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_F.7,A_n8">LD F.7,A-n8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_r8-">LD r8-</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD__HL_-">LD [HL]-</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_r8+">LD r8+</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD__HL_+">LD [HL]+</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_A,A_r8">LD A,A|r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_A,A__HL_">LD A,A|[HL]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_A,A_n8">LD A,A|n8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_A,A_C_r8">LD A,A-C-r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_A,A_C-_HL_">LD A,A-C-[HL]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_A,A_C_n8">LD A,A-C-n8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_A,A_r8">LD A,A-r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_A,A-_HL_">LD A,A-[HL]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_A,A_n8">LD A,A-n8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_A,A_r8">LD A,A^r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_A,A__HL_">LD A,A^[HL]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_A,A_n8">LD A,A^n8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_HL,HL+r16">LD HL,HL+r16</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_r16-">LD r16-</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_r16+">LD r16+</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_F.7,r8.u3">LD F.7,r8.u3</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_F.7,_HL_.u3">LD F.7,[HL].u3</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_r8.u3,0">LD r8.u3,0</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD__HL_.u3,0">LD [HL].u3,0</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_r8.u3,1">LD r8.u3,1</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD__HL_.u3,1">LD [HL].u3,1</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_r8,\'\'r8\'\'">LD r8,\'\'r8\'\'</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD__HL_,\'\'_HL_\'\'">LD [HL],\'\'[HL]\'\'</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_r8,\'r8">LD r8,\'r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD__HL_,\'_HL_">LD [HL],\'[HL]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_\'A">LD \'A</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_r8,\'\'r8">LD r8,\'\'r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD__HL_,\'\'_HL_">LD [HL],\'\'[HL]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_\'\'A">LD \'\'A</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_r8,r8\'">LD r8,r8\'</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD__HL_,_HL_\'">LD [HL],[HL]\'</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_A\'">LD A\'</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_r8,r8\'\'">LD r8,r8\'\'</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD__HL_,_HL_\'\'">LD [HL],[HL]\'\'</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_A\'\'">LD A\'\'</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_r8,__r8">LD r8,&lt;&lt;r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD__HL_,___HL_">LD [HL],&lt;&lt;[HL]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_r8,__r8">LD r8,&gt;&gt;r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD__HL_,___HL_">LD [HL],&gt;&gt;[HL]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_r8,___r8">LD r8,&gt;&gt;&gt;r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD__HL_,____HL_">LD [HL],&gt;&gt;&gt;[HL]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_r8,r8">LD r8,r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_r8,n8">LD r8,n8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_r16,n16">LD r16,n16</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD__HL_,r8">LD [HL],r8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD__HL_,n8">LD [HL],n8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_r8,_HL_">LD r8,[HL]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD__r16_,A">LD [r16],A</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD__n16_,A">LD [n16],A</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD__H_n16_,A">LD [H n16],A</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD__H_C_,A">LD [H C],A</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_A,_r16_">LD A,[r16]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_A,_n16_">LD A,[n16]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_A,_H_n16_">LD A,[H n16]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_A,_H_C_">LD A,[H C]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD__HLI_,A">LD [HLI],A</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD__HLD_,A">LD [HLD],A</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_A,_HLI_">LD A,[HLI]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_A,_HLD_">LD A,[HLD]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD__--SP_,PC,n16">LD [--SP],PC,n16</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_cc__--SP_,PC,n16">LD cc [--SP],PC,n16</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_PC,HL">LD PC,HL</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_PC,n16">LD PC,n16</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_cc_PC,n16">LD cc PC,n16</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_PC,B_e8">LD PC,B e8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_cc_PC,B_e8">LD cc PC,B e8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_cc_PC,_SP++_">LD cc PC,[SP++]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_PC,_SP++_">LD PC,[SP++]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_PC,_SP++__/_LD_IME,1">LD PC,[SP++] / LD\n    IME,1</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD__--SP_,PC,B_vec">LD [--SP],PC,B vec</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_HL,HL+SP">LD HL,HL+SP</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_SP,SP+e8">LD SP,SP+e8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_SP-">LD SP-</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_SP+">LD SP+</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_SP,n16">LD SP,n16</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD__n16_,SP">LD [n16],SP</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_HL,SP+e8">LD HL,SP+e8</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_SP,HL">LD SP,HL</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_AF,_SP++_">LD AF,[SP++]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_r16,_SP++_">LD r16,[SP++]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD__--SP_,AF">LD [--SP],AF</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD__--SP_,r16">LD [--SP],r16</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_F.4,!F.4">LD F.4,!F.4</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_A,_A">LD A,~A</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_A,A?">LD A,A?</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_IME,0">LD IME,0</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_IME,1">LD IME,1</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD__HL_,_HL_">LD [HL],[HL]</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_PC,PC">LD PC,PC</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD_F.4,1">LD F.4,1</a></dt>\n  <dd></dd>\n  <dt><a class="Sx" href="#LD,0">LD,0</a></dt>\n  <dd></dd>\n</dl>\n</section>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="INSTRUCTION_REFERENCE"><a class="permalink" href="#INSTRUCTION_REFERENCE">INSTRUCTION\n  REFERENCE</a></h2>\n<section class="Ss">\n<h3 class="Ss" id="LD_A,A+C+r8"><a class="permalink" href="#LD_A,A+C+r8">LD\n  A,A+C+r8</a></h3>\n<p class="Pp">Add the value in <var class="Ar">r8</var> plus the carry flag to\n    <b class="Sy">A</b>.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~2"><a class="permalink" href="#Z~2"><b class="Sy">Z</b></a></dt>\n  <dd>Set if result is 0.</dd>\n  <dt id="N"><a class="permalink" href="#N"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H"><a class="permalink" href="#H"><b class="Sy">H</b></a></dt>\n  <dd>Set if overflow from bit 3.</dd>\n  <dt id="C~2"><a class="permalink" href="#C~2"><b class="Sy">C</b></a></dt>\n  <dd>Set if overflow from bit 7.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_A,A+C+_HL_"><a class="permalink" href="#LD_A,A+C+_HL_">LD\n  A,A+C+[HL]</a></h3>\n<p class="Pp">Add the byte pointed to by <b class="Sy">HL</b> plus the carry\n    flag to <b class="Sy">A</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: See <a class="Sx" href="#LD_A,A+C+r8">LD A,A+C+r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_A,A+C+n8"><a class="permalink" href="#LD_A,A+C+n8">LD\n  A,A+C+n8</a></h3>\n<p class="Pp">Add the value <var class="Ar">n8</var> plus the carry flag to\n    <b class="Sy">A</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See <a class="Sx" href="#LD_A,A+C+r8">LD A,A+C+r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_A,A+r8"><a class="permalink" href="#LD_A,A+r8">LD\n  A,A+r8</a></h3>\n<p class="Pp">Add the value in <var class="Ar">r8</var> to\n  <b class="Sy">A</b>.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~3"><a class="permalink" href="#Z~3"><b class="Sy">Z</b></a></dt>\n  <dd>Set if result is 0.</dd>\n  <dt id="N~2"><a class="permalink" href="#N~2"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~2"><a class="permalink" href="#H~2"><b class="Sy">H</b></a></dt>\n  <dd>Set if overflow from bit 3.</dd>\n  <dt id="C~3"><a class="permalink" href="#C~3"><b class="Sy">C</b></a></dt>\n  <dd>Set if overflow from bit 7.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_A,A+_HL_"><a class="permalink" href="#LD_A,A+_HL_">LD\n  A,A+[HL]</a></h3>\n<p class="Pp">Add the byte pointed to by <b class="Sy">HL</b> to\n    <b class="Sy">A</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: See <a class="Sx" href="#LD_A,A+r8">LD A,A+r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_A,A+n8"><a class="permalink" href="#LD_A,A+n8">LD\n  A,A+n8</a></h3>\n<p class="Pp">Add the value <var class="Ar">n8</var> to <b class="Sy">A</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See <a class="Sx" href="#LD_A,A+r8">LD A,A+r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_HL,HL+r16"><a class="permalink" href="#LD_HL,HL+r16">LD\n  HL,HL+r16</a></h3>\n<p class="Pp">Add the value in <var class="Ar">r16</var> to\n    <b class="Sy">HL</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="N~3"><a class="permalink" href="#N~3"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~3"><a class="permalink" href="#H~3"><b class="Sy">H</b></a></dt>\n  <dd>Set if overflow from bit 11.</dd>\n  <dt id="C~4"><a class="permalink" href="#C~4"><b class="Sy">C</b></a></dt>\n  <dd>Set if overflow from bit 15.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_HL,HL+SP"><a class="permalink" href="#LD_HL,HL+SP">LD\n  HL,HL+SP</a></h3>\n<p class="Pp">Add the value in <b class="Sy">SP</b> to <b class="Sy">HL</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: See <a class="Sx" href="#LD_HL,HL+r16">LD HL,HL+r16</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_SP,SP+e8"><a class="permalink" href="#LD_SP,SP+e8">LD\n  SP,SP+e8</a></h3>\n<p class="Pp">Add the signed value <var class="Ar">e8</var> to\n    <b class="Sy">SP</b>.</p>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~4"><a class="permalink" href="#Z~4"><b class="Sy">Z</b></a></dt>\n  <dd>0</dd>\n  <dt id="N~4"><a class="permalink" href="#N~4"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~4"><a class="permalink" href="#H~4"><b class="Sy">H</b></a></dt>\n  <dd>Set if overflow from bit 3.</dd>\n  <dt id="C~5"><a class="permalink" href="#C~5"><b class="Sy">C</b></a></dt>\n  <dd>Set if overflow from bit 7.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_A,A&amp;r8"><a class="permalink" href="#LD_A,A&amp;r8">LD\n  A,A&amp;r8</a></h3>\n<p class="Pp">Bitwise AND between the value in <var class="Ar">r8</var> and\n    <b class="Sy">A</b>.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~5"><a class="permalink" href="#Z~5"><b class="Sy">Z</b></a></dt>\n  <dd>Set if result is 0.</dd>\n  <dt id="N~5"><a class="permalink" href="#N~5"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~5"><a class="permalink" href="#H~5"><b class="Sy">H</b></a></dt>\n  <dd>1</dd>\n  <dt id="C~6"><a class="permalink" href="#C~6"><b class="Sy">C</b></a></dt>\n  <dd>0</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_A,A&amp;_HL_"><a class="permalink" href="#LD_A,A&amp;_HL_">LD\n  A,A&amp;[HL]</a></h3>\n<p class="Pp">Bitwise AND between the byte pointed to by <b class="Sy">HL</b>\n    and <b class="Sy">A</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: See <a class="Sx" href="#LD_A,A&amp;r8">LD\n  A,A&amp;r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_A,A&amp;n8"><a class="permalink" href="#LD_A,A&amp;n8">LD\n  A,A&amp;n8</a></h3>\n<p class="Pp">Bitwise AND between the value in <var class="Ar">n8</var> and\n    <b class="Sy">A</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See <a class="Sx" href="#LD_A,A&amp;r8">LD\n  A,A&amp;r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_F.7,r8.u3"><a class="permalink" href="#LD_F.7,r8.u3">LD\n  F.7,r8.u3</a></h3>\n<p class="Pp">Test bit <var class="Ar">u3</var> in register\n    <var class="Ar">r8</var>, set the zero flag if bit not set.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~6"><a class="permalink" href="#Z~6"><b class="Sy">Z</b></a></dt>\n  <dd>Set if the selected bit is 0.</dd>\n  <dt id="N~6"><a class="permalink" href="#N~6"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~6"><a class="permalink" href="#H~6"><b class="Sy">H</b></a></dt>\n  <dd>1</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_F.7,_HL_.u3"><a class="permalink" href="#LD_F.7,_HL_.u3">LD\n  F.7,[HL].u3</a></h3>\n<p class="Pp">Test bit <var class="Ar">u3</var> in the byte pointed by\n    <b class="Sy">HL</b>, set the zero flag if bit not set.</p>\n<p class="Pp">Cycles: 3</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See <a class="Sx" href="#LD_F.7,r8.u3">LD F.7,r8.u3</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD__--SP_,PC,n16"><a class="permalink" href="#LD__--SP_,PC,n16">LD\n  [--SP],PC,n16</a></h3>\n<p class="Pp">Call address <var class="Ar">n16</var>. This pushes the address of\n    the instruction after the <b class="Sy">LD</b> on the stack, such that\n    <a class="Sx" href="#LD">LD</a> can pop it later; then, it executes an\n    implicit <a class="Sx" href="#LD_PC,n16">LD PC,n16</a>.</p>\n<p class="Pp">Cycles: 6</p>\n<p class="Pp">Bytes: 3</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_cc__--SP_,PC,n16"><a class="permalink" href="#LD_cc__--SP_,PC,n16">LD\n  cc [--SP],PC,n16</a></h3>\n<p class="Pp">Call address <var class="Ar">n16</var> if condition\n    <var class="Ar">cc</var> is met.</p>\n<p class="Pp">Cycles: 6 taken / 3 untaken</p>\n<p class="Pp">Bytes: 3</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_F.4,!F.4"><a class="permalink" href="#LD_F.4,!F.4">LD\n  F.4,!F.4</a></h3>\n<p class="Pp">Complement Carry Flag.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="N~7"><a class="permalink" href="#N~7"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~7"><a class="permalink" href="#H~7"><b class="Sy">H</b></a></dt>\n  <dd>0</dd>\n  <dt id="C~7"><a class="permalink" href="#C~7"><b class="Sy">C</b></a></dt>\n  <dd>Inverted.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_F.7,A-r8"><a class="permalink" href="#LD_F.7,A-r8">LD\n  F.7,A-r8</a></h3>\n<p class="Pp">Subtract the value in <var class="Ar">r8</var> from\n    <b class="Sy">A</b> and set flags accordingly, but don\'t store the result.\n    This is useful for ComParing values.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~7"><a class="permalink" href="#Z~7"><b class="Sy">Z</b></a></dt>\n  <dd>Set if result is 0.</dd>\n  <dt id="N~8"><a class="permalink" href="#N~8"><b class="Sy">N</b></a></dt>\n  <dd>1</dd>\n  <dt id="H~8"><a class="permalink" href="#H~8"><b class="Sy">H</b></a></dt>\n  <dd>Set if borrow from bit 4.</dd>\n  <dt id="C~8"><a class="permalink" href="#C~8"><b class="Sy">C</b></a></dt>\n  <dd>Set if borrow (i.e. if <var class="Ar">r8</var> &gt;\n    <b class="Sy">A</b>).</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_F.7,A-_HL_"><a class="permalink" href="#LD_F.7,A-_HL_">LD\n  F.7,A-[HL]</a></h3>\n<p class="Pp">Subtract the byte pointed to by <b class="Sy">HL</b> from\n    <b class="Sy">A</b> and set flags accordingly, but don\'t store the\n  result.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: See <a class="Sx" href="#LD_F.7,A_r8">LD F.7,A-r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_F.7,A-n8"><a class="permalink" href="#LD_F.7,A-n8">LD\n  F.7,A-n8</a></h3>\n<p class="Pp">Subtract the value <var class="Ar">n8</var> from\n    <b class="Sy">A</b> and set flags accordingly, but don\'t store the\n  result.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See <a class="Sx" href="#LD_F.7,A_r8">LD F.7,A-r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_A,_A"><a class="permalink" href="#LD_A,_A">LD\n  A,~A</a></h3>\n<p class="Pp">ComPLement accumulator (<b class="Sy">A</b> =\n    <a class="permalink" href="#_A"><b class="Sy" id="_A">~A</b></a>).</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="N~9"><a class="permalink" href="#N~9"><b class="Sy">N</b></a></dt>\n  <dd>1</dd>\n  <dt id="H~9"><a class="permalink" href="#H~9"><b class="Sy">H</b></a></dt>\n  <dd>1</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_A,A?"><a class="permalink" href="#LD_A,A?">LD\n  A,A?</a></h3>\n<p class="Pp">Decimal Adjust Accumulator to get a correct BCD representation\n    after an arithmetic instruction.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~8"><a class="permalink" href="#Z~8"><b class="Sy">Z</b></a></dt>\n  <dd>Set if result is 0.</dd>\n  <dt id="H~10"><a class="permalink" href="#H~10"><b class="Sy">H</b></a></dt>\n  <dd>0</dd>\n  <dt id="C~9"><a class="permalink" href="#C~9"><b class="Sy">C</b></a></dt>\n  <dd>Set or reset depending on the operation.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_r8-"><a class="permalink" href="#LD_r8-">LD r8-</a></h3>\n<p class="Pp">Decrement value in register <var class="Ar">r8</var> by 1.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~9"><a class="permalink" href="#Z~9"><b class="Sy">Z</b></a></dt>\n  <dd>Set if result is 0.</dd>\n  <dt id="N~10"><a class="permalink" href="#N~10"><b class="Sy">N</b></a></dt>\n  <dd>1</dd>\n  <dt id="H~11"><a class="permalink" href="#H~11"><b class="Sy">H</b></a></dt>\n  <dd>Set if borrow from bit 4.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD__HL_-"><a class="permalink" href="#LD__HL_-">LD\n  [HL]-</a></h3>\n<p class="Pp">Decrement the byte pointed to by <b class="Sy">HL</b> by 1.</p>\n<p class="Pp">Cycles: 3</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: See <a class="Sx" href="#LD_r8-">LD r8-</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_r16-"><a class="permalink" href="#LD_r16-">LD\n  r16-</a></h3>\n<p class="Pp">Decrement value in register <var class="Ar">r16</var> by 1.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_SP-"><a class="permalink" href="#LD_SP-">LD SP-</a></h3>\n<p class="Pp">Decrement value in register <b class="Sy">SP</b> by 1.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_IME,0"><a class="permalink" href="#LD_IME,0">LD\n  IME,0</a></h3>\n<p class="Pp">Disable Interrupts by clearing the <b class="Sy">IME</b> flag.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_IME,1"><a class="permalink" href="#LD_IME,1">LD\n  IME,1</a></h3>\n<p class="Pp">Enable Interrupts by setting the <b class="Sy">IME</b> flag. The\n    flag is only set <i class="Em">after</i> the instruction following\n    <b class="Sy">LD IME,1</b>.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD__HL_,_HL_"><a class="permalink" href="#LD__HL_,_HL_">LD\n  [HL],[HL]</a></h3>\n<p class="Pp">Enter CPU low-power consumption mode until an interrupt occurs.\n    The exact behavior of this instruction depends on the state of the\n    <b class="Sy">IME</b> flag.</p>\n<dl class="Bl-tag">\n  <dt id="IME"><a class="permalink" href="#IME"><b class="Sy">IME</b></a>\n    <span class="No">set</span></dt>\n  <dd>The CPU enters low-power mode until <i class="Em">after</i> an interrupt\n      is about to be serviced. The handler is executed normally, and the CPU\n      resumes execution after the <code class="Ic">LD [HL],[HL]</code> when that\n      returns.</dd>\n  <dt id="IME~2"><a class="permalink" href="#IME~2"><b class="Sy">IME</b></a>\n    <span class="No">not set</span></dt>\n  <dd>The behavior depends on whether an interrupt is pending (i.e.\n      &#x2018;<code class="Li">[IE] &amp; [IF]</code>&#x2019; is non-zero).\n    <dl class="Bl-tag">\n      <dt id="not">None pending</dt>\n      <dd>As soon as an interrupt becomes pending, the CPU resumes execution.\n          This is like the above, except that the handler is\n          <a class="permalink" href="#not"><i class="Em">not</i></a>\n        called.</dd>\n      <dt>Some pending</dt>\n      <dd>The CPU continues execution after the <code class="Ic">LD\n          [HL],[HL]</code>, but the byte after it is read twice in a row\n          (<b class="Sy">PC</b> is not incremented, due to a hardware bug).</dd>\n    </dl>\n  </dd>\n</dl>\n<p class="Pp">Cycles: -</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_r8+"><a class="permalink" href="#LD_r8+">LD r8+</a></h3>\n<p class="Pp">Increment value in register <var class="Ar">r8</var> by 1.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~10"><a class="permalink" href="#Z~10"><b class="Sy">Z</b></a></dt>\n  <dd>Set if result is 0.</dd>\n  <dt id="N~11"><a class="permalink" href="#N~11"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~12"><a class="permalink" href="#H~12"><b class="Sy">H</b></a></dt>\n  <dd>Set if overflow from bit 3.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD__HL_+"><a class="permalink" href="#LD__HL_+">LD\n  [HL]+</a></h3>\n<p class="Pp">Increment the byte pointed to by <b class="Sy">HL</b> by 1.</p>\n<p class="Pp">Cycles: 3</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: See <a class="Sx" href="#LD_r8+">LD r8+</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_r16+"><a class="permalink" href="#LD_r16+">LD\n  r16+</a></h3>\n<p class="Pp">Increment value in register <var class="Ar">r16</var> by 1.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_SP+"><a class="permalink" href="#LD_SP+">LD SP+</a></h3>\n<p class="Pp">Increment value in register <b class="Sy">SP</b> by 1.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_PC,n16"><a class="permalink" href="#LD_PC,n16">LD\n  PC,n16</a></h3>\n<p class="Pp">Store <var class="Ar">n16</var> into <b class="Sy">PC</b>;\n    effectively, jump to address <var class="Ar">n16</var>.</p>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 3</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_cc_PC,n16"><a class="permalink" href="#LD_cc_PC,n16">LD cc\n  PC,n16</a></h3>\n<p class="Pp">Jump to address <var class="Ar">n16</var> if condition\n    <var class="Ar">cc</var> is met.</p>\n<p class="Pp">Cycles: 4 taken / 3 untaken</p>\n<p class="Pp">Bytes: 3</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_PC,HL"><a class="permalink" href="#LD_PC,HL">LD\n  PC,HL</a></h3>\n<p class="Pp">Load <b class="Sy">PC</b> with value in register\n    <b class="Sy">HL</b>; effectively, jump to address in\n  <b class="Sy">HL</b>.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_PC,B_e8"><a class="permalink" href="#LD_PC,B_e8">LD PC,B\n  e8</a></h3>\n<p class="Pp">Relative Jump by adding <var class="Ar">e8</var> to the address of\n    the instruction following the <b class="Sy">LD PC,B e8</b>. To clarify, an\n    operand of 0 is equivalent to no jumping.</p>\n<p class="Pp">Cycles: 3</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_cc_PC,B_e8"><a class="permalink" href="#LD_cc_PC,B_e8">LD\n  cc PC,B e8</a></h3>\n<p class="Pp">Relative Jump by adding <var class="Ar">e8</var> to the current\n    address if condition <var class="Ar">cc</var> is met.</p>\n<p class="Pp">Cycles: 3 taken / 2 untaken</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_r8,r8"><a class="permalink" href="#LD_r8,r8">LD\n  r8,r8</a></h3>\n<p class="Pp">Load (copy) value in register on the right into register on the\n    left.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_r8,n8"><a class="permalink" href="#LD_r8,n8">LD\n  r8,n8</a></h3>\n<p class="Pp">Load value <var class="Ar">n8</var> into register\n    <var class="Ar">r8</var>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_r16,n16"><a class="permalink" href="#LD_r16,n16">LD\n  r16,n16</a></h3>\n<p class="Pp">Load value <var class="Ar">n16</var> into register\n    <var class="Ar">r16</var>.</p>\n<p class="Pp">Cycles: 3</p>\n<p class="Pp">Bytes: 3</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD__HL_,r8"><a class="permalink" href="#LD__HL_,r8">LD\n  [HL],r8</a></h3>\n<p class="Pp">Store value in register <var class="Ar">r8</var> into byte pointed\n    to by register <b class="Sy">HL</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD__HL_,n8"><a class="permalink" href="#LD__HL_,n8">LD\n  [HL],n8</a></h3>\n<p class="Pp">Store value <var class="Ar">n8</var> into byte pointed to by\n    register <b class="Sy">HL</b>.</p>\n<p class="Pp">Cycles: 3</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_r8,_HL_"><a class="permalink" href="#LD_r8,_HL_">LD\n  r8,[HL]</a></h3>\n<p class="Pp">Load value into register <var class="Ar">r8</var> from byte\n    pointed to by register <b class="Sy">HL</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD__r16_,A"><a class="permalink" href="#LD__r16_,A">LD\n  [r16],A</a></h3>\n<p class="Pp">Store value in register <b class="Sy">A</b> into byte pointed to\n    by register <var class="Ar">r16</var>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD__n16_,A"><a class="permalink" href="#LD__n16_,A">LD\n  [n16],A</a></h3>\n<p class="Pp">Store value in register <b class="Sy">A</b> into byte at address\n    <var class="Ar">n16</var>.</p>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 3</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD__H_n16_,A"><a class="permalink" href="#LD__H_n16_,A">LD [H\n  n16],A</a></h3>\n<p class="Pp">Store value in register <b class="Sy">A</b> into byte at address\n    <var class="Ar">n16</var>, provided it is between\n    <span class="Ad">$FF00</span> and <span class="Ad">$FFFF</span>.</p>\n<p class="Pp">Cycles: 3</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD__H_C_,A"><a class="permalink" href="#LD__H_C_,A">LD [H\n  C],A</a></h3>\n<p class="Pp">Store value in register <b class="Sy">A</b> into byte at address\n    <span class="Ad">$FF00+C</span>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_A,_r16_"><a class="permalink" href="#LD_A,_r16_">LD\n  A,[r16]</a></h3>\n<p class="Pp">Load value in register <b class="Sy">A</b> from byte pointed to by\n    register <var class="Ar">r16</var>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_A,_n16_"><a class="permalink" href="#LD_A,_n16_">LD\n  A,[n16]</a></h3>\n<p class="Pp">Load value in register <b class="Sy">A</b> from byte at address\n    <var class="Ar">n16</var>.</p>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 3</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_A,_H_n16_"><a class="permalink" href="#LD_A,_H_n16_">LD\n  A,[H n16]</a></h3>\n<p class="Pp">Load value in register <b class="Sy">A</b> from byte at address\n    <var class="Ar">n16</var>, provided it is between\n    <span class="Ad">$FF00</span> and <span class="Ad">$FFFF</span>.</p>\n<p class="Pp">Cycles: 3</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_A,_H_C_"><a class="permalink" href="#LD_A,_H_C_">LD A,[H\n  C]</a></h3>\n<p class="Pp">Load value in register <b class="Sy">A</b> from byte at address\n    <span class="Ad">$FF00+c</span>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD__HLI_,A"><a class="permalink" href="#LD__HLI_,A">LD\n  [HLI],A</a></h3>\n<p class="Pp">Store value in register <b class="Sy">A</b> into byte pointed by\n    <b class="Sy">HL</b> and increment <b class="Sy">HL</b> afterwards.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD__HLD_,A"><a class="permalink" href="#LD__HLD_,A">LD\n  [HLD],A</a></h3>\n<p class="Pp">Store value in register <b class="Sy">A</b> into byte pointed by\n    <b class="Sy">HL</b> and decrement <b class="Sy">HL</b> afterwards.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_A,_HLD_"><a class="permalink" href="#LD_A,_HLD_">LD\n  A,[HLD]</a></h3>\n<p class="Pp">Load value into register <b class="Sy">A</b> from byte pointed by\n    <b class="Sy">HL</b> and decrement <b class="Sy">HL</b> afterwards.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_A,_HLI_"><a class="permalink" href="#LD_A,_HLI_">LD\n  A,[HLI]</a></h3>\n<p class="Pp">Load value into register <b class="Sy">A</b> from byte pointed by\n    <b class="Sy">HL</b> and increment <b class="Sy">HL</b> afterwards.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_SP,n16"><a class="permalink" href="#LD_SP,n16">LD\n  SP,n16</a></h3>\n<p class="Pp">Load value <var class="Ar">n16</var> into register\n    <b class="Sy">SP</b>.</p>\n<p class="Pp">Cycles: 3</p>\n<p class="Pp">Bytes: 3</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD__n16_,SP"><a class="permalink" href="#LD__n16_,SP">LD\n  [n16],SP</a></h3>\n<p class="Pp">Store <b class="Sy">SP &amp; $FF</b> at address\n    <var class="Ar">n16</var> and <b class="Sy">SP &gt;&gt; 8</b> at address\n    <var class="Ar">n16</var> + 1.</p>\n<p class="Pp">Cycles: 5</p>\n<p class="Pp">Bytes: 3</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_HL,SP+e8"><a class="permalink" href="#LD_HL,SP+e8">LD\n  HL,SP+e8</a></h3>\n<p class="Pp">Add the signed value <var class="Ar">e8</var> to\n    <b class="Sy">SP</b> and store the result in <b class="Sy">HL</b>.</p>\n<p class="Pp">Cycles: 3</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~11"><a class="permalink" href="#Z~11"><b class="Sy">Z</b></a></dt>\n  <dd>0</dd>\n  <dt id="N~12"><a class="permalink" href="#N~12"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~13"><a class="permalink" href="#H~13"><b class="Sy">H</b></a></dt>\n  <dd>Set if overflow from bit 3.</dd>\n  <dt id="C~10"><a class="permalink" href="#C~10"><b class="Sy">C</b></a></dt>\n  <dd>Set if overflow from bit 7.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_SP,HL"><a class="permalink" href="#LD_SP,HL">LD\n  SP,HL</a></h3>\n<p class="Pp">Load register <b class="Sy">HL</b> into register\n    <b class="Sy">SP</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_PC,PC"><a class="permalink" href="#LD_PC,PC">LD\n  PC,PC</a></h3>\n<p class="Pp">No OPeration.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n<p class="Pp">This may be written, arguably incorrectly, as\n    &#x2018;<code class="Li">LD F,F</code>&#x2019;.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_A,A_r8"><a class="permalink" href="#LD_A,A_r8">LD\n  A,A|r8</a></h3>\n<p class="Pp">Store into <b class="Sy">A</b> the bitwise OR of the value in\n    <var class="Ar">r8</var> and <b class="Sy">A</b>.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~12"><a class="permalink" href="#Z~12"><b class="Sy">Z</b></a></dt>\n  <dd>Set if result is 0.</dd>\n  <dt id="N~13"><a class="permalink" href="#N~13"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~14"><a class="permalink" href="#H~14"><b class="Sy">H</b></a></dt>\n  <dd>0</dd>\n  <dt id="C~11"><a class="permalink" href="#C~11"><b class="Sy">C</b></a></dt>\n  <dd>0</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_A,A__HL_"><a class="permalink" href="#LD_A,A__HL_">LD\n  A,A|[HL]</a></h3>\n<p class="Pp">Store into <b class="Sy">A</b> the bitwise OR of the byte pointed\n    to by <b class="Sy">HL</b> and <b class="Sy">A</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: See <a class="Sx" href="#LD_A,A_r8">LD A,A|r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_A,A_n8"><a class="permalink" href="#LD_A,A_n8">LD\n  A,A|n8</a></h3>\n<p class="Pp">Store into <b class="Sy">A</b> the bitwise OR of\n    <var class="Ar">n8</var> and <b class="Sy">A</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See <a class="Sx" href="#LD_A,A_r8">LD A,A|r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_AF,_SP++_"><a class="permalink" href="#LD_AF,_SP++_">LD\n  AF,[SP++]</a></h3>\n<p class="Pp">Pop register <b class="Sy">AF</b> from the stack. This is roughly\n    equivalent to the following <i class="Em">imaginary</i> instructions:</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>ld f, [sp+] ; See below for individual flags\nld a, [sp+]</pre>\n</div>\n<p class="Pp">Cycles: 3</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~13"><a class="permalink" href="#Z~13"><b class="Sy">Z</b></a></dt>\n  <dd>Set from bit 7 of the popped low byte.</dd>\n  <dt id="N~14"><a class="permalink" href="#N~14"><b class="Sy">N</b></a></dt>\n  <dd>Set from bit 6 of the popped low byte.</dd>\n  <dt id="H~15"><a class="permalink" href="#H~15"><b class="Sy">H</b></a></dt>\n  <dd>Set from bit 5 of the popped low byte.</dd>\n  <dt id="C~12"><a class="permalink" href="#C~12"><b class="Sy">C</b></a></dt>\n  <dd>Set from bit 4 of the popped low byte.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_r16,_SP++_"><a class="permalink" href="#LD_r16,_SP++_">LD\n  r16,[SP++]</a></h3>\n<p class="Pp">Pop register <var class="Ar">r16</var> from the stack. This is\n    roughly equivalent to the following <i class="Em">imaginary</i>\n    instructions:</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>ld LOW(r16), [sp+] ; C, E or L\nld HIGH(r16), [sp+] ; B, D or H</pre>\n</div>\n<p class="Pp">Cycles: 3</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD__--SP_,AF"><a class="permalink" href="#LD__--SP_,AF">LD\n  [--SP],AF</a></h3>\n<p class="Pp">Push register <b class="Sy">AF</b> into the stack. This is roughly\n    equivalent to the following <i class="Em">imaginary</i> instructions:</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>ld [-sp], a\nld [-sp], f</pre>\n</div>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD__--SP_,r16"><a class="permalink" href="#LD__--SP_,r16">LD\n  [--SP],r16</a></h3>\n<p class="Pp">Push register <var class="Ar">r16</var> into the stack. This is\n    roughly equivalent to the following <i class="Em">imaginary</i>\n    instructions:</p>\n<div class="Bd Pp Bd-indent Li">\n<pre>ld [-sp], HIGH(r16) ; B, D or H\nld [-sp], LOW(r16) ; C, E or L</pre>\n</div>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_r8.u3,0"><a class="permalink" href="#LD_r8.u3,0">LD\n  r8.u3,0</a></h3>\n<p class="Pp">Set bit <var class="Ar">u3</var> in register\n    <var class="Ar">r8</var> to 0. Bit 0 is the rightmost one, bit 7 the\n    leftmost one.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD__HL_.u3,0"><a class="permalink" href="#LD__HL_.u3,0">LD\n  [HL].u3,0</a></h3>\n<p class="Pp">Set bit <var class="Ar">u3</var> in the byte pointed by\n    <b class="Sy">HL</b> to 0. Bit 0 is the rightmost one, bit 7 the leftmost\n    one.</p>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_PC,_SP++_"><a class="permalink" href="#LD_PC,_SP++_">LD\n  PC,[SP++]</a></h3>\n<p class="Pp">Return from subroutine.</p>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_cc_PC,_SP++_"><a class="permalink" href="#LD_cc_PC,_SP++_">LD\n  cc PC,[SP++]</a></h3>\n<p class="Pp">Return from subroutine if condition <var class="Ar">cc</var> is\n    met.</p>\n<p class="Pp">Cycles: 5 taken / 2 untaken</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_PC,_SP++__/_LD_IME,1"><a class="permalink" href="#LD_PC,_SP++__/_LD_IME,1">LD\n  PC,[SP++] / LD IME,1</a></h3>\n<p class="Pp">Return from subroutine and enable interrupts. This is basically\n    equivalent to executing <a class="Sx" href="#LD_IME,1">LD IME,1</a> then\n    <a class="Sx" href="#LD_PC,_SP++_">LD PC,[SP++]</a>, meaning that\n    <b class="Sy">IME</b> is set right after this instruction. (For technical\n    reasons, the notation is backwards.)</p>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_r8,\'r8"><a class="permalink" href="#LD_r8,\'r8">LD\n  r8,\'r8</a></h3>\n<p class="Pp">Rotate bits in register <var class="Ar">r8</var> left through\n    carry.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">C &lt;- [7 &lt;- 0] &lt;- C</div>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~14"><a class="permalink" href="#Z~14"><b class="Sy">Z</b></a></dt>\n  <dd>Set if result is 0.</dd>\n  <dt id="N~15"><a class="permalink" href="#N~15"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~16"><a class="permalink" href="#H~16"><b class="Sy">H</b></a></dt>\n  <dd>0</dd>\n  <dt id="C~13"><a class="permalink" href="#C~13"><b class="Sy">C</b></a></dt>\n  <dd>Set according to result.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD__HL_,\'_HL_"><a class="permalink" href="#LD__HL_,\'_HL_">LD\n  [HL],\'[HL]</a></h3>\n<p class="Pp">Rotate byte pointed to by <b class="Sy">HL</b> left through\n  carry.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">C &lt;- [7 &lt;- 0] &lt;- C</div>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See <a class="Sx" href="#LD_r8,\'r8">LD r8,\'r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_\'A"><a class="permalink" href="#LD_\'A">LD \'A</a></h3>\n<p class="Pp">Rotate register <b class="Sy">A</b> left through carry.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">C &lt;- [7 &lt;- 0] &lt;- C</div>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~15"><a class="permalink" href="#Z~15"><b class="Sy">Z</b></a></dt>\n  <dd>0</dd>\n  <dt id="N~16"><a class="permalink" href="#N~16"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~17"><a class="permalink" href="#H~17"><b class="Sy">H</b></a></dt>\n  <dd>0</dd>\n  <dt id="C~14"><a class="permalink" href="#C~14"><b class="Sy">C</b></a></dt>\n  <dd>Set according to result.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_r8,\'\'r8"><a class="permalink" href="#LD_r8,\'\'r8">LD\n  r8,\'\'r8</a></h3>\n<p class="Pp">Rotate register <var class="Ar">r8</var> left.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">C &lt;- [7 &lt;- 0] &lt;- [7]</div>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~16"><a class="permalink" href="#Z~16"><b class="Sy">Z</b></a></dt>\n  <dd>Set if result is 0.</dd>\n  <dt id="N~17"><a class="permalink" href="#N~17"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~18"><a class="permalink" href="#H~18"><b class="Sy">H</b></a></dt>\n  <dd>0</dd>\n  <dt id="C~15"><a class="permalink" href="#C~15"><b class="Sy">C</b></a></dt>\n  <dd>Set according to result.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD__HL_,\'\'_HL_"><a class="permalink" href="#LD__HL_,\'\'_HL_">LD\n  [HL],\'\'[HL]</a></h3>\n<p class="Pp">Rotate byte pointed to by <b class="Sy">HL</b> left.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">C &lt;- [7 &lt;- 0] &lt;- [7]</div>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See <a class="Sx" href="#LD_r8,\'\'r8">LD r8,\'\'r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_\'\'A"><a class="permalink" href="#LD_\'\'A">LD \'\'A</a></h3>\n<p class="Pp">Rotate register <b class="Sy">A</b> left.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">C &lt;- [7 &lt;- 0] &lt;- [7]</div>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~17"><a class="permalink" href="#Z~17"><b class="Sy">Z</b></a></dt>\n  <dd>0</dd>\n  <dt id="N~18"><a class="permalink" href="#N~18"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~19"><a class="permalink" href="#H~19"><b class="Sy">H</b></a></dt>\n  <dd>0</dd>\n  <dt id="C~16"><a class="permalink" href="#C~16"><b class="Sy">C</b></a></dt>\n  <dd>Set according to result.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_r8,r8\'"><a class="permalink" href="#LD_r8,r8\'">LD\n  r8,r8\'</a></h3>\n<p class="Pp">Rotate register <var class="Ar">r8</var> right through carry.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">C -&gt; [7 -&gt; 0] -&gt; C</div>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~18"><a class="permalink" href="#Z~18"><b class="Sy">Z</b></a></dt>\n  <dd>Set if result is 0.</dd>\n  <dt id="N~19"><a class="permalink" href="#N~19"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~20"><a class="permalink" href="#H~20"><b class="Sy">H</b></a></dt>\n  <dd>0</dd>\n  <dt id="C~17"><a class="permalink" href="#C~17"><b class="Sy">C</b></a></dt>\n  <dd>Set according to result.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD__HL_,_HL_\'"><a class="permalink" href="#LD__HL_,_HL_\'">LD\n  [HL],[HL]\'</a></h3>\n<p class="Pp">Rotate byte pointed to by <b class="Sy">HL</b> right through\n    carry.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">C -&gt; [7 -&gt; 0] -&gt; C</div>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See <a class="Sx" href="#LD_r8,r8\'">LD r8,r8\'</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_A\'"><a class="permalink" href="#LD_A\'">LD A\'</a></h3>\n<p class="Pp">Rotate register <b class="Sy">A</b> right through carry.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">C -&gt; [7 -&gt; 0] -&gt; C</div>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~19"><a class="permalink" href="#Z~19"><b class="Sy">Z</b></a></dt>\n  <dd>0</dd>\n  <dt id="N~20"><a class="permalink" href="#N~20"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~21"><a class="permalink" href="#H~21"><b class="Sy">H</b></a></dt>\n  <dd>0</dd>\n  <dt id="C~18"><a class="permalink" href="#C~18"><b class="Sy">C</b></a></dt>\n  <dd>Set according to result.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_r8,r8\'\'"><a class="permalink" href="#LD_r8,r8\'\'">LD\n  r8,r8\'\'</a></h3>\n<p class="Pp">Rotate register <var class="Ar">r8</var> right.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">[0] -&gt; [7 -&gt; 0] -&gt; C</div>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~20"><a class="permalink" href="#Z~20"><b class="Sy">Z</b></a></dt>\n  <dd>Set if result is 0.</dd>\n  <dt id="N~21"><a class="permalink" href="#N~21"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~22"><a class="permalink" href="#H~22"><b class="Sy">H</b></a></dt>\n  <dd>0</dd>\n  <dt id="C~19"><a class="permalink" href="#C~19"><b class="Sy">C</b></a></dt>\n  <dd>Set according to result.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD__HL_,_HL_\'\'"><a class="permalink" href="#LD__HL_,_HL_\'\'">LD\n  [HL],[HL]\'\'</a></h3>\n<p class="Pp">Rotate byte pointed to by <b class="Sy">HL</b> right.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">[0] -&gt; [7 -&gt; 0] -&gt; C</div>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See <a class="Sx" href="#LD_r8,r8\'\'">LD r8,r8\'\'</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_A\'\'"><a class="permalink" href="#LD_A\'\'">LD A\'\'</a></h3>\n<p class="Pp">Rotate register <b class="Sy">A</b> right.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">[0] -&gt; [7 -&gt; 0] -&gt; C</div>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~21"><a class="permalink" href="#Z~21"><b class="Sy">Z</b></a></dt>\n  <dd>0</dd>\n  <dt id="N~22"><a class="permalink" href="#N~22"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~23"><a class="permalink" href="#H~23"><b class="Sy">H</b></a></dt>\n  <dd>0</dd>\n  <dt id="C~20"><a class="permalink" href="#C~20"><b class="Sy">C</b></a></dt>\n  <dd>Set according to result.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD__--SP_,PC,B_vec"><a class="permalink" href="#LD__--SP_,PC,B_vec">LD\n  [--SP],PC,B vec</a></h3>\n<p class="Pp">Call address <var class="Ar">vec</var>. This is a shorter and\n    faster equivalent to <a class="Sx" href="#LD__--SP_,PC,n16">LD\n    [--SP],PC,n16</a> for suitable <var class="Ar">vec</var> values of\n    <var class="Ar">n16</var>.</p>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_A,A-C-r8"><a class="permalink" href="#LD_A,A-C-r8">LD\n  A,A-C-r8</a></h3>\n<p class="Pp">Subtract the value in <var class="Ar">r8</var> and the carry flag\n    from <b class="Sy">A</b>.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~22"><a class="permalink" href="#Z~22"><b class="Sy">Z</b></a></dt>\n  <dd>Set if result is 0.</dd>\n  <dt id="N~23"><a class="permalink" href="#N~23"><b class="Sy">N</b></a></dt>\n  <dd>1</dd>\n  <dt id="H~24"><a class="permalink" href="#H~24"><b class="Sy">H</b></a></dt>\n  <dd>Set if borrow from bit 4.</dd>\n  <dt id="C~21"><a class="permalink" href="#C~21"><b class="Sy">C</b></a></dt>\n  <dd>Set if borrow (i.e. if (<var class="Ar">r8</var> + carry) &gt;\n      <b class="Sy">A</b>).</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_A,A-C-_HL_"><a class="permalink" href="#LD_A,A-C-_HL_">LD\n  A,A-C-[HL]</a></h3>\n<p class="Pp">Subtract the byte pointed to by <b class="Sy">HL</b> and the carry\n    flag from <b class="Sy">A</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: See <a class="Sx" href="#LD_A,A_C_r8">LD A,A-C-r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_A,A-C-n8"><a class="permalink" href="#LD_A,A-C-n8">LD\n  A,A-C-n8</a></h3>\n<p class="Pp">Subtract the value <var class="Ar">n8</var> and the carry flag\n    from <b class="Sy">A</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See <a class="Sx" href="#LD_A,A_C_r8">LD A,A-C-r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_F.4,1"><a class="permalink" href="#LD_F.4,1">LD\n  F.4,1</a></h3>\n<p class="Pp">Set Carry Flag.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="N~24"><a class="permalink" href="#N~24"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~25"><a class="permalink" href="#H~25"><b class="Sy">H</b></a></dt>\n  <dd>0</dd>\n  <dt id="C~22"><a class="permalink" href="#C~22"><b class="Sy">C</b></a></dt>\n  <dd>1</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_r8.u3,1"><a class="permalink" href="#LD_r8.u3,1">LD\n  r8.u3,1</a></h3>\n<p class="Pp">Set bit <var class="Ar">u3</var> in register\n    <var class="Ar">r8</var> to 1. Bit 0 is the rightmost one, bit 7 the\n    leftmost one.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD__HL_.u3,1"><a class="permalink" href="#LD__HL_.u3,1">LD\n  [HL].u3,1</a></h3>\n<p class="Pp">Set bit <var class="Ar">u3</var> in the byte pointed by\n    <b class="Sy">HL</b> to 1. Bit 0 is the rightmost one, bit 7 the leftmost\n    one.</p>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_r8,__r8"><a class="permalink" href="#LD_r8,__r8">LD\n  r8,&lt;&lt;r8</a></h3>\n<p class="Pp">Shift Left Arithmetic register <var class="Ar">r8</var>.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">C &lt;- [7 &lt;- 0] &lt;- 0</div>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~23"><a class="permalink" href="#Z~23"><b class="Sy">Z</b></a></dt>\n  <dd>Set if result is 0.</dd>\n  <dt id="N~25"><a class="permalink" href="#N~25"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~26"><a class="permalink" href="#H~26"><b class="Sy">H</b></a></dt>\n  <dd>0</dd>\n  <dt id="C~23"><a class="permalink" href="#C~23"><b class="Sy">C</b></a></dt>\n  <dd>Set according to result.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD__HL_,___HL_"><a class="permalink" href="#LD__HL_,___HL_">LD\n  [HL],&lt;&lt;[HL]</a></h3>\n<p class="Pp">Shift Left Arithmetic byte pointed to by <b class="Sy">HL</b>.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">C &lt;- [7 &lt;- 0] &lt;- 0</div>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See <a class="Sx" href="#LD_r8,__r8">LD\n  r8,&lt;&lt;r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_r8,__r8~2"><a class="permalink" href="#LD_r8,__r8~2">LD\n  r8,&gt;&gt;r8</a></h3>\n<p class="Pp">Shift Right Arithmetic register <var class="Ar">r8</var>.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">[7] -&gt; [7 -&gt; 0] -&gt; C</div>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~24"><a class="permalink" href="#Z~24"><b class="Sy">Z</b></a></dt>\n  <dd>Set if result is 0.</dd>\n  <dt id="N~26"><a class="permalink" href="#N~26"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~27"><a class="permalink" href="#H~27"><b class="Sy">H</b></a></dt>\n  <dd>0</dd>\n  <dt id="C~24"><a class="permalink" href="#C~24"><b class="Sy">C</b></a></dt>\n  <dd>Set according to result.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD__HL_,___HL_~2"><a class="permalink" href="#LD__HL_,___HL_~2">LD\n  [HL],&gt;&gt;[HL]</a></h3>\n<p class="Pp">Shift Right Arithmetic byte pointed to by\n  <b class="Sy">HL</b>.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">[7] -&gt; [7 -&gt; 0] -&gt; C</div>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See <a class="Sx" href="#LD_r8,__r8">LD\n  r8,&gt;&gt;r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_r8,___r8"><a class="permalink" href="#LD_r8,___r8">LD\n  r8,&gt;&gt;&gt;r8</a></h3>\n<p class="Pp">Shift Right Logic register <var class="Ar">r8</var>.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">0 -&gt; [7 -&gt; 0] -&gt; C</div>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~25"><a class="permalink" href="#Z~25"><b class="Sy">Z</b></a></dt>\n  <dd>Set if result is 0.</dd>\n  <dt id="N~27"><a class="permalink" href="#N~27"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~28"><a class="permalink" href="#H~28"><b class="Sy">H</b></a></dt>\n  <dd>0</dd>\n  <dt id="C~25"><a class="permalink" href="#C~25"><b class="Sy">C</b></a></dt>\n  <dd>Set according to result.</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD__HL_,____HL_"><a class="permalink" href="#LD__HL_,____HL_">LD\n  [HL],&gt;&gt;&gt;[HL]</a></h3>\n<p class="Pp">Shift Right Logic byte pointed to by <b class="Sy">HL</b>.</p>\n<p class="Pp"></p>\n<div class="Bd Bd-indent">0 -&gt; [7 -&gt; 0] -&gt; C</div>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See <a class="Sx" href="#LD_r8,___r8">LD\n    r8,&gt;&gt;&gt;r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD,0"><a class="permalink" href="#LD,0">LD,0</a></h3>\n<p class="Pp">Enter CPU very low power mode. Also used to switch between double\n    and normal speed CPU modes in GBC.</p>\n<p class="Pp">Cycles: -</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: None affected.</p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_A,A-r8"><a class="permalink" href="#LD_A,A-r8">LD\n  A,A-r8</a></h3>\n<p class="Pp">Subtract the value in <var class="Ar">r8</var> from\n    <b class="Sy">A</b>.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~26"><a class="permalink" href="#Z~26"><b class="Sy">Z</b></a></dt>\n  <dd>Set if result is 0.</dd>\n  <dt id="N~28"><a class="permalink" href="#N~28"><b class="Sy">N</b></a></dt>\n  <dd>1</dd>\n  <dt id="H~29"><a class="permalink" href="#H~29"><b class="Sy">H</b></a></dt>\n  <dd>Set if borrow from bit 4.</dd>\n  <dt id="C~26"><a class="permalink" href="#C~26"><b class="Sy">C</b></a></dt>\n  <dd>Set if borrow (set if <var class="Ar">r8</var> &gt;\n    <b class="Sy">A</b>).</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_A,A-_HL_"><a class="permalink" href="#LD_A,A-_HL_">LD\n  A,A-[HL]</a></h3>\n<p class="Pp">Subtract the byte pointed to by <b class="Sy">HL</b> from\n    <b class="Sy">A</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: See <a class="Sx" href="#LD_A,A_r8">LD A,A-r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_A,A-n8"><a class="permalink" href="#LD_A,A-n8">LD\n  A,A-n8</a></h3>\n<p class="Pp">Subtract the value <var class="Ar">n8</var> from\n    <b class="Sy">A</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See <a class="Sx" href="#LD_A,A_r8">LD A,A-r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_r8,\'\'r8\'\'"><a class="permalink" href="#LD_r8,\'\'r8\'\'">LD\n  r8,\'\'r8\'\'</a></h3>\n<p class="Pp">Swap upper 4 bits in register <var class="Ar">r8</var> and the\n    lower 4 ones.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~27"><a class="permalink" href="#Z~27"><b class="Sy">Z</b></a></dt>\n  <dd>Set if result is 0.</dd>\n  <dt id="N~29"><a class="permalink" href="#N~29"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~30"><a class="permalink" href="#H~30"><b class="Sy">H</b></a></dt>\n  <dd>0</dd>\n  <dt id="C~27"><a class="permalink" href="#C~27"><b class="Sy">C</b></a></dt>\n  <dd>0</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD__HL_,\'\'_HL_\'\'"><a class="permalink" href="#LD__HL_,\'\'_HL_\'\'">LD\n  [HL],\'\'[HL]\'\'</a></h3>\n<p class="Pp">Swap upper 4 bits in the byte pointed by <b class="Sy">HL</b> and\n    the lower 4 ones.</p>\n<p class="Pp">Cycles: 4</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See <a class="Sx" href="#LD_r8,\'\'r8\'\'">LD r8,\'\'r8\'\'</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_A,A_r8~2"><a class="permalink" href="#LD_A,A_r8~2">LD\n  A,A^r8</a></h3>\n<p class="Pp">Bitwise XOR between the value in <var class="Ar">r8</var> and\n    <b class="Sy">A</b>.</p>\n<p class="Pp">Cycles: 1</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags:</p>\n<dl class="Bl-hang Bl-compact">\n  <dt id="Z~28"><a class="permalink" href="#Z~28"><b class="Sy">Z</b></a></dt>\n  <dd>Set if result is 0.</dd>\n  <dt id="N~30"><a class="permalink" href="#N~30"><b class="Sy">N</b></a></dt>\n  <dd>0</dd>\n  <dt id="H~31"><a class="permalink" href="#H~31"><b class="Sy">H</b></a></dt>\n  <dd>0</dd>\n  <dt id="C~28"><a class="permalink" href="#C~28"><b class="Sy">C</b></a></dt>\n  <dd>0</dd>\n</dl>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_A,A__HL_~2"><a class="permalink" href="#LD_A,A__HL_~2">LD\n  A,A^[HL]</a></h3>\n<p class="Pp">Bitwise XOR between the byte pointed to by <b class="Sy">HL</b>\n    and <b class="Sy">A</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 1</p>\n<p class="Pp">Flags: See <a class="Sx" href="#LD_A,A_r8">LD A,A^r8</a></p>\n</section>\n<section class="Ss">\n<h3 class="Ss" id="LD_A,A_n8~2"><a class="permalink" href="#LD_A,A_n8~2">LD\n  A,A^n8</a></h3>\n<p class="Pp">Bitwise XOR between the value in <var class="Ar">n8</var> and\n    <b class="Sy">A</b>.</p>\n<p class="Pp">Cycles: 2</p>\n<p class="Pp">Bytes: 2</p>\n<p class="Pp">Flags: See <a class="Sx" href="#LD_A,A_r8">LD A,A^r8</a></p>\n</section>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="SEE_ALSO"><a class="permalink" href="#SEE_ALSO">SEE\n  ALSO</a></h2>\n<p class="Pp"><a class="Xr" href="./rgbasm.1">rgbasm(1)</a>,\n    <a class="Xr" href="./rgbds.7">rgbds(7)</a></p>\n</section>\n<section class="Sh">\n<h2 class="Sh" id="HISTORY"><a class="permalink" href="#HISTORY">HISTORY</a></h2>\n<p class="Pp"><code class="Nm">rgbds</code> was originally written by Carsten\n    S&#x00F8;rensen as part of the ASMotor package, and was later packaged in\n    RGBDS by Justin Lloyd. It is now maintained by a number of contributors at\n    <a class="Lk" href="https://github.com/gbdev/rgbds">https://github.com/gbdev/rgbds</a>.</p>\n</section>\n'}}))}_.isMDXComponent=!0}}]);